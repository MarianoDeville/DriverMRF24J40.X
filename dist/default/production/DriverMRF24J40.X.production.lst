

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Apr 18 14:19:42 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F46K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=2
    14                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Generated 13/12/2024 GMT
    43                           ; 
    44                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F46K20 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000FE0                     bsr             equ	4064
    77   000FE9                     fsr0            equ	4073
    78   000FEA                     fsr0h           equ	4074
    79   000FE9                     fsr0l           equ	4073
    80   000FE1                     fsr1            equ	4065
    81   000FE2                     fsr1h           equ	4066
    82   000FE1                     fsr1l           equ	4065
    83   000FD9                     fsr2            equ	4057
    84   000FDA                     fsr2h           equ	4058
    85   000FD9                     fsr2l           equ	4057
    86   000FEF                     indf0           equ	4079
    87   000FE7                     indf1           equ	4071
    88   000FDF                     indf2           equ	4063
    89   000FF2                     intcon          equ	4082
    90   000000                     nvmcon          equ	0
    91   000FF9                     pcl             equ	4089
    92   000FFA                     pclath          equ	4090
    93   000FFB                     pclatu          equ	4091
    94   000FEB                     plusw0          equ	4075
    95   000FE3                     plusw1          equ	4067
    96   000FDB                     plusw2          equ	4059
    97   000FED                     postdec0        equ	4077
    98   000FE5                     postdec1        equ	4069
    99   000FDD                     postdec2        equ	4061
   100   000FEE                     postinc0        equ	4078
   101   000FE6                     postinc1        equ	4070
   102   000FDE                     postinc2        equ	4062
   103   000FEC                     preinc0         equ	4076
   104   000FE4                     preinc1         equ	4068
   105   000FDC                     preinc2         equ	4060
   106   000FF3                     prod            equ	4083
   107   000FF4                     prodh           equ	4084
   108   000FF3                     prodl           equ	4083
   109   000FD8                     status          equ	4056
   110   000FF5                     tablat          equ	4085
   111   000FF6                     tblptr          equ	4086
   112   000FF7                     tblptrh         equ	4087
   113   000FF6                     tblptrl         equ	4086
   114   000FF8                     tblptru         equ	4088
   115   000FFD                     tosl            equ	4093
   116   000FE8                     wreg            equ	4072
   117   000F77                     SSPMSK          equ	3959	;# 
   118   000F78                     SLRCON          equ	3960	;# 
   119   000F79                     CM2CON1         equ	3961	;# 
   120   000F7A                     CM2CON0         equ	3962	;# 
   121   000F7B                     CM1CON0         equ	3963	;# 
   122   000F7C                     WPUB            equ	3964	;# 
   123   000F7D                     IOCB            equ	3965	;# 
   124   000F7E                     ANSEL           equ	3966	;# 
   125   000F7F                     ANSELH          equ	3967	;# 
   126   000F80                     PORTA           equ	3968	;# 
   127   000F81                     PORTB           equ	3969	;# 
   128   000F82                     PORTC           equ	3970	;# 
   129   000F83                     PORTD           equ	3971	;# 
   130   000F84                     PORTE           equ	3972	;# 
   131   000F89                     LATA            equ	3977	;# 
   132   000F8A                     LATB            equ	3978	;# 
   133   000F8B                     LATC            equ	3979	;# 
   134   000F8C                     LATD            equ	3980	;# 
   135   000F8D                     LATE            equ	3981	;# 
   136   000F92                     TRISA           equ	3986	;# 
   137   000F92                     DDRA            equ	3986	;# 
   138   000F93                     TRISB           equ	3987	;# 
   139   000F93                     DDRB            equ	3987	;# 
   140   000F94                     TRISC           equ	3988	;# 
   141   000F94                     DDRC            equ	3988	;# 
   142   000F95                     TRISD           equ	3989	;# 
   143   000F95                     DDRD            equ	3989	;# 
   144   000F96                     TRISE           equ	3990	;# 
   145   000F96                     DDRE            equ	3990	;# 
   146   000F9B                     OSCTUNE         equ	3995	;# 
   147   000F9D                     PIE1            equ	3997	;# 
   148   000F9E                     PIR1            equ	3998	;# 
   149   000F9F                     IPR1            equ	3999	;# 
   150   000FA0                     PIE2            equ	4000	;# 
   151   000FA1                     PIR2            equ	4001	;# 
   152   000FA2                     IPR2            equ	4002	;# 
   153   000FA6                     EECON1          equ	4006	;# 
   154   000FA7                     EECON2          equ	4007	;# 
   155   000FA8                     EEDATA          equ	4008	;# 
   156   000FA9                     EEADR           equ	4009	;# 
   157   000FAA                     EEADRH          equ	4010	;# 
   158   000FAB                     RCSTA           equ	4011	;# 
   159   000FAB                     RCSTA1          equ	4011	;# 
   160   000FAC                     TXSTA           equ	4012	;# 
   161   000FAC                     TXSTA1          equ	4012	;# 
   162   000FAD                     TXREG           equ	4013	;# 
   163   000FAD                     TXREG1          equ	4013	;# 
   164   000FAE                     RCREG           equ	4014	;# 
   165   000FAE                     RCREG1          equ	4014	;# 
   166   000FAF                     SPBRG           equ	4015	;# 
   167   000FAF                     SPBRG1          equ	4015	;# 
   168   000FB0                     SPBRGH          equ	4016	;# 
   169   000FB1                     T3CON           equ	4017	;# 
   170   000FB2                     TMR3            equ	4018	;# 
   171   000FB2                     TMR3L           equ	4018	;# 
   172   000FB3                     TMR3H           equ	4019	;# 
   173   000FB4                     CVRCON2         equ	4020	;# 
   174   000FB5                     CVRCON          equ	4021	;# 
   175   000FB6                     ECCP1AS         equ	4022	;# 
   176   000FB7                     PWM1CON         equ	4023	;# 
   177   000FB8                     BAUDCON         equ	4024	;# 
   178   000FB8                     BAUDCTL         equ	4024	;# 
   179   000FB9                     PSTRCON         equ	4025	;# 
   180   000FBA                     CCP2CON         equ	4026	;# 
   181   000FBB                     CCPR2           equ	4027	;# 
   182   000FBB                     CCPR2L          equ	4027	;# 
   183   000FBC                     CCPR2H          equ	4028	;# 
   184   000FBD                     CCP1CON         equ	4029	;# 
   185   000FBE                     CCPR1           equ	4030	;# 
   186   000FBE                     CCPR1L          equ	4030	;# 
   187   000FBF                     CCPR1H          equ	4031	;# 
   188   000FC0                     ADCON2          equ	4032	;# 
   189   000FC1                     ADCON1          equ	4033	;# 
   190   000FC2                     ADCON0          equ	4034	;# 
   191   000FC3                     ADRES           equ	4035	;# 
   192   000FC3                     ADRESL          equ	4035	;# 
   193   000FC4                     ADRESH          equ	4036	;# 
   194   000FC5                     SSPCON2         equ	4037	;# 
   195   000FC6                     SSPCON1         equ	4038	;# 
   196   000FC7                     SSPSTAT         equ	4039	;# 
   197   000FC8                     SSPADD          equ	4040	;# 
   198   000FC9                     SSPBUF          equ	4041	;# 
   199   000FCA                     T2CON           equ	4042	;# 
   200   000FCB                     PR2             equ	4043	;# 
   201   000FCB                     MEMCON          equ	4043	;# 
   202   000FCC                     TMR2            equ	4044	;# 
   203   000FCD                     T1CON           equ	4045	;# 
   204   000FCE                     TMR1            equ	4046	;# 
   205   000FCE                     TMR1L           equ	4046	;# 
   206   000FCF                     TMR1H           equ	4047	;# 
   207   000FD0                     RCON            equ	4048	;# 
   208   000FD1                     WDTCON          equ	4049	;# 
   209   000FD2                     HLVDCON         equ	4050	;# 
   210   000FD2                     LVDCON          equ	4050	;# 
   211   000FD3                     OSCCON          equ	4051	;# 
   212   000FD5                     T0CON           equ	4053	;# 
   213   000FD6                     TMR0            equ	4054	;# 
   214   000FD6                     TMR0L           equ	4054	;# 
   215   000FD7                     TMR0H           equ	4055	;# 
   216   000FD8                     STATUS          equ	4056	;# 
   217   000FD9                     FSR2            equ	4057	;# 
   218   000FD9                     FSR2L           equ	4057	;# 
   219   000FDA                     FSR2H           equ	4058	;# 
   220   000FDB                     PLUSW2          equ	4059	;# 
   221   000FDC                     PREINC2         equ	4060	;# 
   222   000FDD                     POSTDEC2        equ	4061	;# 
   223   000FDE                     POSTINC2        equ	4062	;# 
   224   000FDF                     INDF2           equ	4063	;# 
   225   000FE0                     BSR             equ	4064	;# 
   226   000FE1                     FSR1            equ	4065	;# 
   227   000FE1                     FSR1L           equ	4065	;# 
   228   000FE2                     FSR1H           equ	4066	;# 
   229   000FE3                     PLUSW1          equ	4067	;# 
   230   000FE4                     PREINC1         equ	4068	;# 
   231   000FE5                     POSTDEC1        equ	4069	;# 
   232   000FE6                     POSTINC1        equ	4070	;# 
   233   000FE7                     INDF1           equ	4071	;# 
   234   000FE8                     WREG            equ	4072	;# 
   235   000FE9                     FSR0            equ	4073	;# 
   236   000FE9                     FSR0L           equ	4073	;# 
   237   000FEA                     FSR0H           equ	4074	;# 
   238   000FEB                     PLUSW0          equ	4075	;# 
   239   000FEC                     PREINC0         equ	4076	;# 
   240   000FED                     POSTDEC0        equ	4077	;# 
   241   000FEE                     POSTINC0        equ	4078	;# 
   242   000FEF                     INDF0           equ	4079	;# 
   243   000FF0                     INTCON3         equ	4080	;# 
   244   000FF1                     INTCON2         equ	4081	;# 
   245   000FF2                     INTCON          equ	4082	;# 
   246   000FF3                     PROD            equ	4083	;# 
   247   000FF3                     PRODL           equ	4083	;# 
   248   000FF4                     PRODH           equ	4084	;# 
   249   000FF5                     TABLAT          equ	4085	;# 
   250   000FF6                     TBLPTR          equ	4086	;# 
   251   000FF6                     TBLPTRL         equ	4086	;# 
   252   000FF7                     TBLPTRH         equ	4087	;# 
   253   000FF8                     TBLPTRU         equ	4088	;# 
   254   000FF9                     PCLAT           equ	4089	;# 
   255   000FF9                     PC              equ	4089	;# 
   256   000FF9                     PCL             equ	4089	;# 
   257   000FFA                     PCLATH          equ	4090	;# 
   258   000FFB                     PCLATU          equ	4091	;# 
   259   000FFC                     STKPTR          equ	4092	;# 
   260   000FFD                     TOS             equ	4093	;# 
   261   000FFD                     TOSL            equ	4093	;# 
   262   000FFE                     TOSH            equ	4094	;# 
   263   000FFF                     TOSU            equ	4095	;# 
   264   000F77                     SSPMSK          equ	3959	;# 
   265   000F78                     SLRCON          equ	3960	;# 
   266   000F79                     CM2CON1         equ	3961	;# 
   267   000F7A                     CM2CON0         equ	3962	;# 
   268   000F7B                     CM1CON0         equ	3963	;# 
   269   000F7C                     WPUB            equ	3964	;# 
   270   000F7D                     IOCB            equ	3965	;# 
   271   000F7E                     ANSEL           equ	3966	;# 
   272   000F7F                     ANSELH          equ	3967	;# 
   273   000F80                     PORTA           equ	3968	;# 
   274   000F81                     PORTB           equ	3969	;# 
   275   000F82                     PORTC           equ	3970	;# 
   276   000F83                     PORTD           equ	3971	;# 
   277   000F84                     PORTE           equ	3972	;# 
   278   000F89                     LATA            equ	3977	;# 
   279   000F8A                     LATB            equ	3978	;# 
   280   000F8B                     LATC            equ	3979	;# 
   281   000F8C                     LATD            equ	3980	;# 
   282   000F8D                     LATE            equ	3981	;# 
   283   000F92                     TRISA           equ	3986	;# 
   284   000F92                     DDRA            equ	3986	;# 
   285   000F93                     TRISB           equ	3987	;# 
   286   000F93                     DDRB            equ	3987	;# 
   287   000F94                     TRISC           equ	3988	;# 
   288   000F94                     DDRC            equ	3988	;# 
   289   000F95                     TRISD           equ	3989	;# 
   290   000F95                     DDRD            equ	3989	;# 
   291   000F96                     TRISE           equ	3990	;# 
   292   000F96                     DDRE            equ	3990	;# 
   293   000F9B                     OSCTUNE         equ	3995	;# 
   294   000F9D                     PIE1            equ	3997	;# 
   295   000F9E                     PIR1            equ	3998	;# 
   296   000F9F                     IPR1            equ	3999	;# 
   297   000FA0                     PIE2            equ	4000	;# 
   298   000FA1                     PIR2            equ	4001	;# 
   299   000FA2                     IPR2            equ	4002	;# 
   300   000FA6                     EECON1          equ	4006	;# 
   301   000FA7                     EECON2          equ	4007	;# 
   302   000FA8                     EEDATA          equ	4008	;# 
   303   000FA9                     EEADR           equ	4009	;# 
   304   000FAA                     EEADRH          equ	4010	;# 
   305   000FAB                     RCSTA           equ	4011	;# 
   306   000FAB                     RCSTA1          equ	4011	;# 
   307   000FAC                     TXSTA           equ	4012	;# 
   308   000FAC                     TXSTA1          equ	4012	;# 
   309   000FAD                     TXREG           equ	4013	;# 
   310   000FAD                     TXREG1          equ	4013	;# 
   311   000FAE                     RCREG           equ	4014	;# 
   312   000FAE                     RCREG1          equ	4014	;# 
   313   000FAF                     SPBRG           equ	4015	;# 
   314   000FAF                     SPBRG1          equ	4015	;# 
   315   000FB0                     SPBRGH          equ	4016	;# 
   316   000FB1                     T3CON           equ	4017	;# 
   317   000FB2                     TMR3            equ	4018	;# 
   318   000FB2                     TMR3L           equ	4018	;# 
   319   000FB3                     TMR3H           equ	4019	;# 
   320   000FB4                     CVRCON2         equ	4020	;# 
   321   000FB5                     CVRCON          equ	4021	;# 
   322   000FB6                     ECCP1AS         equ	4022	;# 
   323   000FB7                     PWM1CON         equ	4023	;# 
   324   000FB8                     BAUDCON         equ	4024	;# 
   325   000FB8                     BAUDCTL         equ	4024	;# 
   326   000FB9                     PSTRCON         equ	4025	;# 
   327   000FBA                     CCP2CON         equ	4026	;# 
   328   000FBB                     CCPR2           equ	4027	;# 
   329   000FBB                     CCPR2L          equ	4027	;# 
   330   000FBC                     CCPR2H          equ	4028	;# 
   331   000FBD                     CCP1CON         equ	4029	;# 
   332   000FBE                     CCPR1           equ	4030	;# 
   333   000FBE                     CCPR1L          equ	4030	;# 
   334   000FBF                     CCPR1H          equ	4031	;# 
   335   000FC0                     ADCON2          equ	4032	;# 
   336   000FC1                     ADCON1          equ	4033	;# 
   337   000FC2                     ADCON0          equ	4034	;# 
   338   000FC3                     ADRES           equ	4035	;# 
   339   000FC3                     ADRESL          equ	4035	;# 
   340   000FC4                     ADRESH          equ	4036	;# 
   341   000FC5                     SSPCON2         equ	4037	;# 
   342   000FC6                     SSPCON1         equ	4038	;# 
   343   000FC7                     SSPSTAT         equ	4039	;# 
   344   000FC8                     SSPADD          equ	4040	;# 
   345   000FC9                     SSPBUF          equ	4041	;# 
   346   000FCA                     T2CON           equ	4042	;# 
   347   000FCB                     PR2             equ	4043	;# 
   348   000FCB                     MEMCON          equ	4043	;# 
   349   000FCC                     TMR2            equ	4044	;# 
   350   000FCD                     T1CON           equ	4045	;# 
   351   000FCE                     TMR1            equ	4046	;# 
   352   000FCE                     TMR1L           equ	4046	;# 
   353   000FCF                     TMR1H           equ	4047	;# 
   354   000FD0                     RCON            equ	4048	;# 
   355   000FD1                     WDTCON          equ	4049	;# 
   356   000FD2                     HLVDCON         equ	4050	;# 
   357   000FD2                     LVDCON          equ	4050	;# 
   358   000FD3                     OSCCON          equ	4051	;# 
   359   000FD5                     T0CON           equ	4053	;# 
   360   000FD6                     TMR0            equ	4054	;# 
   361   000FD6                     TMR0L           equ	4054	;# 
   362   000FD7                     TMR0H           equ	4055	;# 
   363   000FD8                     STATUS          equ	4056	;# 
   364   000FD9                     FSR2            equ	4057	;# 
   365   000FD9                     FSR2L           equ	4057	;# 
   366   000FDA                     FSR2H           equ	4058	;# 
   367   000FDB                     PLUSW2          equ	4059	;# 
   368   000FDC                     PREINC2         equ	4060	;# 
   369   000FDD                     POSTDEC2        equ	4061	;# 
   370   000FDE                     POSTINC2        equ	4062	;# 
   371   000FDF                     INDF2           equ	4063	;# 
   372   000FE0                     BSR             equ	4064	;# 
   373   000FE1                     FSR1            equ	4065	;# 
   374   000FE1                     FSR1L           equ	4065	;# 
   375   000FE2                     FSR1H           equ	4066	;# 
   376   000FE3                     PLUSW1          equ	4067	;# 
   377   000FE4                     PREINC1         equ	4068	;# 
   378   000FE5                     POSTDEC1        equ	4069	;# 
   379   000FE6                     POSTINC1        equ	4070	;# 
   380   000FE7                     INDF1           equ	4071	;# 
   381   000FE8                     WREG            equ	4072	;# 
   382   000FE9                     FSR0            equ	4073	;# 
   383   000FE9                     FSR0L           equ	4073	;# 
   384   000FEA                     FSR0H           equ	4074	;# 
   385   000FEB                     PLUSW0          equ	4075	;# 
   386   000FEC                     PREINC0         equ	4076	;# 
   387   000FED                     POSTDEC0        equ	4077	;# 
   388   000FEE                     POSTINC0        equ	4078	;# 
   389   000FEF                     INDF0           equ	4079	;# 
   390   000FF0                     INTCON3         equ	4080	;# 
   391   000FF1                     INTCON2         equ	4081	;# 
   392   000FF2                     INTCON          equ	4082	;# 
   393   000FF3                     PROD            equ	4083	;# 
   394   000FF3                     PRODL           equ	4083	;# 
   395   000FF4                     PRODH           equ	4084	;# 
   396   000FF5                     TABLAT          equ	4085	;# 
   397   000FF6                     TBLPTR          equ	4086	;# 
   398   000FF6                     TBLPTRL         equ	4086	;# 
   399   000FF7                     TBLPTRH         equ	4087	;# 
   400   000FF8                     TBLPTRU         equ	4088	;# 
   401   000FF9                     PCLAT           equ	4089	;# 
   402   000FF9                     PC              equ	4089	;# 
   403   000FF9                     PCL             equ	4089	;# 
   404   000FFA                     PCLATH          equ	4090	;# 
   405   000FFB                     PCLATU          equ	4091	;# 
   406   000FFC                     STKPTR          equ	4092	;# 
   407   000FFD                     TOS             equ	4093	;# 
   408   000FFD                     TOSL            equ	4093	;# 
   409   000FFE                     TOSH            equ	4094	;# 
   410   000FFF                     TOSU            equ	4095	;# 
   411   000F77                     SSPMSK          equ	3959	;# 
   412   000F78                     SLRCON          equ	3960	;# 
   413   000F79                     CM2CON1         equ	3961	;# 
   414   000F7A                     CM2CON0         equ	3962	;# 
   415   000F7B                     CM1CON0         equ	3963	;# 
   416   000F7C                     WPUB            equ	3964	;# 
   417   000F7D                     IOCB            equ	3965	;# 
   418   000F7E                     ANSEL           equ	3966	;# 
   419   000F7F                     ANSELH          equ	3967	;# 
   420   000F80                     PORTA           equ	3968	;# 
   421   000F81                     PORTB           equ	3969	;# 
   422   000F82                     PORTC           equ	3970	;# 
   423   000F83                     PORTD           equ	3971	;# 
   424   000F84                     PORTE           equ	3972	;# 
   425   000F89                     LATA            equ	3977	;# 
   426   000F8A                     LATB            equ	3978	;# 
   427   000F8B                     LATC            equ	3979	;# 
   428   000F8C                     LATD            equ	3980	;# 
   429   000F8D                     LATE            equ	3981	;# 
   430   000F92                     TRISA           equ	3986	;# 
   431   000F92                     DDRA            equ	3986	;# 
   432   000F93                     TRISB           equ	3987	;# 
   433   000F93                     DDRB            equ	3987	;# 
   434   000F94                     TRISC           equ	3988	;# 
   435   000F94                     DDRC            equ	3988	;# 
   436   000F95                     TRISD           equ	3989	;# 
   437   000F95                     DDRD            equ	3989	;# 
   438   000F96                     TRISE           equ	3990	;# 
   439   000F96                     DDRE            equ	3990	;# 
   440   000F9B                     OSCTUNE         equ	3995	;# 
   441   000F9D                     PIE1            equ	3997	;# 
   442   000F9E                     PIR1            equ	3998	;# 
   443   000F9F                     IPR1            equ	3999	;# 
   444   000FA0                     PIE2            equ	4000	;# 
   445   000FA1                     PIR2            equ	4001	;# 
   446   000FA2                     IPR2            equ	4002	;# 
   447   000FA6                     EECON1          equ	4006	;# 
   448   000FA7                     EECON2          equ	4007	;# 
   449   000FA8                     EEDATA          equ	4008	;# 
   450   000FA9                     EEADR           equ	4009	;# 
   451   000FAA                     EEADRH          equ	4010	;# 
   452   000FAB                     RCSTA           equ	4011	;# 
   453   000FAB                     RCSTA1          equ	4011	;# 
   454   000FAC                     TXSTA           equ	4012	;# 
   455   000FAC                     TXSTA1          equ	4012	;# 
   456   000FAD                     TXREG           equ	4013	;# 
   457   000FAD                     TXREG1          equ	4013	;# 
   458   000FAE                     RCREG           equ	4014	;# 
   459   000FAE                     RCREG1          equ	4014	;# 
   460   000FAF                     SPBRG           equ	4015	;# 
   461   000FAF                     SPBRG1          equ	4015	;# 
   462   000FB0                     SPBRGH          equ	4016	;# 
   463   000FB1                     T3CON           equ	4017	;# 
   464   000FB2                     TMR3            equ	4018	;# 
   465   000FB2                     TMR3L           equ	4018	;# 
   466   000FB3                     TMR3H           equ	4019	;# 
   467   000FB4                     CVRCON2         equ	4020	;# 
   468   000FB5                     CVRCON          equ	4021	;# 
   469   000FB6                     ECCP1AS         equ	4022	;# 
   470   000FB7                     PWM1CON         equ	4023	;# 
   471   000FB8                     BAUDCON         equ	4024	;# 
   472   000FB8                     BAUDCTL         equ	4024	;# 
   473   000FB9                     PSTRCON         equ	4025	;# 
   474   000FBA                     CCP2CON         equ	4026	;# 
   475   000FBB                     CCPR2           equ	4027	;# 
   476   000FBB                     CCPR2L          equ	4027	;# 
   477   000FBC                     CCPR2H          equ	4028	;# 
   478   000FBD                     CCP1CON         equ	4029	;# 
   479   000FBE                     CCPR1           equ	4030	;# 
   480   000FBE                     CCPR1L          equ	4030	;# 
   481   000FBF                     CCPR1H          equ	4031	;# 
   482   000FC0                     ADCON2          equ	4032	;# 
   483   000FC1                     ADCON1          equ	4033	;# 
   484   000FC2                     ADCON0          equ	4034	;# 
   485   000FC3                     ADRES           equ	4035	;# 
   486   000FC3                     ADRESL          equ	4035	;# 
   487   000FC4                     ADRESH          equ	4036	;# 
   488   000FC5                     SSPCON2         equ	4037	;# 
   489   000FC6                     SSPCON1         equ	4038	;# 
   490   000FC7                     SSPSTAT         equ	4039	;# 
   491   000FC8                     SSPADD          equ	4040	;# 
   492   000FC9                     SSPBUF          equ	4041	;# 
   493   000FCA                     T2CON           equ	4042	;# 
   494   000FCB                     PR2             equ	4043	;# 
   495   000FCB                     MEMCON          equ	4043	;# 
   496   000FCC                     TMR2            equ	4044	;# 
   497   000FCD                     T1CON           equ	4045	;# 
   498   000FCE                     TMR1            equ	4046	;# 
   499   000FCE                     TMR1L           equ	4046	;# 
   500   000FCF                     TMR1H           equ	4047	;# 
   501   000FD0                     RCON            equ	4048	;# 
   502   000FD1                     WDTCON          equ	4049	;# 
   503   000FD2                     HLVDCON         equ	4050	;# 
   504   000FD2                     LVDCON          equ	4050	;# 
   505   000FD3                     OSCCON          equ	4051	;# 
   506   000FD5                     T0CON           equ	4053	;# 
   507   000FD6                     TMR0            equ	4054	;# 
   508   000FD6                     TMR0L           equ	4054	;# 
   509   000FD7                     TMR0H           equ	4055	;# 
   510   000FD8                     STATUS          equ	4056	;# 
   511   000FD9                     FSR2            equ	4057	;# 
   512   000FD9                     FSR2L           equ	4057	;# 
   513   000FDA                     FSR2H           equ	4058	;# 
   514   000FDB                     PLUSW2          equ	4059	;# 
   515   000FDC                     PREINC2         equ	4060	;# 
   516   000FDD                     POSTDEC2        equ	4061	;# 
   517   000FDE                     POSTINC2        equ	4062	;# 
   518   000FDF                     INDF2           equ	4063	;# 
   519   000FE0                     BSR             equ	4064	;# 
   520   000FE1                     FSR1            equ	4065	;# 
   521   000FE1                     FSR1L           equ	4065	;# 
   522   000FE2                     FSR1H           equ	4066	;# 
   523   000FE3                     PLUSW1          equ	4067	;# 
   524   000FE4                     PREINC1         equ	4068	;# 
   525   000FE5                     POSTDEC1        equ	4069	;# 
   526   000FE6                     POSTINC1        equ	4070	;# 
   527   000FE7                     INDF1           equ	4071	;# 
   528   000FE8                     WREG            equ	4072	;# 
   529   000FE9                     FSR0            equ	4073	;# 
   530   000FE9                     FSR0L           equ	4073	;# 
   531   000FEA                     FSR0H           equ	4074	;# 
   532   000FEB                     PLUSW0          equ	4075	;# 
   533   000FEC                     PREINC0         equ	4076	;# 
   534   000FED                     POSTDEC0        equ	4077	;# 
   535   000FEE                     POSTINC0        equ	4078	;# 
   536   000FEF                     INDF0           equ	4079	;# 
   537   000FF0                     INTCON3         equ	4080	;# 
   538   000FF1                     INTCON2         equ	4081	;# 
   539   000FF2                     INTCON          equ	4082	;# 
   540   000FF3                     PROD            equ	4083	;# 
   541   000FF3                     PRODL           equ	4083	;# 
   542   000FF4                     PRODH           equ	4084	;# 
   543   000FF5                     TABLAT          equ	4085	;# 
   544   000FF6                     TBLPTR          equ	4086	;# 
   545   000FF6                     TBLPTRL         equ	4086	;# 
   546   000FF7                     TBLPTRH         equ	4087	;# 
   547   000FF8                     TBLPTRU         equ	4088	;# 
   548   000FF9                     PCLAT           equ	4089	;# 
   549   000FF9                     PC              equ	4089	;# 
   550   000FF9                     PCL             equ	4089	;# 
   551   000FFA                     PCLATH          equ	4090	;# 
   552   000FFB                     PCLATU          equ	4091	;# 
   553   000FFC                     STKPTR          equ	4092	;# 
   554   000FFD                     TOS             equ	4093	;# 
   555   000FFD                     TOSL            equ	4093	;# 
   556   000FFE                     TOSH            equ	4094	;# 
   557   000FFF                     TOSU            equ	4095	;# 
   558   000F77                     SSPMSK          equ	3959	;# 
   559   000F78                     SLRCON          equ	3960	;# 
   560   000F79                     CM2CON1         equ	3961	;# 
   561   000F7A                     CM2CON0         equ	3962	;# 
   562   000F7B                     CM1CON0         equ	3963	;# 
   563   000F7C                     WPUB            equ	3964	;# 
   564   000F7D                     IOCB            equ	3965	;# 
   565   000F7E                     ANSEL           equ	3966	;# 
   566   000F7F                     ANSELH          equ	3967	;# 
   567   000F80                     PORTA           equ	3968	;# 
   568   000F81                     PORTB           equ	3969	;# 
   569   000F82                     PORTC           equ	3970	;# 
   570   000F83                     PORTD           equ	3971	;# 
   571   000F84                     PORTE           equ	3972	;# 
   572   000F89                     LATA            equ	3977	;# 
   573   000F8A                     LATB            equ	3978	;# 
   574   000F8B                     LATC            equ	3979	;# 
   575   000F8C                     LATD            equ	3980	;# 
   576   000F8D                     LATE            equ	3981	;# 
   577   000F92                     TRISA           equ	3986	;# 
   578   000F92                     DDRA            equ	3986	;# 
   579   000F93                     TRISB           equ	3987	;# 
   580   000F93                     DDRB            equ	3987	;# 
   581   000F94                     TRISC           equ	3988	;# 
   582   000F94                     DDRC            equ	3988	;# 
   583   000F95                     TRISD           equ	3989	;# 
   584   000F95                     DDRD            equ	3989	;# 
   585   000F96                     TRISE           equ	3990	;# 
   586   000F96                     DDRE            equ	3990	;# 
   587   000F9B                     OSCTUNE         equ	3995	;# 
   588   000F9D                     PIE1            equ	3997	;# 
   589   000F9E                     PIR1            equ	3998	;# 
   590   000F9F                     IPR1            equ	3999	;# 
   591   000FA0                     PIE2            equ	4000	;# 
   592   000FA1                     PIR2            equ	4001	;# 
   593   000FA2                     IPR2            equ	4002	;# 
   594   000FA6                     EECON1          equ	4006	;# 
   595   000FA7                     EECON2          equ	4007	;# 
   596   000FA8                     EEDATA          equ	4008	;# 
   597   000FA9                     EEADR           equ	4009	;# 
   598   000FAA                     EEADRH          equ	4010	;# 
   599   000FAB                     RCSTA           equ	4011	;# 
   600   000FAB                     RCSTA1          equ	4011	;# 
   601   000FAC                     TXSTA           equ	4012	;# 
   602   000FAC                     TXSTA1          equ	4012	;# 
   603   000FAD                     TXREG           equ	4013	;# 
   604   000FAD                     TXREG1          equ	4013	;# 
   605   000FAE                     RCREG           equ	4014	;# 
   606   000FAE                     RCREG1          equ	4014	;# 
   607   000FAF                     SPBRG           equ	4015	;# 
   608   000FAF                     SPBRG1          equ	4015	;# 
   609   000FB0                     SPBRGH          equ	4016	;# 
   610   000FB1                     T3CON           equ	4017	;# 
   611   000FB2                     TMR3            equ	4018	;# 
   612   000FB2                     TMR3L           equ	4018	;# 
   613   000FB3                     TMR3H           equ	4019	;# 
   614   000FB4                     CVRCON2         equ	4020	;# 
   615   000FB5                     CVRCON          equ	4021	;# 
   616   000FB6                     ECCP1AS         equ	4022	;# 
   617   000FB7                     PWM1CON         equ	4023	;# 
   618   000FB8                     BAUDCON         equ	4024	;# 
   619   000FB8                     BAUDCTL         equ	4024	;# 
   620   000FB9                     PSTRCON         equ	4025	;# 
   621   000FBA                     CCP2CON         equ	4026	;# 
   622   000FBB                     CCPR2           equ	4027	;# 
   623   000FBB                     CCPR2L          equ	4027	;# 
   624   000FBC                     CCPR2H          equ	4028	;# 
   625   000FBD                     CCP1CON         equ	4029	;# 
   626   000FBE                     CCPR1           equ	4030	;# 
   627   000FBE                     CCPR1L          equ	4030	;# 
   628   000FBF                     CCPR1H          equ	4031	;# 
   629   000FC0                     ADCON2          equ	4032	;# 
   630   000FC1                     ADCON1          equ	4033	;# 
   631   000FC2                     ADCON0          equ	4034	;# 
   632   000FC3                     ADRES           equ	4035	;# 
   633   000FC3                     ADRESL          equ	4035	;# 
   634   000FC4                     ADRESH          equ	4036	;# 
   635   000FC5                     SSPCON2         equ	4037	;# 
   636   000FC6                     SSPCON1         equ	4038	;# 
   637   000FC7                     SSPSTAT         equ	4039	;# 
   638   000FC8                     SSPADD          equ	4040	;# 
   639   000FC9                     SSPBUF          equ	4041	;# 
   640   000FCA                     T2CON           equ	4042	;# 
   641   000FCB                     PR2             equ	4043	;# 
   642   000FCB                     MEMCON          equ	4043	;# 
   643   000FCC                     TMR2            equ	4044	;# 
   644   000FCD                     T1CON           equ	4045	;# 
   645   000FCE                     TMR1            equ	4046	;# 
   646   000FCE                     TMR1L           equ	4046	;# 
   647   000FCF                     TMR1H           equ	4047	;# 
   648   000FD0                     RCON            equ	4048	;# 
   649   000FD1                     WDTCON          equ	4049	;# 
   650   000FD2                     HLVDCON         equ	4050	;# 
   651   000FD2                     LVDCON          equ	4050	;# 
   652   000FD3                     OSCCON          equ	4051	;# 
   653   000FD5                     T0CON           equ	4053	;# 
   654   000FD6                     TMR0            equ	4054	;# 
   655   000FD6                     TMR0L           equ	4054	;# 
   656   000FD7                     TMR0H           equ	4055	;# 
   657   000FD8                     STATUS          equ	4056	;# 
   658   000FD9                     FSR2            equ	4057	;# 
   659   000FD9                     FSR2L           equ	4057	;# 
   660   000FDA                     FSR2H           equ	4058	;# 
   661   000FDB                     PLUSW2          equ	4059	;# 
   662   000FDC                     PREINC2         equ	4060	;# 
   663   000FDD                     POSTDEC2        equ	4061	;# 
   664   000FDE                     POSTINC2        equ	4062	;# 
   665   000FDF                     INDF2           equ	4063	;# 
   666   000FE0                     BSR             equ	4064	;# 
   667   000FE1                     FSR1            equ	4065	;# 
   668   000FE1                     FSR1L           equ	4065	;# 
   669   000FE2                     FSR1H           equ	4066	;# 
   670   000FE3                     PLUSW1          equ	4067	;# 
   671   000FE4                     PREINC1         equ	4068	;# 
   672   000FE5                     POSTDEC1        equ	4069	;# 
   673   000FE6                     POSTINC1        equ	4070	;# 
   674   000FE7                     INDF1           equ	4071	;# 
   675   000FE8                     WREG            equ	4072	;# 
   676   000FE9                     FSR0            equ	4073	;# 
   677   000FE9                     FSR0L           equ	4073	;# 
   678   000FEA                     FSR0H           equ	4074	;# 
   679   000FEB                     PLUSW0          equ	4075	;# 
   680   000FEC                     PREINC0         equ	4076	;# 
   681   000FED                     POSTDEC0        equ	4077	;# 
   682   000FEE                     POSTINC0        equ	4078	;# 
   683   000FEF                     INDF0           equ	4079	;# 
   684   000FF0                     INTCON3         equ	4080	;# 
   685   000FF1                     INTCON2         equ	4081	;# 
   686   000FF2                     INTCON          equ	4082	;# 
   687   000FF3                     PROD            equ	4083	;# 
   688   000FF3                     PRODL           equ	4083	;# 
   689   000FF4                     PRODH           equ	4084	;# 
   690   000FF5                     TABLAT          equ	4085	;# 
   691   000FF6                     TBLPTR          equ	4086	;# 
   692   000FF6                     TBLPTRL         equ	4086	;# 
   693   000FF7                     TBLPTRH         equ	4087	;# 
   694   000FF8                     TBLPTRU         equ	4088	;# 
   695   000FF9                     PCLAT           equ	4089	;# 
   696   000FF9                     PC              equ	4089	;# 
   697   000FF9                     PCL             equ	4089	;# 
   698   000FFA                     PCLATH          equ	4090	;# 
   699   000FFB                     PCLATU          equ	4091	;# 
   700   000FFC                     STKPTR          equ	4092	;# 
   701   000FFD                     TOS             equ	4093	;# 
   702   000FFD                     TOSL            equ	4093	;# 
   703   000FFE                     TOSH            equ	4094	;# 
   704   000FFF                     TOSU            equ	4095	;# 
   705   000F77                     SSPMSK          equ	3959	;# 
   706   000F78                     SLRCON          equ	3960	;# 
   707   000F79                     CM2CON1         equ	3961	;# 
   708   000F7A                     CM2CON0         equ	3962	;# 
   709   000F7B                     CM1CON0         equ	3963	;# 
   710   000F7C                     WPUB            equ	3964	;# 
   711   000F7D                     IOCB            equ	3965	;# 
   712   000F7E                     ANSEL           equ	3966	;# 
   713   000F7F                     ANSELH          equ	3967	;# 
   714   000F80                     PORTA           equ	3968	;# 
   715   000F81                     PORTB           equ	3969	;# 
   716   000F82                     PORTC           equ	3970	;# 
   717   000F83                     PORTD           equ	3971	;# 
   718   000F84                     PORTE           equ	3972	;# 
   719   000F89                     LATA            equ	3977	;# 
   720   000F8A                     LATB            equ	3978	;# 
   721   000F8B                     LATC            equ	3979	;# 
   722   000F8C                     LATD            equ	3980	;# 
   723   000F8D                     LATE            equ	3981	;# 
   724   000F92                     TRISA           equ	3986	;# 
   725   000F92                     DDRA            equ	3986	;# 
   726   000F93                     TRISB           equ	3987	;# 
   727   000F93                     DDRB            equ	3987	;# 
   728   000F94                     TRISC           equ	3988	;# 
   729   000F94                     DDRC            equ	3988	;# 
   730   000F95                     TRISD           equ	3989	;# 
   731   000F95                     DDRD            equ	3989	;# 
   732   000F96                     TRISE           equ	3990	;# 
   733   000F96                     DDRE            equ	3990	;# 
   734   000F9B                     OSCTUNE         equ	3995	;# 
   735   000F9D                     PIE1            equ	3997	;# 
   736   000F9E                     PIR1            equ	3998	;# 
   737   000F9F                     IPR1            equ	3999	;# 
   738   000FA0                     PIE2            equ	4000	;# 
   739   000FA1                     PIR2            equ	4001	;# 
   740   000FA2                     IPR2            equ	4002	;# 
   741   000FA6                     EECON1          equ	4006	;# 
   742   000FA7                     EECON2          equ	4007	;# 
   743   000FA8                     EEDATA          equ	4008	;# 
   744   000FA9                     EEADR           equ	4009	;# 
   745   000FAA                     EEADRH          equ	4010	;# 
   746   000FAB                     RCSTA           equ	4011	;# 
   747   000FAB                     RCSTA1          equ	4011	;# 
   748   000FAC                     TXSTA           equ	4012	;# 
   749   000FAC                     TXSTA1          equ	4012	;# 
   750   000FAD                     TXREG           equ	4013	;# 
   751   000FAD                     TXREG1          equ	4013	;# 
   752   000FAE                     RCREG           equ	4014	;# 
   753   000FAE                     RCREG1          equ	4014	;# 
   754   000FAF                     SPBRG           equ	4015	;# 
   755   000FAF                     SPBRG1          equ	4015	;# 
   756   000FB0                     SPBRGH          equ	4016	;# 
   757   000FB1                     T3CON           equ	4017	;# 
   758   000FB2                     TMR3            equ	4018	;# 
   759   000FB2                     TMR3L           equ	4018	;# 
   760   000FB3                     TMR3H           equ	4019	;# 
   761   000FB4                     CVRCON2         equ	4020	;# 
   762   000FB5                     CVRCON          equ	4021	;# 
   763   000FB6                     ECCP1AS         equ	4022	;# 
   764   000FB7                     PWM1CON         equ	4023	;# 
   765   000FB8                     BAUDCON         equ	4024	;# 
   766   000FB8                     BAUDCTL         equ	4024	;# 
   767   000FB9                     PSTRCON         equ	4025	;# 
   768   000FBA                     CCP2CON         equ	4026	;# 
   769   000FBB                     CCPR2           equ	4027	;# 
   770   000FBB                     CCPR2L          equ	4027	;# 
   771   000FBC                     CCPR2H          equ	4028	;# 
   772   000FBD                     CCP1CON         equ	4029	;# 
   773   000FBE                     CCPR1           equ	4030	;# 
   774   000FBE                     CCPR1L          equ	4030	;# 
   775   000FBF                     CCPR1H          equ	4031	;# 
   776   000FC0                     ADCON2          equ	4032	;# 
   777   000FC1                     ADCON1          equ	4033	;# 
   778   000FC2                     ADCON0          equ	4034	;# 
   779   000FC3                     ADRES           equ	4035	;# 
   780   000FC3                     ADRESL          equ	4035	;# 
   781   000FC4                     ADRESH          equ	4036	;# 
   782   000FC5                     SSPCON2         equ	4037	;# 
   783   000FC6                     SSPCON1         equ	4038	;# 
   784   000FC7                     SSPSTAT         equ	4039	;# 
   785   000FC8                     SSPADD          equ	4040	;# 
   786   000FC9                     SSPBUF          equ	4041	;# 
   787   000FCA                     T2CON           equ	4042	;# 
   788   000FCB                     PR2             equ	4043	;# 
   789   000FCB                     MEMCON          equ	4043	;# 
   790   000FCC                     TMR2            equ	4044	;# 
   791   000FCD                     T1CON           equ	4045	;# 
   792   000FCE                     TMR1            equ	4046	;# 
   793   000FCE                     TMR1L           equ	4046	;# 
   794   000FCF                     TMR1H           equ	4047	;# 
   795   000FD0                     RCON            equ	4048	;# 
   796   000FD1                     WDTCON          equ	4049	;# 
   797   000FD2                     HLVDCON         equ	4050	;# 
   798   000FD2                     LVDCON          equ	4050	;# 
   799   000FD3                     OSCCON          equ	4051	;# 
   800   000FD5                     T0CON           equ	4053	;# 
   801   000FD6                     TMR0            equ	4054	;# 
   802   000FD6                     TMR0L           equ	4054	;# 
   803   000FD7                     TMR0H           equ	4055	;# 
   804   000FD8                     STATUS          equ	4056	;# 
   805   000FD9                     FSR2            equ	4057	;# 
   806   000FD9                     FSR2L           equ	4057	;# 
   807   000FDA                     FSR2H           equ	4058	;# 
   808   000FDB                     PLUSW2          equ	4059	;# 
   809   000FDC                     PREINC2         equ	4060	;# 
   810   000FDD                     POSTDEC2        equ	4061	;# 
   811   000FDE                     POSTINC2        equ	4062	;# 
   812   000FDF                     INDF2           equ	4063	;# 
   813   000FE0                     BSR             equ	4064	;# 
   814   000FE1                     FSR1            equ	4065	;# 
   815   000FE1                     FSR1L           equ	4065	;# 
   816   000FE2                     FSR1H           equ	4066	;# 
   817   000FE3                     PLUSW1          equ	4067	;# 
   818   000FE4                     PREINC1         equ	4068	;# 
   819   000FE5                     POSTDEC1        equ	4069	;# 
   820   000FE6                     POSTINC1        equ	4070	;# 
   821   000FE7                     INDF1           equ	4071	;# 
   822   000FE8                     WREG            equ	4072	;# 
   823   000FE9                     FSR0            equ	4073	;# 
   824   000FE9                     FSR0L           equ	4073	;# 
   825   000FEA                     FSR0H           equ	4074	;# 
   826   000FEB                     PLUSW0          equ	4075	;# 
   827   000FEC                     PREINC0         equ	4076	;# 
   828   000FED                     POSTDEC0        equ	4077	;# 
   829   000FEE                     POSTINC0        equ	4078	;# 
   830   000FEF                     INDF0           equ	4079	;# 
   831   000FF0                     INTCON3         equ	4080	;# 
   832   000FF1                     INTCON2         equ	4081	;# 
   833   000FF2                     INTCON          equ	4082	;# 
   834   000FF3                     PROD            equ	4083	;# 
   835   000FF3                     PRODL           equ	4083	;# 
   836   000FF4                     PRODH           equ	4084	;# 
   837   000FF5                     TABLAT          equ	4085	;# 
   838   000FF6                     TBLPTR          equ	4086	;# 
   839   000FF6                     TBLPTRL         equ	4086	;# 
   840   000FF7                     TBLPTRH         equ	4087	;# 
   841   000FF8                     TBLPTRU         equ	4088	;# 
   842   000FF9                     PCLAT           equ	4089	;# 
   843   000FF9                     PC              equ	4089	;# 
   844   000FF9                     PCL             equ	4089	;# 
   845   000FFA                     PCLATH          equ	4090	;# 
   846   000FFB                     PCLATU          equ	4091	;# 
   847   000FFC                     STKPTR          equ	4092	;# 
   848   000FFD                     TOS             equ	4093	;# 
   849   000FFD                     TOSL            equ	4093	;# 
   850   000FFE                     TOSH            equ	4094	;# 
   851   000FFF                     TOSU            equ	4095	;# 
   852                           
   853                           	psect	smallconst
   854   001000                     __psmallconst:
   855                           	callstack 0
   856   001000  00                 	db	0
   857   001001                     _default_security_key:
   858                           	callstack 0
   859   001001  00                 	db	0
   860   001002  10                 	db	16
   861   001003  25                 	db	37
   862   001004  37                 	db	55
   863   001005  04                 	db	4
   864   001006  55                 	db	85
   865   001007  06                 	db	6
   866   001008  79                 	db	121
   867   001009  08                 	db	8
   868   00100A  09                 	db	9
   869   00100B  10                 	db	16
   870   00100C  11                 	db	17
   871   00100D  12                 	db	18
   872   00100E  13                 	db	19
   873   00100F  14                 	db	20
   874   001010  15                 	db	21
   875   001011                     __end_of_default_security_key:
   876                           	callstack 0
   877   001011                     _default_mac_address:
   878                           	callstack 0
   879   001011  11                 	db	17
   880   001012  28                 	db	40
   881   001013  35                 	db	53
   882   001014  44                 	db	68
   883   001015  56                 	db	86
   884   001016  66                 	db	102
   885   001017  77                 	db	119
   886   001018  01                 	db	1
   887   001019                     __end_of_default_mac_address:
   888                           	callstack 0
   889   007CED                     _RCIE           set	31981
   890   007CEE                     _ADIE           set	31982
   891   007D03                     _BCLIE          set	32003
   892   007CEB                     _SSPIE          set	31979
   893   007D04                     _EEIE           set	32004
   894   007D00                     _CCP2IE         set	32000
   895   007CEA                     _CCP1IE         set	31978
   896   007CE9                     _TMR2IE         set	31977
   897   007CE8                     _TMR1IE         set	31976
   898   007F95                     _T0IE           set	32661
   899   007F93                     _RBIE           set	32659
   900   007F96                     _PEIE           set	32662
   901   007F97                     _GIE            set	32663
   902   000F8A                     _LATBbits       set	3978
   903   000F8C                     _LATDbits       set	3980
   904   000F8B                     _LATCbits       set	3979
   905   000F95                     _TRISDbits      set	3989
   906   000F9B                     _OSCTUNE        set	3995
   907   000FD3                     _OSCCON         set	4051
   908   000F96                     _TRISEbits      set	3990
   909   000F93                     _TRISBbits      set	3987
   910   000F84                     _PORTE          set	3972
   911   000F83                     _PORTD          set	3971
   912   000F82                     _PORTC          set	3970
   913   000F81                     _PORTB          set	3969
   914   000F80                     _PORTA          set	3968
   915   000F8D                     _LATEbits       set	3981
   916   000FC9                     _SSPBUF         set	4041
   917   000F9E                     _PIR1bits       set	3998
   918   000FC6                     _SSPCON1bits    set	4038
   919   000FC6                     _SSPCON1        set	4038
   920   000FC7                     _SSPSTATbits    set	4039
   921   000F94                     _TRISCbits      set	3988
   922   001019                     STR_1:
   923   001019  48                 	db	72	;'H'
   924   00101A  6F                 	db	111	;'o'
   925   00101B  6C                 	db	108	;'l'
   926   00101C  61                 	db	97	;'a'
   927   00101D  20                 	db	32
   928   00101E  6D                 	db	109	;'m'
   929   00101F  75                 	db	117	;'u'
   930   001020  6E                 	db	110	;'n'
   931   001021  64                 	db	100	;'d'
   932   001022  6F                 	db	111	;'o'
   933   001023  2E                 	db	46
   934   001024  00                 	db	0
   935   001025  00                 	db	0	; dummy byte at the end
   936   000001                     __activetblptr  equ	1
   937                           
   938                           ; #config settings
   939                           
   940                           	psect	cinit
   941   00153E                     __pcinit:
   942                           	callstack 0
   943   00153E                     start_initialization:
   944                           	callstack 0
   945   00153E                     __initialization:
   946                           	callstack 0
   947                           
   948                           ; Clear objects allocated to BANK0 (56 bytes)
   949   00153E  EE00  F060         	lfsr	0,__pbssBANK0
   950   001542  0E38               	movlw	56
   951   001544                     clear_0:
   952   001544  6AEE               	clrf	postinc0,c
   953   001546  06E8               	decf	wreg,f,c
   954   001548  E1FD               	bnz	clear_0
   955                           
   956                           ; Clear objects allocated to COMRAM (41 bytes)
   957   00154A  EE00  F001         	lfsr	0,__pbssCOMRAM
   958   00154E  0E29               	movlw	41
   959   001550                     clear_1:
   960   001550  6AEE               	clrf	postinc0,c
   961   001552  06E8               	decf	wreg,f,c
   962   001554  E1FD               	bnz	clear_1
   963   001556                     end_of_initialization:
   964                           	callstack 0
   965   001556                     __end_of__initialization:
   966                           	callstack 0
   967   001556  0E00               	movlw	low (__Lsmallconst shr (0+16))
   968   001558  6EF8               	movwf	tblptru,c
   969   00155A  0E10               	movlw	high __Lsmallconst
   970   00155C  6EF7               	movwf	tblptrh,c
   971   00155E  0100               	movlb	0
   972   001560  EF99  F009         	goto	_main	;jump to C main() function
   973                           
   974                           	psect	bssCOMRAM
   975   000001                     __pbssCOMRAM:
   976                           	callstack 0
   977   000001                     _mrf24_data_config:
   978                           	callstack 0
   979   000001                     	ds	34
   980   000023                     _mrf24_data_out:
   981                           	callstack 0
   982   000023                     	ds	6
   983   000029                     _long_mac_address:
   984                           	callstack 0
   985   000029                     	ds	1
   986                           
   987                           	psect	bssBANK0
   988   000060                     __pbssBANK0:
   989                           	callstack 0
   990   000060                     _mrf24_data_in:
   991                           	callstack 0
   992   000060                     	ds	56
   993                           
   994                           	psect	cstackCOMRAM
   995   00002A                     __pcstackCOMRAM:
   996                           	callstack 0
   997   00002A                     ?_strlen:
   998                           	callstack 0
   999   00002A                     SPIWriteByte@dato:
  1000                           	callstack 0
  1001   00002A                     SetCSPin@estado:
  1002                           	callstack 0
  1003   00002A                     SetWakePin@estado:
  1004                           	callstack 0
  1005   00002A                     SetResetPin@estado:
  1006                           	callstack 0
  1007   00002A                     strlen@s:
  1008                           	callstack 0
  1009   00002A                     SetDireccionDestino@direccion:
  1010                           	callstack 0
  1011   00002A                     SetPANIDDestino@panid:
  1012                           	callstack 0
  1013   00002A                     ??_InicializoVariables:
  1014   00002A                     
  1015                           ; 1 bytes @ 0x0
  1016   00002A                     	ds	1
  1017   00002B                     WriteByteSPIPort@dato:
  1018                           	callstack 0
  1019   00002B                     SPIWrite2Byte@dato:
  1020                           	callstack 0
  1021   00002B                     InicializoVariables@i:
  1022                           	callstack 0
  1023   00002B                     
  1024                           ; 1 bytes @ 0x1
  1025   00002B                     	ds	1
  1026   00002C                     SetShortAddr@value:
  1027                           	callstack 0
  1028   00002C                     GetShortAddr@leido_spi:
  1029                           	callstack 0
  1030   00002C                     strlen@a:
  1031                           	callstack 0
  1032   00002C                     
  1033                           ; 1 bytes @ 0x2
  1034   00002C                     	ds	1
  1035   00002D                     SetShortAddr@reg_address:
  1036                           	callstack 0
  1037   00002D                     GetShortAddr@reg_address:
  1038                           	callstack 0
  1039   00002D                     SetMensajeSalida@mensaje:
  1040                           	callstack 0
  1041   00002D                     Write2ByteSPIPort@dato:
  1042                           	callstack 0
  1043   00002D                     
  1044                           ; 1 bytes @ 0x3
  1045   00002D                     	ds	1
  1046   00002E                     SetDeviceMACAddress@i:
  1047                           	callstack 0
  1048   00002E                     
  1049                           ; 1 bytes @ 0x4
  1050   00002E                     	ds	1
  1051   00002F                     SetLongAddr@reg_address:
  1052                           	callstack 0
  1053   00002F                     GetLongAddr@reg_address:
  1054                           	callstack 0
  1055   00002F                     
  1056                           ; 1 bytes @ 0x5
  1057   00002F                     	ds	2
  1058   000031                     SetLongAddr@value:
  1059                           	callstack 0
  1060   000031                     ??_GetLongAddr:
  1061                           
  1062                           ; 1 bytes @ 0x7
  1063   000031                     	ds	1
  1064   000032                     ??_SetLongAddr:
  1065                           
  1066                           ; 1 bytes @ 0x8
  1067   000032                     	ds	1
  1068   000033                     GetLongAddr@respuesta:
  1069                           	callstack 0
  1070                           
  1071                           ; 1 bytes @ 0x9
  1072   000033                     	ds	1
  1073   000034                     ??_EnviarDato:
  1074   000034                     ??_SetChannel:
  1075                           
  1076                           ; 1 bytes @ 0xA
  1077   000034                     	ds	1
  1078   000035                     ??_MRF24J40Init:
  1079                           
  1080                           ; 1 bytes @ 0xB
  1081   000035                     	ds	1
  1082   000036                     MRF24J40Init@lectura:
  1083                           	callstack 0
  1084                           
  1085                           ; 1 bytes @ 0xC
  1086   000036                     	ds	3
  1087   000039                     EnviarDato@i:
  1088                           	callstack 0
  1089                           
  1090                           ; 1 bytes @ 0xF
  1091   000039                     	ds	1
  1092   00003A                     EnviarDato@pos_memoria:
  1093                           	callstack 0
  1094                           
  1095                           ; 1 bytes @ 0x10
  1096   00003A                     	ds	1
  1097   00003B                     ??_main:
  1098                           
  1099                           ; 1 bytes @ 0x11
  1100   00003B                     	ds	2
  1101                           
  1102 ;;
  1103 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1104 ;;
  1105 ;; *************** function _main *****************
  1106 ;; Defined at:
  1107 ;;		line 23 in file "main.c"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;		None
  1110 ;; Auto vars:     Size  Location     Type
  1111 ;;		None
  1112 ;; Return value:  Size  Location     Type
  1113 ;;                  1    wreg      void 
  1114 ;; Registers used:
  1115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1116 ;; Tracked objects:
  1117 ;;		On entry : 0/0
  1118 ;;		On exit  : 0/0
  1119 ;;		Unchanged: 0/0
  1120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1123 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1124 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1125 ;;Total ram usage:        2 bytes
  1126 ;; Hardware stack levels required when called: 6
  1127 ;; This function calls:
  1128 ;;		_BoardInit
  1129 ;;		_EnviarDato
  1130 ;;		_MRF24J40Init
  1131 ;;		_SetDireccionDestino
  1132 ;;		_SetMensajeSalida
  1133 ;;		_SetPANIDDestino
  1134 ;; This function is called by:
  1135 ;;		Startup code after reset
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139                           	psect	text0
  1140   001332                     __ptext0:
  1141                           	callstack 0
  1142   001332                     _main:
  1143                           	callstack 25
  1144   001332                     
  1145                           ;main.c: 25:     BoardInit();
  1146   001332  ECF2  F009         	call	_BoardInit	;wreg free
  1147   001336                     
  1148                           ;main.c: 26:     MRF24J40Init();
  1149   001336  EC13  F008         	call	_MRF24J40Init	;wreg free
  1150   00133A                     
  1151                           ;main.c: 27:     SetMensajeSalida("Hola mundo.");
  1152   00133A  0E19               	movlw	low STR_1
  1153   00133C  6E2D               	movwf	SetMensajeSalida@mensaje^0,c
  1154   00133E  EC06  F00B         	call	_SetMensajeSalida	;wreg free
  1155   001342                     
  1156                           ;main.c: 28:     SetDireccionDestino(0x1111);
  1157   001342  0E11               	movlw	17
  1158   001344  6E2B               	movwf	(SetDireccionDestino@direccion+1)^0,c
  1159   001346  0E11               	movlw	17
  1160   001348  6E2A               	movwf	SetDireccionDestino@direccion^0,c
  1161   00134A  EC37  F00B         	call	_SetDireccionDestino	;wreg free
  1162   00134E                     
  1163                           ;main.c: 29:     SetPANIDDestino(0X1234);
  1164   00134E  0E12               	movlw	18
  1165   001350  6E2B               	movwf	(SetPANIDDestino@panid+1)^0,c
  1166   001352  0E34               	movlw	52
  1167   001354  6E2A               	movwf	SetPANIDDestino@panid^0,c
  1168   001356  EC32  F00B         	call	_SetPANIDDestino	;wreg free
  1169   00135A                     l51:
  1170   00135A  0004               	clrwdt		;# 
  1171   00135C                     
  1172                           ;main.c: 34:         LATEbits.LATE0 = !LATEbits.LATE0;
  1173   00135C  A08D               	btfss	141,0,c	;volatile
  1174   00135E  EFB3  F009         	goto	u341
  1175   001362  EFB7  F009         	goto	u340
  1176   001366                     u341:
  1177   001366  6A3B               	clrf	??_main^0,c
  1178   001368  2A3B               	incf	??_main^0,f,c
  1179   00136A  EFB8  F009         	goto	u358
  1180   00136E                     u340:
  1181   00136E  6A3B               	clrf	??_main^0,c
  1182   001370                     u358:
  1183   001370  508D               	movf	141,w,c	;volatile
  1184   001372  183B               	xorwf	??_main^0,w,c
  1185   001374  0BFE               	andlw	-2
  1186   001376  183B               	xorwf	??_main^0,w,c
  1187   001378  6E8D               	movwf	141,c	;volatile
  1188   00137A                     
  1189                           ;main.c: 35:         _delay((unsigned long)((1500)*(16000000/4000.0)));;
  1190   00137A  0E1F               	movlw	31
  1191   00137C  6E3C               	movwf	(??_main+1)^0,c
  1192   00137E  0E71               	movlw	113
  1193   001380  6E3B               	movwf	??_main^0,c
  1194   001382  0E1E               	movlw	30
  1195   001384                     u407:
  1196   001384  2EE8               	decfsz	wreg,f,c
  1197   001386  D7FE               	bra	u407
  1198   001388  2E3B               	decfsz	??_main^0,f,c
  1199   00138A  D7FC               	bra	u407
  1200   00138C  2E3C               	decfsz	(??_main+1)^0,f,c
  1201   00138E  D7FA               	bra	u407
  1202   001390  F000 F000          	nop2	
  1203   001394                     
  1204                           ;main.c: 36:         EnviarDato();
  1205   001394  ECC8  F008         	call	_EnviarDato	;wreg free
  1206   001398  EFAD  F009         	goto	l51
  1207   00139C  EF00  F000         	goto	start
  1208   0013A0                     __end_of_main:
  1209                           	callstack 0
  1210                           
  1211 ;; *************** function _SetPANIDDestino *****************
  1212 ;; Defined at:
  1213 ;;		line 701 in file "drivers/scr/API_MRF24J40.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;  panid           2    0[COMRAM] unsigned short 
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		None
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1227 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1230 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1231 ;;Total ram usage:        2 bytes
  1232 ;; Hardware stack levels used: 1
  1233 ;; This function calls:
  1234 ;;		Nothing
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           	psect	text1
  1241   001664                     __ptext1:
  1242                           	callstack 0
  1243   001664                     _SetPANIDDestino:
  1244                           	callstack 30
  1245   001664                     
  1246                           ;drivers/scr/API_MRF24J40.c: 703:     mrf24_data_out.destinity_panid = panid;
  1247   001664  C02A  F023         	movff	SetPANIDDestino@panid,_mrf24_data_out
  1248   001668  C02B  F024         	movff	SetPANIDDestino@panid+1,_mrf24_data_out+1
  1249   00166C  0012               	return		;funcret
  1250   00166E                     __end_of_SetPANIDDestino:
  1251                           	callstack 0
  1252                           
  1253 ;; *************** function _SetMensajeSalida *****************
  1254 ;; Defined at:
  1255 ;;		line 678 in file "drivers/scr/API_MRF24J40.c"
  1256 ;; Parameters:    Size  Location     Type
  1257 ;;  mensaje         1    3[COMRAM] PTR const unsigned char 
  1258 ;;		 -> STR_1(12), 
  1259 ;; Auto vars:     Size  Location     Type
  1260 ;;		None
  1261 ;; Return value:  Size  Location     Type
  1262 ;;                  1    wreg      void 
  1263 ;; Registers used:
  1264 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1265 ;; Tracked objects:
  1266 ;;		On entry : 0/0
  1267 ;;		On exit  : 0/0
  1268 ;;		Unchanged: 0/0
  1269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1270 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1273 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1274 ;;Total ram usage:        1 bytes
  1275 ;; Hardware stack levels used: 1
  1276 ;; Hardware stack levels required when called: 1
  1277 ;; This function calls:
  1278 ;;		_strlen
  1279 ;; This function is called by:
  1280 ;;		_main
  1281 ;; This function uses a non-reentrant model
  1282 ;;
  1283                           
  1284                           	psect	text2
  1285   00160C                     __ptext2:
  1286                           	callstack 0
  1287   00160C                     _SetMensajeSalida:
  1288                           	callstack 29
  1289   00160C                     
  1290                           ;drivers/scr/API_MRF24J40.c: 680:     mrf24_data_out.buffer_salida = mensaje;
  1291   00160C  C02D  F028         	movff	SetMensajeSalida@mensaje,_mrf24_data_out+5
  1292   001610                     
  1293                           ;drivers/scr/API_MRF24J40.c: 681:     mrf24_data_out.largo_mensaje = (uint8_t) strlen(me
      +                          nsaje);
  1294   001610  C02D  F02A         	movff	SetMensajeSalida@mensaje,strlen@s
  1295   001614  EC72  F00A         	call	_strlen	;wreg free
  1296   001618  502A               	movf	?_strlen^0,w,c
  1297   00161A  6E27               	movwf	(_mrf24_data_out+4)^0,c
  1298   00161C  0012               	return		;funcret
  1299   00161E                     __end_of_SetMensajeSalida:
  1300                           	callstack 0
  1301                           
  1302 ;; *************** function _strlen *****************
  1303 ;; Defined at:
  1304 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strlen.c"
  1305 ;; Parameters:    Size  Location     Type
  1306 ;;  s               1    0[COMRAM] PTR const unsigned char 
  1307 ;;		 -> STR_1(12), 
  1308 ;; Auto vars:     Size  Location     Type
  1309 ;;  a               1    2[COMRAM] PTR const unsigned char 
  1310 ;;		 -> STR_1(12), 
  1311 ;; Return value:  Size  Location     Type
  1312 ;;                  2    0[COMRAM] unsigned int 
  1313 ;; Registers used:
  1314 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  1315 ;; Tracked objects:
  1316 ;;		On entry : 0/0
  1317 ;;		On exit  : 0/0
  1318 ;;		Unchanged: 0/0
  1319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1323 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1324 ;;Total ram usage:        3 bytes
  1325 ;; Hardware stack levels used: 1
  1326 ;; This function calls:
  1327 ;;		Nothing
  1328 ;; This function is called by:
  1329 ;;		_SetMensajeSalida
  1330 ;; This function uses a non-reentrant model
  1331 ;;
  1332                           
  1333                           	psect	text3
  1334   0014E4                     __ptext3:
  1335                           	callstack 0
  1336   0014E4                     _strlen:
  1337                           	callstack 29
  1338   0014E4  C02A  F02C         	movff	strlen@s,strlen@a
  1339   0014E8  EF77  F00A         	goto	l1590
  1340   0014EC                     l1588:
  1341   0014EC  2A2A               	incf	strlen@s^0,f,c
  1342   0014EE                     l1590:
  1343   0014EE  C02A  FFF6         	movff	strlen@s,tblptrl
  1344   0014F2                     	if	0	;There is only one active tblptr byte
  1345   0014F2                     	endif
  1346   0014F2                     	if	0	;tblptru may be non-zero
  1347   0014F2                     	endif
  1348   0014F2                     	if	0	;tblptru may be non-zero
  1349   0014F2                     	endif
  1350   0014F2  0008               	tblrd		*
  1351   0014F4  50F5               	movf	tablat,w,c
  1352   0014F6  0900               	iorlw	0
  1353   0014F8  A4D8               	btfss	status,2,c
  1354   0014FA  EF81  F00A         	goto	u301
  1355   0014FE  EF83  F00A         	goto	u300
  1356   001502                     u301:
  1357   001502  EF76  F00A         	goto	l1588
  1358   001506                     u300:
  1359   001506  502C               	movf	strlen@a^0,w,c
  1360   001508  5C2A               	subwf	strlen@s^0,w,c
  1361   00150A  6E2A               	movwf	?_strlen^0,c
  1362   00150C  6A2B               	clrf	(?_strlen+1)^0,c
  1363   00150E  BE2A               	btfsc	?_strlen^0,7,c
  1364   001510  062B               	decf	(?_strlen+1)^0,f,c
  1365   001512  0012               	return		;funcret
  1366   001514                     __end_of_strlen:
  1367                           	callstack 0
  1368                           
  1369 ;; *************** function _SetDireccionDestino *****************
  1370 ;; Defined at:
  1371 ;;		line 690 in file "drivers/scr/API_MRF24J40.c"
  1372 ;; Parameters:    Size  Location     Type
  1373 ;;  direccion       2    0[COMRAM] unsigned short 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;		None
  1376 ;; Return value:  Size  Location     Type
  1377 ;;                  1    wreg      void 
  1378 ;; Registers used:
  1379 ;;		None
  1380 ;; Tracked objects:
  1381 ;;		On entry : 0/0
  1382 ;;		On exit  : 0/0
  1383 ;;		Unchanged: 0/0
  1384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1385 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;Total ram usage:        2 bytes
  1390 ;; Hardware stack levels used: 1
  1391 ;; This function calls:
  1392 ;;		Nothing
  1393 ;; This function is called by:
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           	psect	text4
  1399   00166E                     __ptext4:
  1400                           	callstack 0
  1401   00166E                     _SetDireccionDestino:
  1402                           	callstack 30
  1403   00166E                     
  1404                           ;drivers/scr/API_MRF24J40.c: 692:     mrf24_data_out.destinity_address = direccion;
  1405   00166E  C02A  F025         	movff	SetDireccionDestino@direccion,_mrf24_data_out+2
  1406   001672  C02B  F026         	movff	SetDireccionDestino@direccion+1,_mrf24_data_out+3
  1407   001676  0012               	return		;funcret
  1408   001678                     __end_of_SetDireccionDestino:
  1409                           	callstack 0
  1410                           
  1411 ;; *************** function _MRF24J40Init *****************
  1412 ;; Defined at:
  1413 ;;		line 497 in file "drivers/scr/API_MRF24J40.c"
  1414 ;; Parameters:    Size  Location     Type
  1415 ;;		None
  1416 ;; Auto vars:     Size  Location     Type
  1417 ;;  lectura         1   12[COMRAM] unsigned char 
  1418 ;; Return value:  Size  Location     Type
  1419 ;;                  1    wreg      void 
  1420 ;; Registers used:
  1421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1422 ;; Tracked objects:
  1423 ;;		On entry : 0/0
  1424 ;;		On exit  : 0/0
  1425 ;;		Unchanged: 0/0
  1426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1428 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1429 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1430 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1431 ;;Total ram usage:        2 bytes
  1432 ;; Hardware stack levels used: 1
  1433 ;; Hardware stack levels required when called: 5
  1434 ;; This function calls:
  1435 ;;		_GetLongAddr
  1436 ;;		_GetShortAddr
  1437 ;;		_InicializoPines
  1438 ;;		_InicializoVariables
  1439 ;;		_SetChannel
  1440 ;;		_SetDeviceAddress
  1441 ;;		_SetDeviceMACAddress
  1442 ;;		_SetLongAddr
  1443 ;;		_SetResetPin
  1444 ;;		_SetShortAddr
  1445 ;; This function is called by:
  1446 ;;		_main
  1447 ;; This function uses a non-reentrant model
  1448 ;;
  1449                           
  1450                           	psect	text5
  1451   001026                     __ptext5:
  1452                           	callstack 0
  1453   001026                     _MRF24J40Init:
  1454                           	callstack 25
  1455   001026                     
  1456                           ;drivers/scr/API_MRF24J40.c: 499:     uint8_t lectura;;drivers/scr/API_MRF24J40.c: 500: 
      +                              InicializoVariables();
  1457   001026  EC45  F009         	call	_InicializoVariables	;wreg free
  1458   00102A                     
  1459                           ;drivers/scr/API_MRF24J40.c: 501:     InicializoPines();
  1460   00102A  ECD5  F00A         	call	_InicializoPines	;wreg free
  1461   00102E                     
  1462                           ;drivers/scr/API_MRF24J40.c: 502:     _delay((unsigned long)((1)*(16000000/4000.0)));;
  1463   00102E  0E06               	movlw	6
  1464   001030  6E35               	movwf	??_MRF24J40Init^0,c
  1465   001032  0E30               	movlw	48
  1466   001034                     u417:
  1467   001034  2EE8               	decfsz	wreg,f,c
  1468   001036  D7FE               	bra	u417
  1469   001038  2E35               	decfsz	??_MRF24J40Init^0,f,c
  1470   00103A  D7FC               	bra	u417
  1471   00103C  F000 F000          	nop2	
  1472   001040                     
  1473                           ;drivers/scr/API_MRF24J40.c: 503:     SetResetPin(1);
  1474   001040  0E01               	movlw	1
  1475   001042  EC16  F00B         	call	_SetResetPin
  1476   001046                     
  1477                           ;drivers/scr/API_MRF24J40.c: 504:     _delay((unsigned long)((1)*(16000000/4000.0)));;
  1478   001046  0E06               	movlw	6
  1479   001048  6E35               	movwf	??_MRF24J40Init^0,c
  1480   00104A  0E30               	movlw	48
  1481   00104C                     u427:
  1482   00104C  2EE8               	decfsz	wreg,f,c
  1483   00104E  D7FE               	bra	u427
  1484   001050  2E35               	decfsz	??_MRF24J40Init^0,f,c
  1485   001052  D7FC               	bra	u427
  1486   001054  F000 F000          	nop2	
  1487   001058                     
  1488                           ;drivers/scr/API_MRF24J40.c: 505:     SetShortAddr((0x2A), (0X04) | (0X02) | (0X01));
  1489   001058  0E07               	movlw	7
  1490   00105A  6E2C               	movwf	SetShortAddr@value^0,c
  1491   00105C  0E2A               	movlw	42
  1492   00105E  ECC5  F00A         	call	_SetShortAddr
  1493   001062                     l1608:
  1494                           
  1495                           ;drivers/scr/API_MRF24J40.c: 508:         lectura = GetShortAddr((0x2A));
  1496   001062  0E2A               	movlw	42
  1497   001064  ECB2  F00A         	call	_GetShortAddr
  1498   001068  6E36               	movwf	MRF24J40Init@lectura^0,c
  1499   00106A                     
  1500                           ;drivers/scr/API_MRF24J40.c: 509:     }while((lectura & ((0X04) | (0X02) | (0X01))) != 0
      +                          X00);
  1501   00106A  C036  F035         	movff	MRF24J40Init@lectura,??_MRF24J40Init
  1502   00106E  0E07               	movlw	7
  1503   001070  1635               	andwf	??_MRF24J40Init^0,f,c
  1504   001072  A4D8               	btfss	status,2,c
  1505   001074  EF3E  F008         	goto	u311
  1506   001078  EF40  F008         	goto	u310
  1507   00107C                     u311:
  1508   00107C  EF31  F008         	goto	l1608
  1509   001080                     u310:
  1510   001080                     
  1511                           ;drivers/scr/API_MRF24J40.c: 510:     _delay((unsigned long)((1)*(16000000/4000.0)));;
  1512   001080  0E06               	movlw	6
  1513   001082  6E35               	movwf	??_MRF24J40Init^0,c
  1514   001084  0E30               	movlw	48
  1515   001086                     u437:
  1516   001086  2EE8               	decfsz	wreg,f,c
  1517   001088  D7FE               	bra	u437
  1518   00108A  2E35               	decfsz	??_MRF24J40Init^0,f,c
  1519   00108C  D7FC               	bra	u437
  1520   00108E  F000 F000          	nop2	
  1521   001092                     
  1522                           ;drivers/scr/API_MRF24J40.c: 511:     SetShortAddr((0x0D), (0X01));
  1523   001092  0E01               	movlw	1
  1524   001094  6E2C               	movwf	SetShortAddr@value^0,c
  1525   001096  0E0D               	movlw	13
  1526   001098  ECC5  F00A         	call	_SetShortAddr
  1527   00109C                     
  1528                           ;drivers/scr/API_MRF24J40.c: 512:     SetDeviceAddress();
  1529   00109C  EC8A  F00A         	call	_SetDeviceAddress	;wreg free
  1530   0010A0                     
  1531                           ;drivers/scr/API_MRF24J40.c: 513:     SetDeviceMACAddress();
  1532   0010A0  EC14  F00A         	call	_SetDeviceMACAddress	;wreg free
  1533   0010A4                     
  1534                           ;drivers/scr/API_MRF24J40.c: 514:     SetLongAddr((0x202), (0X80));
  1535   0010A4  0E02               	movlw	2
  1536   0010A6  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  1537   0010A8  0E02               	movlw	2
  1538   0010AA  6E2F               	movwf	SetLongAddr@reg_address^0,c
  1539   0010AC  0E80               	movlw	128
  1540   0010AE  6E31               	movwf	SetLongAddr@value^0,c
  1541   0010B0  EC35  F00A         	call	_SetLongAddr	;wreg free
  1542   0010B4                     
  1543                           ;drivers/scr/API_MRF24J40.c: 515:     SetLongAddr((0x203), (0XC0) | (0X38));
  1544   0010B4  0E02               	movlw	2
  1545   0010B6  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  1546   0010B8  0E03               	movlw	3
  1547   0010BA  6E2F               	movwf	SetLongAddr@reg_address^0,c
  1548   0010BC  0EF8               	movlw	248
  1549   0010BE  6E31               	movwf	SetLongAddr@value^0,c
  1550   0010C0  EC35  F00A         	call	_SetLongAddr	;wreg free
  1551   0010C4                     
  1552                           ;drivers/scr/API_MRF24J40.c: 516:  SetLongAddr((0x206), (0X80) | (0X10));
  1553   0010C4  0E02               	movlw	2
  1554   0010C6  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  1555   0010C8  0E06               	movlw	6
  1556   0010CA  6E2F               	movwf	SetLongAddr@reg_address^0,c
  1557   0010CC  0E90               	movlw	144
  1558   0010CE  6E31               	movwf	SetLongAddr@value^0,c
  1559   0010D0  EC35  F00A         	call	_SetLongAddr	;wreg free
  1560   0010D4                     
  1561                           ;drivers/scr/API_MRF24J40.c: 517:  SetLongAddr((0x207), (0X80));
  1562   0010D4  0E02               	movlw	2
  1563   0010D6  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  1564   0010D8  0E07               	movlw	7
  1565   0010DA  6E2F               	movwf	SetLongAddr@reg_address^0,c
  1566   0010DC  0E80               	movlw	128
  1567   0010DE  6E31               	movwf	SetLongAddr@value^0,c
  1568   0010E0  EC35  F00A         	call	_SetLongAddr	;wreg free
  1569   0010E4                     
  1570                           ;drivers/scr/API_MRF24J40.c: 518:  SetLongAddr((0x208), (0X10));
  1571   0010E4  0E02               	movlw	2
  1572   0010E6  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  1573   0010E8  0E08               	movlw	8
  1574   0010EA  6E2F               	movwf	SetLongAddr@reg_address^0,c
  1575   0010EC  0E10               	movlw	16
  1576   0010EE  6E31               	movwf	SetLongAddr@value^0,c
  1577   0010F0  EC35  F00A         	call	_SetLongAddr	;wreg free
  1578   0010F4                     
  1579                           ;drivers/scr/API_MRF24J40.c: 519:  SetLongAddr((0x220), (0X20) | (0X01));
  1580   0010F4  0E02               	movlw	2
  1581   0010F6  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  1582   0010F8  0E20               	movlw	32
  1583   0010FA  6E2F               	movwf	SetLongAddr@reg_address^0,c
  1584   0010FC  0E21               	movlw	33
  1585   0010FE  6E31               	movwf	SetLongAddr@value^0,c
  1586   001100  EC35  F00A         	call	_SetLongAddr	;wreg free
  1587   001104                     
  1588                           ;drivers/scr/API_MRF24J40.c: 520:     SetShortAddr((0x3A), (0X80));
  1589   001104  0E80               	movlw	128
  1590   001106  6E2C               	movwf	SetShortAddr@value^0,c
  1591   001108  0E3A               	movlw	58
  1592   00110A  ECC5  F00A         	call	_SetShortAddr
  1593   00110E                     
  1594                           ;drivers/scr/API_MRF24J40.c: 521:     SetShortAddr((0x3E), (0X40));
  1595   00110E  0E40               	movlw	64
  1596   001110  6E2C               	movwf	SetShortAddr@value^0,c
  1597   001112  0E3E               	movlw	62
  1598   001114  ECC5  F00A         	call	_SetShortAddr
  1599   001118                     
  1600                           ;drivers/scr/API_MRF24J40.c: 522:     SetShortAddr((0x3F), (0X04) | (0X02));
  1601   001118  0E06               	movlw	6
  1602   00111A  6E2C               	movwf	SetShortAddr@value^0,c
  1603   00111C  0E3F               	movlw	63
  1604   00111E  ECC5  F00A         	call	_SetShortAddr
  1605   001122                     
  1606                           ;drivers/scr/API_MRF24J40.c: 523:     SetShortAddr((0x18), (0X80) | (0X10) | (0X08));
  1607   001122  0E98               	movlw	152
  1608   001124  6E2C               	movwf	SetShortAddr@value^0,c
  1609   001126  0E18               	movlw	24
  1610   001128  ECC5  F00A         	call	_SetShortAddr
  1611   00112C                     
  1612                           ;drivers/scr/API_MRF24J40.c: 524:     SetShortAddr((0x2E), (0X80) | (0X10) | (0X04) | (0
      +                          X01));
  1613   00112C  0E95               	movlw	149
  1614   00112E  6E2C               	movwf	SetShortAddr@value^0,c
  1615   001130  0E2E               	movlw	46
  1616   001132  ECC5  F00A         	call	_SetShortAddr
  1617   001136                     l1642:
  1618                           
  1619                           ;drivers/scr/API_MRF24J40.c: 527:   lectura = GetLongAddr((0x20f));
  1620   001136  0E02               	movlw	2
  1621   001138  6E30               	movwf	(GetLongAddr@reg_address+1)^0,c
  1622   00113A  0E0F               	movlw	15
  1623   00113C  6E2F               	movwf	GetLongAddr@reg_address^0,c
  1624   00113E  ECD0  F009         	call	_GetLongAddr	;wreg free
  1625   001142  6E36               	movwf	MRF24J40Init@lectura^0,c
  1626   001144                     
  1627                           ;drivers/scr/API_MRF24J40.c: 528:  }while(lectura != (0XA0));
  1628   001144  0EA0               	movlw	160
  1629   001146  1836               	xorwf	MRF24J40Init@lectura^0,w,c
  1630   001148  A4D8               	btfss	status,2,c
  1631   00114A  EFA9  F008         	goto	u321
  1632   00114E  EFAB  F008         	goto	u320
  1633   001152                     u321:
  1634   001152  EF9B  F008         	goto	l1642
  1635   001156                     u320:
  1636   001156                     
  1637                           ;drivers/scr/API_MRF24J40.c: 529:     SetShortAddr((0x32), (0X80) | (0X40) | (0X20) | (0
      +                          X10) | (0X04) | (0X01));
  1638   001156  0EF5               	movlw	245
  1639   001158  6E2C               	movwf	SetShortAddr@value^0,c
  1640   00115A  0E32               	movlw	50
  1641   00115C  ECC5  F00A         	call	_SetShortAddr
  1642                           
  1643                           ;drivers/scr/API_MRF24J40.c: 530:  SetShortAddr((0x12), (0X80) | (0X20) | (0X10) | (0X08
      +                          ) | (0X01));
  1644   001160  0EB9               	movlw	185
  1645   001162  6E2C               	movwf	SetShortAddr@value^0,c
  1646   001164  0E12               	movlw	18
  1647   001166  ECC5  F00A         	call	_SetShortAddr
  1648                           
  1649                           ;drivers/scr/API_MRF24J40.c: 531:   SetLongAddr((0x201), (0X02) | (0X01));
  1650   00116A  0E02               	movlw	2
  1651   00116C  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  1652   00116E  0E01               	movlw	1
  1653   001170  6E2F               	movwf	SetLongAddr@reg_address^0,c
  1654   001172  0E03               	movlw	3
  1655   001174  6E31               	movwf	SetLongAddr@value^0,c
  1656   001176  EC35  F00A         	call	_SetLongAddr	;wreg free
  1657                           
  1658                           ;drivers/scr/API_MRF24J40.c: 532:  SetChannel();
  1659   00117A  EC56  F00A         	call	_SetChannel	;wreg free
  1660                           
  1661                           ;drivers/scr/API_MRF24J40.c: 533:  SetShortAddr((0x00), 0X00);
  1662   00117E  0E00               	movlw	0
  1663   001180  6E2C               	movwf	SetShortAddr@value^0,c
  1664   001182  0E00               	movlw	0
  1665   001184  ECC5  F00A         	call	_SetShortAddr
  1666                           
  1667                           ;drivers/scr/API_MRF24J40.c: 534:  (void)GetShortAddr((0x31));
  1668   001188  0E31               	movlw	49
  1669   00118A  ECB2  F00A         	call	_GetShortAddr
  1670   00118E  0012               	return		;funcret
  1671   001190                     __end_of_MRF24J40Init:
  1672                           	callstack 0
  1673                           
  1674 ;; *************** function _SetDeviceMACAddress *****************
  1675 ;; Defined at:
  1676 ;;		line 660 in file "drivers/scr/API_MRF24J40.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;  i               2    4[COMRAM] int 
  1681 ;; Return value:  Size  Location     Type
  1682 ;;                  1    wreg      void 
  1683 ;; Registers used:
  1684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1685 ;; Tracked objects:
  1686 ;;		On entry : 0/0
  1687 ;;		On exit  : 0/0
  1688 ;;		Unchanged: 0/0
  1689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1691 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1693 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;Total ram usage:        2 bytes
  1695 ;; Hardware stack levels used: 1
  1696 ;; Hardware stack levels required when called: 3
  1697 ;; This function calls:
  1698 ;;		_SetShortAddr
  1699 ;; This function is called by:
  1700 ;;		_MRF24J40Init
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text6
  1705   001428                     __ptext6:
  1706                           	callstack 0
  1707   001428                     _SetDeviceMACAddress:
  1708                           	callstack 26
  1709   001428                     
  1710                           ;drivers/scr/API_MRF24J40.c: 662:     long_mac_address = EADR0;
  1711   001428  0E05               	movlw	5
  1712   00142A  6E29               	movwf	_long_mac_address^0,c
  1713                           
  1714                           ;drivers/scr/API_MRF24J40.c: 664:     for(int i = 0; i < 8; i++) {
  1715   00142C  0E00               	movlw	0
  1716   00142E  6E2F               	movwf	(SetDeviceMACAddress@i+1)^0,c
  1717   001430  0E00               	movlw	0
  1718   001432  6E2E               	movwf	SetDeviceMACAddress@i^0,c
  1719   001434                     l1558:
  1720                           
  1721                           ;drivers/scr/API_MRF24J40.c: 666:         SetShortAddr(long_mac_address++, mrf24_data_co
      +                          nfig.my_mac[i]);
  1722   001434  502E               	movf	SetDeviceMACAddress@i^0,w,c
  1723   001436  0F15               	addlw	low (_mrf24_data_config+20)
  1724   001438  6ED9               	movwf	fsr2l,c
  1725   00143A  6ADA               	clrf	fsr2h,c
  1726   00143C  50DF               	movf	indf2,w,c
  1727   00143E  6E2C               	movwf	SetShortAddr@value^0,c
  1728   001440  5029               	movf	_long_mac_address^0,w,c
  1729   001442  ECC5  F00A         	call	_SetShortAddr
  1730   001446  2A29               	incf	_long_mac_address^0,f,c
  1731   001448                     
  1732                           ;drivers/scr/API_MRF24J40.c: 667:     }
  1733   001448  4A2E               	infsnz	SetDeviceMACAddress@i^0,f,c
  1734   00144A  2A2F               	incf	(SetDeviceMACAddress@i+1)^0,f,c
  1735   00144C  BE2F               	btfsc	(SetDeviceMACAddress@i+1)^0,7,c
  1736   00144E  EF32  F00A         	goto	u281
  1737   001452  502F               	movf	(SetDeviceMACAddress@i+1)^0,w,c
  1738   001454  E109               	bnz	u280
  1739   001456  0E08               	movlw	8
  1740   001458  5C2E               	subwf	SetDeviceMACAddress@i^0,w,c
  1741   00145A  A0D8               	btfss	status,0,c
  1742   00145C  EF32  F00A         	goto	u281
  1743   001460  EF34  F00A         	goto	u280
  1744   001464                     u281:
  1745   001464  EF1A  F00A         	goto	l1558
  1746   001468                     u280:
  1747   001468  0012               	return		;funcret
  1748   00146A                     __end_of_SetDeviceMACAddress:
  1749                           	callstack 0
  1750                           
  1751 ;; *************** function _SetDeviceAddress *****************
  1752 ;; Defined at:
  1753 ;;		line 646 in file "drivers/scr/API_MRF24J40.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;		None
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;		None
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2, status,0, cstack
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;Total ram usage:        0 bytes
  1772 ;; Hardware stack levels used: 1
  1773 ;; Hardware stack levels required when called: 3
  1774 ;; This function calls:
  1775 ;;		_SetShortAddr
  1776 ;; This function is called by:
  1777 ;;		_MRF24J40Init
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           	psect	text7
  1782   001514                     __ptext7:
  1783                           	callstack 0
  1784   001514                     _SetDeviceAddress:
  1785                           	callstack 26
  1786   001514                     
  1787                           ;drivers/scr/API_MRF24J40.c: 648:  SetShortAddr((0x04), (uint8_t) (mrf24_data_config.my_
      +                          address >> (0X08)));
  1788   001514  5020               	movf	(_mrf24_data_config+31)^0,w,c
  1789   001516  6E2C               	movwf	SetShortAddr@value^0,c
  1790   001518  0E04               	movlw	4
  1791   00151A  ECC5  F00A         	call	_SetShortAddr
  1792                           
  1793                           ;drivers/scr/API_MRF24J40.c: 649:  SetShortAddr((0x03), (uint8_t) (mrf24_data_config.my_
      +                          address));
  1794   00151E  C01F  F02C         	movff	_mrf24_data_config+30,SetShortAddr@value
  1795   001522  0E03               	movlw	3
  1796   001524  ECC5  F00A         	call	_SetShortAddr
  1797                           
  1798                           ;drivers/scr/API_MRF24J40.c: 650:  SetShortAddr((0x02), (uint8_t) (mrf24_data_config.my_
      +                          panid >> (0X08)));
  1799   001528  501E               	movf	(_mrf24_data_config+29)^0,w,c
  1800   00152A  6E2C               	movwf	SetShortAddr@value^0,c
  1801   00152C  0E02               	movlw	2
  1802   00152E  ECC5  F00A         	call	_SetShortAddr
  1803                           
  1804                           ;drivers/scr/API_MRF24J40.c: 651:  SetShortAddr((0x01), (uint8_t) (mrf24_data_config.my_
      +                          panid));
  1805   001532  C01D  F02C         	movff	_mrf24_data_config+28,SetShortAddr@value
  1806   001536  0E01               	movlw	1
  1807   001538  ECC5  F00A         	call	_SetShortAddr
  1808   00153C  0012               	return		;funcret
  1809   00153E                     __end_of_SetDeviceAddress:
  1810                           	callstack 0
  1811                           
  1812 ;; *************** function _SetChannel *****************
  1813 ;; Defined at:
  1814 ;;		line 632 in file "drivers/scr/API_MRF24J40.c"
  1815 ;; Parameters:    Size  Location     Type
  1816 ;;		None
  1817 ;; Auto vars:     Size  Location     Type
  1818 ;;		None
  1819 ;; Return value:  Size  Location     Type
  1820 ;;                  1    wreg      void 
  1821 ;; Registers used:
  1822 ;;		wreg, status,2, status,0, cstack
  1823 ;; Tracked objects:
  1824 ;;		On entry : 0/0
  1825 ;;		On exit  : 0/0
  1826 ;;		Unchanged: 0/0
  1827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;Total ram usage:        1 bytes
  1833 ;; Hardware stack levels used: 1
  1834 ;; Hardware stack levels required when called: 4
  1835 ;; This function calls:
  1836 ;;		_SetLongAddr
  1837 ;;		_SetShortAddr
  1838 ;; This function is called by:
  1839 ;;		_MRF24J40Init
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           	psect	text8
  1844   0014AC                     __ptext8:
  1845                           	callstack 0
  1846   0014AC                     _SetChannel:
  1847                           	callstack 25
  1848   0014AC                     
  1849                           ;drivers/scr/API_MRF24J40.c: 634:  SetLongAddr((0x200), mrf24_data_config.my_channel);
  1850   0014AC  0E02               	movlw	2
  1851   0014AE  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  1852   0014B0  0E00               	movlw	0
  1853   0014B2  6E2F               	movwf	SetLongAddr@reg_address^0,c
  1854   0014B4  C004  F031         	movff	_mrf24_data_config+3,SetLongAddr@value
  1855   0014B8  EC35  F00A         	call	_SetLongAddr	;wreg free
  1856                           
  1857                           ;drivers/scr/API_MRF24J40.c: 635:  SetShortAddr((0x36), (0X04));
  1858   0014BC  0E04               	movlw	4
  1859   0014BE  6E2C               	movwf	SetShortAddr@value^0,c
  1860   0014C0  0E36               	movlw	54
  1861   0014C2  ECC5  F00A         	call	_SetShortAddr
  1862                           
  1863                           ;drivers/scr/API_MRF24J40.c: 636:  SetShortAddr((0x36), 0X00);
  1864   0014C6  0E00               	movlw	0
  1865   0014C8  6E2C               	movwf	SetShortAddr@value^0,c
  1866   0014CA  0E36               	movlw	54
  1867   0014CC  ECC5  F00A         	call	_SetShortAddr
  1868   0014D0                     
  1869                           ;drivers/scr/API_MRF24J40.c: 637:  _delay((unsigned long)((1)*(16000000/4000.0)));;
  1870   0014D0  0E06               	movlw	6
  1871   0014D2  6E34               	movwf	??_SetChannel^0,c
  1872   0014D4  0E30               	movlw	48
  1873   0014D6                     u447:
  1874   0014D6  2EE8               	decfsz	wreg,f,c
  1875   0014D8  D7FE               	bra	u447
  1876   0014DA  2E34               	decfsz	??_SetChannel^0,f,c
  1877   0014DC  D7FC               	bra	u447
  1878   0014DE  F000 F000          	nop2	
  1879   0014E2  0012               	return		;funcret
  1880   0014E4                     __end_of_SetChannel:
  1881                           	callstack 0
  1882                           
  1883 ;; *************** function _InicializoVariables *****************
  1884 ;; Defined at:
  1885 ;;		line 544 in file "drivers/scr/API_MRF24J40.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;  i               2    1[COMRAM] int 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  1    wreg      void 
  1892 ;; Registers used:
  1893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;Total ram usage:        3 bytes
  1904 ;; Hardware stack levels used: 1
  1905 ;; This function calls:
  1906 ;;		Nothing
  1907 ;; This function is called by:
  1908 ;;		_MRF24J40Init
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text9
  1913   00128A                     __ptext9:
  1914                           	callstack 0
  1915   00128A                     _InicializoVariables:
  1916                           	callstack 29
  1917   00128A                     
  1918                           ;drivers/scr/API_MRF24J40.c: 546:     for(int i = 0; i < 16; i++){
  1919   00128A  0E00               	movlw	0
  1920   00128C  6E2C               	movwf	(InicializoVariables@i+1)^0,c
  1921   00128E  0E00               	movlw	0
  1922   001290  6E2B               	movwf	InicializoVariables@i^0,c
  1923   001292                     l1512:
  1924                           
  1925                           ;drivers/scr/API_MRF24J40.c: 548:         if(i < 8)
  1926   001292  BE2C               	btfsc	(InicializoVariables@i+1)^0,7,c
  1927   001294  EF57  F009         	goto	u260
  1928   001298  502C               	movf	(InicializoVariables@i+1)^0,w,c
  1929   00129A  E107               	bnz	u261
  1930   00129C  0E08               	movlw	8
  1931   00129E  5C2B               	subwf	InicializoVariables@i^0,w,c
  1932   0012A0  B0D8               	btfsc	status,0,c
  1933   0012A2  EF55  F009         	goto	u261
  1934   0012A6  EF57  F009         	goto	u260
  1935   0012AA                     u261:
  1936   0012AA  EF63  F009         	goto	l211
  1937   0012AE                     u260:
  1938   0012AE                     
  1939                           ;drivers/scr/API_MRF24J40.c: 549:             mrf24_data_config.my_mac[i] = default_mac_
      +                          address[i];
  1940   0012AE  502B               	movf	InicializoVariables@i^0,w,c
  1941   0012B0  0F11               	addlw	low _default_mac_address
  1942   0012B2  6E2A               	movwf	??_InicializoVariables^0,c
  1943   0012B4  C02A  FFF6         	movff	??_InicializoVariables,tblptrl
  1944   0012B8                     	if	0	;There is only one active tblptr byte
  1945   0012B8                     	endif
  1946   0012B8                     	if	0	;tblptru may be non-zero
  1947   0012B8                     	endif
  1948   0012B8                     	if	0	;tblptru may be non-zero
  1949   0012B8                     	endif
  1950   0012B8  502B               	movf	InicializoVariables@i^0,w,c
  1951   0012BA  0F15               	addlw	low (_mrf24_data_config+20)
  1952   0012BC  6ED9               	movwf	fsr2l,c
  1953   0012BE  6ADA               	clrf	fsr2h,c
  1954   0012C0  0008               	tblrd		*
  1955   0012C2  CFF5 FFDF          	movff	tablat,indf2
  1956   0012C6                     l211:
  1957                           
  1958                           ;drivers/scr/API_MRF24J40.c: 550:         mrf24_data_config.security_key[i] = default_se
      +                          curity_key[i];
  1959   0012C6  502B               	movf	InicializoVariables@i^0,w,c
  1960   0012C8  0F01               	addlw	low _default_security_key
  1961   0012CA  6E2A               	movwf	??_InicializoVariables^0,c
  1962   0012CC  C02A  FFF6         	movff	??_InicializoVariables,tblptrl
  1963   0012D0                     	if	0	;There is only one active tblptr byte
  1964   0012D0                     	endif
  1965   0012D0                     	if	0	;tblptru may be non-zero
  1966   0012D0                     	endif
  1967   0012D0                     	if	0	;tblptru may be non-zero
  1968   0012D0                     	endif
  1969   0012D0  502B               	movf	InicializoVariables@i^0,w,c
  1970   0012D2  0F05               	addlw	low (_mrf24_data_config+4)
  1971   0012D4  6ED9               	movwf	fsr2l,c
  1972   0012D6  6ADA               	clrf	fsr2h,c
  1973   0012D8  0008               	tblrd		*
  1974   0012DA  CFF5 FFDF          	movff	tablat,indf2
  1975   0012DE                     
  1976                           ;drivers/scr/API_MRF24J40.c: 551:     }
  1977   0012DE  4A2B               	infsnz	InicializoVariables@i^0,f,c
  1978   0012E0  2A2C               	incf	(InicializoVariables@i+1)^0,f,c
  1979   0012E2  BE2C               	btfsc	(InicializoVariables@i+1)^0,7,c
  1980   0012E4  EF7D  F009         	goto	u271
  1981   0012E8  502C               	movf	(InicializoVariables@i+1)^0,w,c
  1982   0012EA  E109               	bnz	u270
  1983   0012EC  0E10               	movlw	16
  1984   0012EE  5C2B               	subwf	InicializoVariables@i^0,w,c
  1985   0012F0  A0D8               	btfss	status,0,c
  1986   0012F2  EF7D  F009         	goto	u271
  1987   0012F6  EF7F  F009         	goto	u270
  1988   0012FA                     u271:
  1989   0012FA  EF49  F009         	goto	l1512
  1990   0012FE                     u270:
  1991   0012FE                     
  1992                           ;drivers/scr/API_MRF24J40.c: 552:     mrf24_data_config.sequence_number = (0X01);
  1993   0012FE  0E01               	movlw	1
  1994   001300  6E03               	movwf	(_mrf24_data_config+2)^0,c
  1995                           
  1996                           ;drivers/scr/API_MRF24J40.c: 553:     mrf24_data_config.my_channel = CH_11;
  1997   001302  0E03               	movlw	3
  1998   001304  6E04               	movwf	(_mrf24_data_config+3)^0,c
  1999   001306                     
  2000                           ;drivers/scr/API_MRF24J40.c: 554:     mrf24_data_config.get_new_msg = 0;
  2001   001306  6A01               	clrf	_mrf24_data_config^0,c
  2002   001308                     
  2003                           ;drivers/scr/API_MRF24J40.c: 555:     mrf24_data_config.put_new_msg = 0;
  2004   001308  6A02               	clrf	(_mrf24_data_config+1)^0,c
  2005                           
  2006                           ;drivers/scr/API_MRF24J40.c: 556:     mrf24_data_config.my_panid = (0x1234);
  2007   00130A  0E12               	movlw	18
  2008   00130C  6E1E               	movwf	(_mrf24_data_config+29)^0,c
  2009   00130E  0E34               	movlw	52
  2010   001310  6E1D               	movwf	(_mrf24_data_config+28)^0,c
  2011                           
  2012                           ;drivers/scr/API_MRF24J40.c: 557:     mrf24_data_config.my_address = (0xDADD);
  2013   001312  0EDA               	movlw	218
  2014   001314  6E20               	movwf	(_mrf24_data_config+31)^0,c
  2015   001316  0EDD               	movlw	221
  2016   001318  6E1F               	movwf	(_mrf24_data_config+30)^0,c
  2017                           
  2018                           ;drivers/scr/API_MRF24J40.c: 558:     mrf24_data_in.source_address = 0X00;
  2019   00131A  0E00               	movlw	0
  2020   00131C  0100               	movlb	0	; () banked
  2021   00131E  6F63               	movwf	(_mrf24_data_in+3)& (0+255),b
  2022   001320  0E00               	movlw	0
  2023   001322  6F62               	movwf	(_mrf24_data_in+2)& (0+255),b
  2024                           
  2025                           ;drivers/scr/API_MRF24J40.c: 559:     mrf24_data_in.source_panid = 0X00;
  2026   001324  0E00               	movlw	0
  2027   001326  6F61               	movwf	(_mrf24_data_in+1)& (0+255),b
  2028   001328  0E00               	movlw	0
  2029   00132A  6F60               	movwf	_mrf24_data_in& (0+255),b
  2030   00132C                     
  2031                           ; BSR set to: 0
  2032                           ;drivers/scr/API_MRF24J40.c: 560:     mrf24_data_in.tamano_mensaje = 0X00;
  2033   00132C  6B64               	clrf	(_mrf24_data_in+4)& (0+255),b
  2034   00132E                     
  2035                           ; BSR set to: 0
  2036                           ;drivers/scr/API_MRF24J40.c: 561:     mrf24_data_in.buffer_entrada[0] = 0X00;
  2037   00132E  6B66               	clrf	(_mrf24_data_in+6)& (0+255),b
  2038   001330                     
  2039                           ; BSR set to: 0
  2040   001330  0012               	return		;funcret
  2041   001332                     __end_of_InicializoVariables:
  2042                           	callstack 0
  2043                           
  2044 ;; *************** function _InicializoPines *****************
  2045 ;; Defined at:
  2046 ;;		line 21 in file "drivers/scr/API_MRF24J40_port.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;		None
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      void 
  2053 ;; Registers used:
  2054 ;;		wreg, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : 0/0
  2057 ;;		On exit  : 0/0
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;Total ram usage:        0 bytes
  2065 ;; Hardware stack levels used: 1
  2066 ;; Hardware stack levels required when called: 1
  2067 ;; This function calls:
  2068 ;;		_SetCSPin
  2069 ;;		_SetResetPin
  2070 ;;		_SetWakePin
  2071 ;; This function is called by:
  2072 ;;		_MRF24J40Init
  2073 ;; This function uses a non-reentrant model
  2074 ;;
  2075                           
  2076                           	psect	text10
  2077   0015AA                     __ptext10:
  2078                           	callstack 0
  2079   0015AA                     _InicializoPines:
  2080                           	callstack 28
  2081   0015AA                     
  2082                           ;drivers/scr/API_MRF24J40_port.c: 23:     TRISBbits.TRISB0 = 1;
  2083   0015AA  8093               	bsf	147,0,c	;volatile
  2084                           
  2085                           ;drivers/scr/API_MRF24J40_port.c: 24:     TRISCbits.TRISC6 = 0;
  2086   0015AC  9C94               	bcf	148,6,c	;volatile
  2087                           
  2088                           ;drivers/scr/API_MRF24J40_port.c: 25:     TRISCbits.TRISC7 = 0;
  2089   0015AE  9E94               	bcf	148,7,c	;volatile
  2090                           
  2091                           ;drivers/scr/API_MRF24J40_port.c: 26:     TRISDbits.TRISD4 = 0;
  2092   0015B0  9895               	bcf	149,4,c	;volatile
  2093   0015B2                     
  2094                           ;drivers/scr/API_MRF24J40_port.c: 27:     SetCSPin(1);
  2095   0015B2  0E01               	movlw	1
  2096   0015B4  EC2B  F00B         	call	_SetCSPin
  2097                           
  2098                           ;drivers/scr/API_MRF24J40_port.c: 28:     SetWakePin(1);
  2099   0015B8  0E01               	movlw	1
  2100   0015BA  EC0F  F00B         	call	_SetWakePin
  2101                           
  2102                           ;drivers/scr/API_MRF24J40_port.c: 29:     SetResetPin(0);
  2103   0015BE  0E00               	movlw	0
  2104   0015C0  EC16  F00B         	call	_SetResetPin
  2105   0015C4  0012               	return		;funcret
  2106   0015C6                     __end_of_InicializoPines:
  2107                           	callstack 0
  2108                           
  2109 ;; *************** function _SetWakePin *****************
  2110 ;; Defined at:
  2111 ;;		line 49 in file "drivers/scr/API_MRF24J40_port.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;  estado          1    wreg     _Bool 
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;  estado          1    0[COMRAM] _Bool 
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		wreg
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2128 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2129 ;;Total ram usage:        1 bytes
  2130 ;; Hardware stack levels used: 1
  2131 ;; This function calls:
  2132 ;;		Nothing
  2133 ;; This function is called by:
  2134 ;;		_InicializoPines
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text11
  2139   00161E                     __ptext11:
  2140                           	callstack 0
  2141   00161E                     _SetWakePin:
  2142                           	callstack 28
  2143                           
  2144                           ;incstack = 0
  2145                           ;SetWakePin@estado stored from wreg
  2146   00161E  6E2A               	movwf	SetWakePin@estado^0,c
  2147   001620                     
  2148                           ;drivers/scr/API_MRF24J40_port.c: 51:     LATCbits.LATC7 = estado;
  2149   001620  B02A               	btfsc	SetWakePin@estado^0,0,c
  2150   001622  D002               	bra	u45
  2151   001624  9E8B               	bcf	139,7,c	;volatile
  2152   001626  D001               	bra	u46
  2153   001628                     u45:
  2154   001628  8E8B               	bsf	139,7,c	;volatile
  2155   00162A                     u46:
  2156   00162A  0012               	return		;funcret
  2157   00162C                     __end_of_SetWakePin:
  2158                           	callstack 0
  2159                           
  2160 ;; *************** function _SetResetPin *****************
  2161 ;; Defined at:
  2162 ;;		line 60 in file "drivers/scr/API_MRF24J40_port.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;  estado          1    wreg     _Bool 
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;  estado          1    0[COMRAM] _Bool 
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      void 
  2169 ;; Registers used:
  2170 ;;		wreg
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2180 ;;Total ram usage:        1 bytes
  2181 ;; Hardware stack levels used: 1
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_InicializoPines
  2186 ;;		_MRF24J40Init
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text12
  2191   00162C                     __ptext12:
  2192                           	callstack 0
  2193   00162C                     _SetResetPin:
  2194                           	callstack 29
  2195                           
  2196                           ;incstack = 0
  2197                           ;SetResetPin@estado stored from wreg
  2198   00162C  6E2A               	movwf	SetResetPin@estado^0,c
  2199   00162E                     
  2200                           ;drivers/scr/API_MRF24J40_port.c: 62:     LATDbits.LATD4 = estado;
  2201   00162E  B02A               	btfsc	SetResetPin@estado^0,0,c
  2202   001630  D002               	bra	u55
  2203   001632  988C               	bcf	140,4,c	;volatile
  2204   001634  D001               	bra	u56
  2205   001636                     u55:
  2206   001636  888C               	bsf	140,4,c	;volatile
  2207   001638                     u56:
  2208   001638  0012               	return		;funcret
  2209   00163A                     __end_of_SetResetPin:
  2210                           	callstack 0
  2211                           
  2212 ;; *************** function _GetShortAddr *****************
  2213 ;; Defined at:
  2214 ;;		line 585 in file "drivers/scr/API_MRF24J40.c"
  2215 ;; Parameters:    Size  Location     Type
  2216 ;;  reg_address     1    wreg     unsigned char 
  2217 ;; Auto vars:     Size  Location     Type
  2218 ;;  reg_address     1    3[COMRAM] unsigned char 
  2219 ;;  leido_spi       1    2[COMRAM] unsigned char 
  2220 ;; Return value:  Size  Location     Type
  2221 ;;                  1    wreg      unsigned char 
  2222 ;; Registers used:
  2223 ;;		wreg, status,2, status,0, cstack
  2224 ;; Tracked objects:
  2225 ;;		On entry : 0/0
  2226 ;;		On exit  : 0/0
  2227 ;;		Unchanged: 0/0
  2228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2230 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2232 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2233 ;;Total ram usage:        2 bytes
  2234 ;; Hardware stack levels used: 1
  2235 ;; Hardware stack levels required when called: 2
  2236 ;; This function calls:
  2237 ;;		_ReadByteSPIPort
  2238 ;;		_SetCSPin
  2239 ;;		_WriteByteSPIPort
  2240 ;; This function is called by:
  2241 ;;		_MRF24J40Init
  2242 ;;		_ReciboPaquete
  2243 ;; This function uses a non-reentrant model
  2244 ;;
  2245                           
  2246                           	psect	text13
  2247   001564                     __ptext13:
  2248                           	callstack 0
  2249   001564                     _GetShortAddr:
  2250                           	callstack 27
  2251                           
  2252                           ;incstack = 0
  2253                           ;GetShortAddr@reg_address stored from wreg
  2254   001564  6E2D               	movwf	GetShortAddr@reg_address^0,c
  2255   001566                     
  2256                           ;drivers/scr/API_MRF24J40.c: 588:     reg_address = (uint8_t) (reg_address << (0X01)) & 
      +                          (0x7E);
  2257   001566  502D               	movf	GetShortAddr@reg_address^0,w,c
  2258   001568  242D               	addwf	GetShortAddr@reg_address^0,w,c
  2259   00156A  0B7E               	andlw	126
  2260   00156C  6E2D               	movwf	GetShortAddr@reg_address^0,c
  2261   00156E                     
  2262                           ;drivers/scr/API_MRF24J40.c: 589:     SetCSPin(0);
  2263   00156E  0E00               	movlw	0
  2264   001570  EC2B  F00B         	call	_SetCSPin
  2265   001574                     
  2266                           ;drivers/scr/API_MRF24J40.c: 590:     WriteByteSPIPort(reg_address);
  2267   001574  502D               	movf	GetShortAddr@reg_address^0,w,c
  2268   001576  EC3C  F00B         	call	_WriteByteSPIPort
  2269   00157A                     
  2270                           ;drivers/scr/API_MRF24J40.c: 591:     leido_spi = ReadByteSPIPort();
  2271   00157A  EC41  F00B         	call	_ReadByteSPIPort	;wreg free
  2272   00157E  6E2C               	movwf	GetShortAddr@leido_spi^0,c
  2273   001580                     
  2274                           ;drivers/scr/API_MRF24J40.c: 592:     SetCSPin(1);
  2275   001580  0E01               	movlw	1
  2276   001582  EC2B  F00B         	call	_SetCSPin
  2277   001586                     
  2278                           ;drivers/scr/API_MRF24J40.c: 593:  return leido_spi;
  2279   001586  502C               	movf	GetShortAddr@leido_spi^0,w,c
  2280   001588  0012               	return		;funcret
  2281   00158A                     __end_of_GetShortAddr:
  2282                           	callstack 0
  2283                           
  2284 ;; *************** function _GetLongAddr *****************
  2285 ;; Defined at:
  2286 ;;		line 616 in file "drivers/scr/API_MRF24J40.c"
  2287 ;; Parameters:    Size  Location     Type
  2288 ;;  reg_address     2    5[COMRAM] unsigned short 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  respuesta       1    9[COMRAM] unsigned char 
  2291 ;; Return value:  Size  Location     Type
  2292 ;;                  1    wreg      unsigned char 
  2293 ;; Registers used:
  2294 ;;		wreg, status,2, status,0, cstack
  2295 ;; Tracked objects:
  2296 ;;		On entry : 0/0
  2297 ;;		On exit  : 0/0
  2298 ;;		Unchanged: 0/0
  2299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2300 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2301 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2302 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2303 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2304 ;;Total ram usage:        5 bytes
  2305 ;; Hardware stack levels used: 1
  2306 ;; Hardware stack levels required when called: 3
  2307 ;; This function calls:
  2308 ;;		_ReadByteSPIPort
  2309 ;;		_SetCSPin
  2310 ;;		_Write2ByteSPIPort
  2311 ;; This function is called by:
  2312 ;;		_MRF24J40Init
  2313 ;;		_ReciboPaquete
  2314 ;; This function uses a non-reentrant model
  2315 ;;
  2316                           
  2317                           	psect	text14
  2318   0013A0                     __ptext14:
  2319                           	callstack 0
  2320   0013A0                     _GetLongAddr:
  2321                           	callstack 26
  2322   0013A0                     
  2323                           ;drivers/scr/API_MRF24J40.c: 618:  uint8_t respuesta;;drivers/scr/API_MRF24J40.c: 619:  
      +                             reg_address = (reg_address << (0X05)) | (0X8000);
  2324   0013A0  C02F  F031         	movff	GetLongAddr@reg_address,??_GetLongAddr
  2325   0013A4  C030  F032         	movff	GetLongAddr@reg_address+1,??_GetLongAddr+1
  2326   0013A8  0E05               	movlw	5
  2327   0013AA                     u295:
  2328   0013AA  90D8               	bcf	status,0,c
  2329   0013AC  3631               	rlcf	??_GetLongAddr^0,f,c
  2330   0013AE  3632               	rlcf	(??_GetLongAddr+1)^0,f,c
  2331   0013B0  2EE8               	decfsz	wreg,f,c
  2332   0013B2  EFD5  F009         	goto	u295
  2333   0013B6  0E00               	movlw	0
  2334   0013B8  1031               	iorwf	??_GetLongAddr^0,w,c
  2335   0013BA  6E2F               	movwf	GetLongAddr@reg_address^0,c
  2336   0013BC  0E80               	movlw	128
  2337   0013BE  1032               	iorwf	(??_GetLongAddr+1)^0,w,c
  2338   0013C0  6E30               	movwf	(GetLongAddr@reg_address+1)^0,c
  2339   0013C2                     
  2340                           ;drivers/scr/API_MRF24J40.c: 620:     SetCSPin(0);
  2341   0013C2  0E00               	movlw	0
  2342   0013C4  EC2B  F00B         	call	_SetCSPin
  2343   0013C8                     
  2344                           ;drivers/scr/API_MRF24J40.c: 621:     Write2ByteSPIPort(reg_address);
  2345   0013C8  C02F  F02D         	movff	GetLongAddr@reg_address,Write2ByteSPIPort@dato
  2346   0013CC  C030  F02E         	movff	GetLongAddr@reg_address+1,Write2ByteSPIPort@dato+1
  2347   0013D0  EC1D  F00B         	call	_Write2ByteSPIPort	;wreg free
  2348   0013D4                     
  2349                           ;drivers/scr/API_MRF24J40.c: 622:  respuesta = ReadByteSPIPort();
  2350   0013D4  EC41  F00B         	call	_ReadByteSPIPort	;wreg free
  2351   0013D8  6E33               	movwf	GetLongAddr@respuesta^0,c
  2352   0013DA                     
  2353                           ;drivers/scr/API_MRF24J40.c: 623:     SetCSPin(1);
  2354   0013DA  0E01               	movlw	1
  2355   0013DC  EC2B  F00B         	call	_SetCSPin
  2356   0013E0                     
  2357                           ;drivers/scr/API_MRF24J40.c: 624:  return respuesta;
  2358   0013E0  5033               	movf	GetLongAddr@respuesta^0,w,c
  2359   0013E2  0012               	return		;funcret
  2360   0013E4                     __end_of_GetLongAddr:
  2361                           	callstack 0
  2362                           
  2363 ;; *************** function _ReadByteSPIPort *****************
  2364 ;; Defined at:
  2365 ;;		line 102 in file "drivers/scr/API_MRF24J40_port.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;		None
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      unsigned char 
  2372 ;; Registers used:
  2373 ;;		wreg, status,2, cstack
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;Total ram usage:        0 bytes
  2384 ;; Hardware stack levels used: 1
  2385 ;; Hardware stack levels required when called: 1
  2386 ;; This function calls:
  2387 ;;		_SPIRead
  2388 ;; This function is called by:
  2389 ;;		_GetShortAddr
  2390 ;;		_GetLongAddr
  2391 ;; This function uses a non-reentrant model
  2392 ;;
  2393                           
  2394                           	psect	text15
  2395   001682                     __ptext15:
  2396                           	callstack 0
  2397   001682                     _ReadByteSPIPort:
  2398                           	callstack 27
  2399   001682                     
  2400                           ;drivers/scr/API_MRF24J40_port.c: 104:     return SPIRead();
  2401   001682  ECFB  F00A         	call	_SPIRead	;wreg free
  2402   001686  0012               	return		;funcret
  2403   001688                     __end_of_ReadByteSPIPort:
  2404                           	callstack 0
  2405                           
  2406 ;; *************** function _SPIRead *****************
  2407 ;; Defined at:
  2408 ;;		line 74 in file "drivers/scr/drv_mspi_port.c"
  2409 ;; Parameters:    Size  Location     Type
  2410 ;;		None
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;		None
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  1    wreg      unsigned char 
  2415 ;; Registers used:
  2416 ;;		wreg, status,2
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2426 ;;Total ram usage:        0 bytes
  2427 ;; Hardware stack levels used: 1
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_ReadByteSPIPort
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text16
  2436   0015F6                     __ptext16:
  2437                           	callstack 0
  2438   0015F6                     _SPIRead:
  2439                           	callstack 27
  2440   0015F6                     
  2441                           ;drivers/scr/drv_mspi_port.c: 76:     SSPCON1bits.WCOL = 0;
  2442   0015F6  9EC6               	bcf	198,7,c	;volatile
  2443                           
  2444                           ;drivers/scr/drv_mspi_port.c: 77:     SSPBUF = 0X00;
  2445   0015F8  6AC9               	clrf	201,c	;volatile
  2446   0015FA                     l27:
  2447   0015FA  A0C7               	btfss	199,0,c	;volatile
  2448   0015FC  EF02  F00B         	goto	u231
  2449   001600  EF04  F00B         	goto	u230
  2450   001604                     u231:
  2451   001604  EFFD  F00A         	goto	l27
  2452   001608                     u230:
  2453   001608                     
  2454                           ;drivers/scr/drv_mspi_port.c: 79:     return SSPBUF;
  2455   001608  50C9               	movf	201,w,c	;volatile
  2456   00160A  0012               	return		;funcret
  2457   00160C                     __end_of_SPIRead:
  2458                           	callstack 0
  2459                           
  2460 ;; *************** function _EnviarDato *****************
  2461 ;; Defined at:
  2462 ;;		line 712 in file "drivers/scr/API_MRF24J40.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;		None
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  i               1   15[COMRAM] char 
  2467 ;;  pos_memoria     1   16[COMRAM] unsigned char 
  2468 ;;  largo_cabece    1    0        unsigned char 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2473 ;; Tracked objects:
  2474 ;;		On entry : 0/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2480 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2481 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2482 ;;Total ram usage:        7 bytes
  2483 ;; Hardware stack levels used: 1
  2484 ;; Hardware stack levels required when called: 4
  2485 ;; This function calls:
  2486 ;;		_SetLongAddr
  2487 ;;		_SetShortAddr
  2488 ;; This function is called by:
  2489 ;;		_main
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           	psect	text17
  2494   001190                     __ptext17:
  2495                           	callstack 0
  2496   001190                     _EnviarDato:
  2497                           	callstack 26
  2498   001190                     
  2499                           ;drivers/scr/API_MRF24J40.c: 714:  uint8_t pos_memoria = 0;
  2500   001190  6A3A               	clrf	EnviarDato@pos_memoria^0,c
  2501   001192                     
  2502                           ;drivers/scr/API_MRF24J40.c: 716:  SetLongAddr(pos_memoria++, largo_cabecera);
  2503   001192  0E00               	movlw	0
  2504   001194  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  2505   001196  0E00               	movlw	0
  2506   001198  6E2F               	movwf	SetLongAddr@reg_address^0,c
  2507   00119A  0E08               	movlw	8
  2508   00119C  6E31               	movwf	SetLongAddr@value^0,c
  2509   00119E  EC35  F00A         	call	_SetLongAddr	;wreg free
  2510   0011A2  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2511   0011A4                     
  2512                           ;drivers/scr/API_MRF24J40.c: 717:  SetLongAddr(pos_memoria++, mrf24_data_out.largo_mensa
      +                          je + largo_cabecera);
  2513   0011A4  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2514   0011A8  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2515   0011AA  5027               	movf	(_mrf24_data_out+4)^0,w,c
  2516   0011AC  0F08               	addlw	8
  2517   0011AE  6E31               	movwf	SetLongAddr@value^0,c
  2518   0011B0  EC35  F00A         	call	_SetLongAddr	;wreg free
  2519   0011B4  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2520   0011B6                     
  2521                           ;drivers/scr/API_MRF24J40.c: 718:  SetLongAddr(pos_memoria++, (0X01)|(0X20)|(0X40));
  2522   0011B6  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2523   0011BA  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2524   0011BC  0E61               	movlw	97
  2525   0011BE  6E31               	movwf	SetLongAddr@value^0,c
  2526   0011C0  EC35  F00A         	call	_SetLongAddr	;wreg free
  2527   0011C4  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2528   0011C6                     
  2529                           ;drivers/scr/API_MRF24J40.c: 719:  SetLongAddr(pos_memoria++, (0XC0)|(0X08));
  2530   0011C6  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2531   0011CA  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2532   0011CC  0EC8               	movlw	200
  2533   0011CE  6E31               	movwf	SetLongAddr@value^0,c
  2534   0011D0  EC35  F00A         	call	_SetLongAddr	;wreg free
  2535   0011D4  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2536   0011D6                     
  2537                           ;drivers/scr/API_MRF24J40.c: 720:  SetLongAddr(pos_memoria++, mrf24_data_config.sequence
      +                          _number++);
  2538   0011D6  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2539   0011DA  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2540   0011DC  EE20  F003         	lfsr	2,_mrf24_data_config+2
  2541   0011E0  50DF               	movf	indf2,w,c
  2542   0011E2  2ADF               	incf	indf2,f,c
  2543   0011E4  6E31               	movwf	SetLongAddr@value^0,c
  2544   0011E6  EC35  F00A         	call	_SetLongAddr	;wreg free
  2545   0011EA  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2546   0011EC                     
  2547                           ;drivers/scr/API_MRF24J40.c: 721:  SetLongAddr(pos_memoria++, (uint8_t) mrf24_data_out.d
      +                          estinity_panid);
  2548   0011EC  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2549   0011F0  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2550   0011F2  C023  F031         	movff	_mrf24_data_out,SetLongAddr@value
  2551   0011F6  EC35  F00A         	call	_SetLongAddr	;wreg free
  2552   0011FA  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2553   0011FC                     
  2554                           ;drivers/scr/API_MRF24J40.c: 722:  SetLongAddr(pos_memoria++, (uint8_t) (mrf24_data_out.
      +                          destinity_panid >> (0X08)));
  2555   0011FC  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2556   001200  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2557   001202  5024               	movf	(_mrf24_data_out+1)^0,w,c
  2558   001204  6E31               	movwf	SetLongAddr@value^0,c
  2559   001206  EC35  F00A         	call	_SetLongAddr	;wreg free
  2560   00120A  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2561   00120C                     
  2562                           ;drivers/scr/API_MRF24J40.c: 723:  SetLongAddr(pos_memoria++, (uint8_t) mrf24_data_out.d
      +                          estinity_address);
  2563   00120C  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2564   001210  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2565   001212  C025  F031         	movff	_mrf24_data_out+2,SetLongAddr@value
  2566   001216  EC35  F00A         	call	_SetLongAddr	;wreg free
  2567   00121A  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2568   00121C                     
  2569                           ;drivers/scr/API_MRF24J40.c: 724:  SetLongAddr(pos_memoria++, (uint8_t) (mrf24_data_out.
      +                          destinity_address >> (0X08)));
  2570   00121C  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2571   001220  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2572   001222  5026               	movf	(_mrf24_data_out+3)^0,w,c
  2573   001224  6E31               	movwf	SetLongAddr@value^0,c
  2574   001226  EC35  F00A         	call	_SetLongAddr	;wreg free
  2575   00122A  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2576   00122C                     
  2577                           ;drivers/scr/API_MRF24J40.c: 726:     for(int8_t i = 0; i < mrf24_data_out.largo_mensaje
      +                          ; i++) {
  2578   00122C  6A39               	clrf	EnviarDato@i^0,c
  2579   00122E  EF28  F009         	goto	l1708
  2580   001232                     l1702:
  2581                           
  2582                           ;drivers/scr/API_MRF24J40.c: 728:   SetLongAddr(pos_memoria++, mrf24_data_out.buffer_sal
      +                          ida[i]);
  2583   001232  C03A  F02F         	movff	EnviarDato@pos_memoria,SetLongAddr@reg_address
  2584   001236  6A30               	clrf	(SetLongAddr@reg_address+1)^0,c
  2585   001238  5028               	movf	(_mrf24_data_out+5)^0,w,c
  2586   00123A  2439               	addwf	EnviarDato@i^0,w,c
  2587   00123C  6E34               	movwf	??_EnviarDato^0,c
  2588   00123E  C034  FFF6         	movff	??_EnviarDato,tblptrl
  2589   001242                     	if	0	;There is only one active tblptr byte
  2590   001242                     	endif
  2591   001242                     	if	0	;tblptru may be non-zero
  2592   001242                     	endif
  2593   001242                     	if	0	;tblptru may be non-zero
  2594   001242                     	endif
  2595   001242  0008               	tblrd		*
  2596   001244  CFF5 F031          	movff	tablat,SetLongAddr@value
  2597   001248  EC35  F00A         	call	_SetLongAddr	;wreg free
  2598   00124C  2A3A               	incf	EnviarDato@pos_memoria^0,f,c
  2599   00124E                     
  2600                           ;drivers/scr/API_MRF24J40.c: 729:  }
  2601   00124E  2A39               	incf	EnviarDato@i^0,f,c
  2602   001250                     l1708:
  2603   001250  5027               	movf	(_mrf24_data_out+4)^0,w,c
  2604   001252  6E34               	movwf	??_EnviarDato^0,c
  2605   001254  6A35               	clrf	(??_EnviarDato+1)^0,c
  2606   001256  C039  F036         	movff	EnviarDato@i,??_EnviarDato+2
  2607   00125A  6A37               	clrf	(??_EnviarDato+3)^0,c
  2608   00125C  BE36               	btfsc	(??_EnviarDato+2)^0,7,c
  2609   00125E  0637               	decf	(??_EnviarDato+3)^0,f,c
  2610   001260  5034               	movf	??_EnviarDato^0,w,c
  2611   001262  5C36               	subwf	(??_EnviarDato+2)^0,w,c
  2612   001264  5037               	movf	(??_EnviarDato+3)^0,w,c
  2613   001266  0A80               	xorlw	128
  2614   001268  6E38               	movwf	(??_EnviarDato+4)^0,c
  2615   00126A  5035               	movf	(??_EnviarDato+1)^0,w,c
  2616   00126C  0A80               	xorlw	128
  2617   00126E  5838               	subwfb	(??_EnviarDato+4)^0,w,c
  2618   001270  A0D8               	btfss	status,0,c
  2619   001272  EF3D  F009         	goto	u331
  2620   001276  EF3F  F009         	goto	u330
  2621   00127A                     u331:
  2622   00127A  EF19  F009         	goto	l1702
  2623   00127E                     u330:
  2624   00127E                     
  2625                           ;drivers/scr/API_MRF24J40.c: 730:  SetShortAddr((0x1B), (0X04) | (0X01));
  2626   00127E  0E05               	movlw	5
  2627   001280  6E2C               	movwf	SetShortAddr@value^0,c
  2628   001282  0E1B               	movlw	27
  2629   001284  ECC5  F00A         	call	_SetShortAddr
  2630   001288  0012               	return		;funcret
  2631   00128A                     __end_of_EnviarDato:
  2632                           	callstack 0
  2633                           
  2634 ;; *************** function _SetShortAddr *****************
  2635 ;; Defined at:
  2636 ;;		line 570 in file "drivers/scr/API_MRF24J40.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  reg_address     1    wreg     unsigned char 
  2639 ;;  value           1    2[COMRAM] unsigned char 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  reg_address     1    3[COMRAM] unsigned char 
  2642 ;; Return value:  Size  Location     Type
  2643 ;;                  1    wreg      void 
  2644 ;; Registers used:
  2645 ;;		wreg, status,2, status,0, cstack
  2646 ;; Tracked objects:
  2647 ;;		On entry : 0/0
  2648 ;;		On exit  : 0/0
  2649 ;;		Unchanged: 0/0
  2650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2651 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;Total ram usage:        2 bytes
  2656 ;; Hardware stack levels used: 1
  2657 ;; Hardware stack levels required when called: 2
  2658 ;; This function calls:
  2659 ;;		_SetCSPin
  2660 ;;		_WriteByteSPIPort
  2661 ;; This function is called by:
  2662 ;;		_MRF24J40Init
  2663 ;;		_SetChannel
  2664 ;;		_SetDeviceAddress
  2665 ;;		_SetDeviceMACAddress
  2666 ;;		_EnviarDato
  2667 ;;		_ReciboPaquete
  2668 ;;		_EnviarDatoEncriptado
  2669 ;;		_EnviarComando
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text18
  2674   00158A                     __ptext18:
  2675                           	callstack 0
  2676   00158A                     _SetShortAddr:
  2677                           	callstack 27
  2678                           
  2679                           ;incstack = 0
  2680                           ;SetShortAddr@reg_address stored from wreg
  2681   00158A  6E2D               	movwf	SetShortAddr@reg_address^0,c
  2682   00158C                     
  2683                           ;drivers/scr/API_MRF24J40.c: 572:     reg_address = (uint8_t) (reg_address << (0X01)) | 
      +                          (0x01);
  2684   00158C  80D8               	bsf	status,0,c
  2685   00158E  362D               	rlcf	SetShortAddr@reg_address^0,f,c
  2686   001590                     
  2687                           ;drivers/scr/API_MRF24J40.c: 573:     SetCSPin(0);
  2688   001590  0E00               	movlw	0
  2689   001592  EC2B  F00B         	call	_SetCSPin
  2690   001596                     
  2691                           ;drivers/scr/API_MRF24J40.c: 574:  WriteByteSPIPort(reg_address);
  2692   001596  502D               	movf	SetShortAddr@reg_address^0,w,c
  2693   001598  EC3C  F00B         	call	_WriteByteSPIPort
  2694   00159C                     
  2695                           ;drivers/scr/API_MRF24J40.c: 575:  WriteByteSPIPort(value);
  2696   00159C  502C               	movf	SetShortAddr@value^0,w,c
  2697   00159E  EC3C  F00B         	call	_WriteByteSPIPort
  2698   0015A2                     
  2699                           ;drivers/scr/API_MRF24J40.c: 576:     SetCSPin(1);
  2700   0015A2  0E01               	movlw	1
  2701   0015A4  EC2B  F00B         	call	_SetCSPin
  2702   0015A8  0012               	return		;funcret
  2703   0015AA                     __end_of_SetShortAddr:
  2704                           	callstack 0
  2705                           
  2706 ;; *************** function _SetLongAddr *****************
  2707 ;; Defined at:
  2708 ;;		line 601 in file "drivers/scr/API_MRF24J40.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  reg_address     2    5[COMRAM] unsigned short 
  2711 ;;  value           1    7[COMRAM] unsigned char 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;		None
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0, cstack
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2723 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;Total ram usage:        5 bytes
  2728 ;; Hardware stack levels used: 1
  2729 ;; Hardware stack levels required when called: 3
  2730 ;; This function calls:
  2731 ;;		_SetCSPin
  2732 ;;		_Write2ByteSPIPort
  2733 ;;		_WriteByteSPIPort
  2734 ;; This function is called by:
  2735 ;;		_MRF24J40Init
  2736 ;;		_SetChannel
  2737 ;;		_EnviarDato
  2738 ;;		_ReciboPaquete
  2739 ;;		_EnviarDatoEncriptado
  2740 ;;		_EnviarComando
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text19
  2745   00146A                     __ptext19:
  2746                           	callstack 0
  2747   00146A                     _SetLongAddr:
  2748                           	callstack 26
  2749   00146A                     
  2750                           ;drivers/scr/API_MRF24J40.c: 603:     reg_address = (reg_address << (0X05)) | (0X8010);
  2751   00146A  C02F  F032         	movff	SetLongAddr@reg_address,??_SetLongAddr
  2752   00146E  C030  F033         	movff	SetLongAddr@reg_address+1,??_SetLongAddr+1
  2753   001472  0E05               	movlw	5
  2754   001474                     u255:
  2755   001474  90D8               	bcf	status,0,c
  2756   001476  3632               	rlcf	??_SetLongAddr^0,f,c
  2757   001478  3633               	rlcf	(??_SetLongAddr+1)^0,f,c
  2758   00147A  2EE8               	decfsz	wreg,f,c
  2759   00147C  EF3A  F00A         	goto	u255
  2760   001480  0E10               	movlw	16
  2761   001482  1032               	iorwf	??_SetLongAddr^0,w,c
  2762   001484  6E2F               	movwf	SetLongAddr@reg_address^0,c
  2763   001486  0E80               	movlw	128
  2764   001488  1033               	iorwf	(??_SetLongAddr+1)^0,w,c
  2765   00148A  6E30               	movwf	(SetLongAddr@reg_address+1)^0,c
  2766   00148C                     
  2767                           ;drivers/scr/API_MRF24J40.c: 604:     SetCSPin(0);
  2768   00148C  0E00               	movlw	0
  2769   00148E  EC2B  F00B         	call	_SetCSPin
  2770   001492                     
  2771                           ;drivers/scr/API_MRF24J40.c: 605:     Write2ByteSPIPort(reg_address);
  2772   001492  C02F  F02D         	movff	SetLongAddr@reg_address,Write2ByteSPIPort@dato
  2773   001496  C030  F02E         	movff	SetLongAddr@reg_address+1,Write2ByteSPIPort@dato+1
  2774   00149A  EC1D  F00B         	call	_Write2ByteSPIPort	;wreg free
  2775   00149E                     
  2776                           ;drivers/scr/API_MRF24J40.c: 606:  WriteByteSPIPort(value);
  2777   00149E  5031               	movf	SetLongAddr@value^0,w,c
  2778   0014A0  EC3C  F00B         	call	_WriteByteSPIPort
  2779   0014A4                     
  2780                           ;drivers/scr/API_MRF24J40.c: 607:     SetCSPin(1);
  2781   0014A4  0E01               	movlw	1
  2782   0014A6  EC2B  F00B         	call	_SetCSPin
  2783   0014AA  0012               	return		;funcret
  2784   0014AC                     __end_of_SetLongAddr:
  2785                           	callstack 0
  2786                           
  2787 ;; *************** function _WriteByteSPIPort *****************
  2788 ;; Defined at:
  2789 ;;		line 80 in file "drivers/scr/API_MRF24J40_port.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  dato            1    wreg     unsigned char 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  dato            1    1[COMRAM] unsigned char 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		wreg, status,2, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;Total ram usage:        1 bytes
  2808 ;; Hardware stack levels used: 1
  2809 ;; Hardware stack levels required when called: 1
  2810 ;; This function calls:
  2811 ;;		_SPIWriteByte
  2812 ;; This function is called by:
  2813 ;;		_SetShortAddr
  2814 ;;		_GetShortAddr
  2815 ;;		_SetLongAddr
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text20
  2820   001678                     __ptext20:
  2821                           	callstack 0
  2822   001678                     _WriteByteSPIPort:
  2823                           	callstack 27
  2824                           
  2825                           ;incstack = 0
  2826                           ;WriteByteSPIPort@dato stored from wreg
  2827   001678  6E2B               	movwf	WriteByteSPIPort@dato^0,c
  2828   00167A                     
  2829                           ;drivers/scr/API_MRF24J40_port.c: 82:     SPIWriteByte(dato);
  2830   00167A  502B               	movf	WriteByteSPIPort@dato^0,w,c
  2831   00167C  ECE3  F00A         	call	_SPIWriteByte
  2832   001680  0012               	return		;funcret
  2833   001682                     __end_of_WriteByteSPIPort:
  2834                           	callstack 0
  2835                           
  2836 ;; *************** function _Write2ByteSPIPort *****************
  2837 ;; Defined at:
  2838 ;;		line 91 in file "drivers/scr/API_MRF24J40_port.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  dato            2    3[COMRAM] unsigned short 
  2841 ;; Auto vars:     Size  Location     Type
  2842 ;;		None
  2843 ;; Return value:  Size  Location     Type
  2844 ;;                  1    wreg      void 
  2845 ;; Registers used:
  2846 ;;		wreg, status,2, cstack
  2847 ;; Tracked objects:
  2848 ;;		On entry : 0/0
  2849 ;;		On exit  : 0/0
  2850 ;;		Unchanged: 0/0
  2851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;Total ram usage:        2 bytes
  2857 ;; Hardware stack levels used: 1
  2858 ;; Hardware stack levels required when called: 2
  2859 ;; This function calls:
  2860 ;;		_SPIWrite2Byte
  2861 ;; This function is called by:
  2862 ;;		_SetLongAddr
  2863 ;;		_GetLongAddr
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text21
  2868   00163A                     __ptext21:
  2869                           	callstack 0
  2870   00163A                     _Write2ByteSPIPort:
  2871                           	callstack 26
  2872   00163A                     
  2873                           ;drivers/scr/API_MRF24J40_port.c: 93:     SPIWrite2Byte(dato);
  2874   00163A  C02D  F02B         	movff	Write2ByteSPIPort@dato,SPIWrite2Byte@dato
  2875   00163E  C02E  F02C         	movff	Write2ByteSPIPort@dato+1,SPIWrite2Byte@dato+1
  2876   001642  EC24  F00B         	call	_SPIWrite2Byte	;wreg free
  2877   001646  0012               	return		;funcret
  2878   001648                     __end_of_Write2ByteSPIPort:
  2879                           	callstack 0
  2880                           
  2881 ;; *************** function _SPIWrite2Byte *****************
  2882 ;; Defined at:
  2883 ;;		line 62 in file "drivers/scr/drv_mspi_port.c"
  2884 ;; Parameters:    Size  Location     Type
  2885 ;;  dato            2    1[COMRAM] unsigned short 
  2886 ;; Auto vars:     Size  Location     Type
  2887 ;;		None
  2888 ;; Return value:  Size  Location     Type
  2889 ;;                  1    wreg      void 
  2890 ;; Registers used:
  2891 ;;		wreg, status,2, cstack
  2892 ;; Tracked objects:
  2893 ;;		On entry : 0/0
  2894 ;;		On exit  : 0/0
  2895 ;;		Unchanged: 0/0
  2896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2897 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;Total ram usage:        2 bytes
  2902 ;; Hardware stack levels used: 1
  2903 ;; Hardware stack levels required when called: 1
  2904 ;; This function calls:
  2905 ;;		_SPIWriteByte
  2906 ;; This function is called by:
  2907 ;;		_Write2ByteSPIPort
  2908 ;; This function uses a non-reentrant model
  2909 ;;
  2910                           
  2911                           	psect	text22
  2912   001648                     __ptext22:
  2913                           	callstack 0
  2914   001648                     _SPIWrite2Byte:
  2915                           	callstack 26
  2916   001648                     
  2917                           ;drivers/scr/drv_mspi_port.c: 64:     SPIWriteByte((uint8_t) (dato >> 8));
  2918   001648  502C               	movf	(SPIWrite2Byte@dato+1)^0,w,c
  2919   00164A  ECE3  F00A         	call	_SPIWriteByte
  2920                           
  2921                           ;drivers/scr/drv_mspi_port.c: 65:     SPIWriteByte((uint8_t) dato);
  2922   00164E  502B               	movf	SPIWrite2Byte@dato^0,w,c
  2923   001650  ECE3  F00A         	call	_SPIWriteByte
  2924   001654  0012               	return		;funcret
  2925   001656                     __end_of_SPIWrite2Byte:
  2926                           	callstack 0
  2927                           
  2928 ;; *************** function _SPIWriteByte *****************
  2929 ;; Defined at:
  2930 ;;		line 49 in file "drivers/scr/drv_mspi_port.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  dato            1    wreg     unsigned char 
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;  dato            1    0[COMRAM] unsigned char 
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      void 
  2937 ;; Registers used:
  2938 ;;		wreg
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;Total ram usage:        1 bytes
  2949 ;; Hardware stack levels used: 1
  2950 ;; This function calls:
  2951 ;;		Nothing
  2952 ;; This function is called by:
  2953 ;;		_SPIWrite2Byte
  2954 ;;		_WriteByteSPIPort
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           	psect	text23
  2959   0015C6                     __ptext23:
  2960                           	callstack 0
  2961   0015C6                     _SPIWriteByte:
  2962                           	callstack 27
  2963                           
  2964                           ;incstack = 0
  2965                           ;SPIWriteByte@dato stored from wreg
  2966   0015C6  6E2A               	movwf	SPIWriteByte@dato^0,c
  2967   0015C8                     
  2968                           ;drivers/scr/drv_mspi_port.c: 51:     PIR1bits.SSPIF = 0;
  2969   0015C8  969E               	bcf	158,3,c	;volatile
  2970   0015CA                     
  2971                           ;drivers/scr/drv_mspi_port.c: 52:     SSPBUF = dato;
  2972   0015CA  C02A  FFC9         	movff	SPIWriteByte@dato,4041	;volatile
  2973   0015CE                     l18:
  2974   0015CE  A69E               	btfss	158,3,c	;volatile
  2975   0015D0  EFEC  F00A         	goto	u221
  2976   0015D4  EFEE  F00A         	goto	u220
  2977   0015D8                     u221:
  2978   0015D8  EFE7  F00A         	goto	l18
  2979   0015DC                     u220:
  2980   0015DC  0012               	return		;funcret
  2981   0015DE                     __end_of_SPIWriteByte:
  2982                           	callstack 0
  2983                           
  2984 ;; *************** function _SetCSPin *****************
  2985 ;; Defined at:
  2986 ;;		line 38 in file "drivers/scr/API_MRF24J40_port.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  estado          1    wreg     _Bool 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  estado          1    0[COMRAM] _Bool 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;Total ram usage:        1 bytes
  3005 ;; Hardware stack levels used: 1
  3006 ;; This function calls:
  3007 ;;		Nothing
  3008 ;; This function is called by:
  3009 ;;		_InicializoPines
  3010 ;;		_SetShortAddr
  3011 ;;		_GetShortAddr
  3012 ;;		_SetLongAddr
  3013 ;;		_GetLongAddr
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text24
  3018   001656                     __ptext24:
  3019                           	callstack 0
  3020   001656                     _SetCSPin:
  3021                           	callstack 28
  3022                           
  3023                           ;incstack = 0
  3024                           ;SetCSPin@estado stored from wreg
  3025   001656  6E2A               	movwf	SetCSPin@estado^0,c
  3026   001658                     
  3027                           ;drivers/scr/API_MRF24J40_port.c: 40:     LATCbits.LATC6 = estado;
  3028   001658  B02A               	btfsc	SetCSPin@estado^0,0,c
  3029   00165A  D002               	bra	u245
  3030   00165C  9C8B               	bcf	139,6,c	;volatile
  3031   00165E  D001               	bra	u246
  3032   001660                     u245:
  3033   001660  8C8B               	bsf	139,6,c	;volatile
  3034   001662                     u246:
  3035   001662  0012               	return		;funcret
  3036   001664                     __end_of_SetCSPin:
  3037                           	callstack 0
  3038                           
  3039 ;; *************** function _BoardInit *****************
  3040 ;; Defined at:
  3041 ;;		line 21 in file "hardware_config.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      void 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2, cstack
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;Total ram usage:        0 bytes
  3060 ;; Hardware stack levels used: 1
  3061 ;; Hardware stack levels required when called: 1
  3062 ;; This function calls:
  3063 ;;		_SPIInit
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text25
  3070   0013E4                     __ptext25:
  3071                           	callstack 0
  3072   0013E4                     _BoardInit:
  3073                           	callstack 29
  3074   0013E4                     
  3075                           ;hardware_config.c: 23:     PORTA = 0;
  3076   0013E4  6A80               	clrf	128,c	;volatile
  3077                           
  3078                           ;hardware_config.c: 24:     PORTB = 0;
  3079   0013E6  6A81               	clrf	129,c	;volatile
  3080                           
  3081                           ;hardware_config.c: 25:     PORTC = 0;
  3082   0013E8  6A82               	clrf	130,c	;volatile
  3083                           
  3084                           ;hardware_config.c: 26:     PORTD = 0;
  3085   0013EA  6A83               	clrf	131,c	;volatile
  3086                           
  3087                           ;hardware_config.c: 27:     PORTE = 0;
  3088   0013EC  6A84               	clrf	132,c	;volatile
  3089                           
  3090                           ;hardware_config.c: 30:     TRISBbits.TRISB6 = 1;
  3091   0013EE  8C93               	bsf	147,6,c	;volatile
  3092                           
  3093                           ;hardware_config.c: 31:     TRISBbits.TRISB7 = 1;
  3094   0013F0  8E93               	bsf	147,7,c	;volatile
  3095                           
  3096                           ;hardware_config.c: 32:     TRISEbits.TRISE2 = 0;
  3097   0013F2  9496               	bcf	150,2,c	;volatile
  3098                           
  3099                           ;hardware_config.c: 33:     TRISEbits.TRISE0 = 0;
  3100   0013F4  9096               	bcf	150,0,c	;volatile
  3101                           
  3102                           ;hardware_config.c: 34:     TRISEbits.TRISE1 = 0;
  3103   0013F6  9296               	bcf	150,1,c	;volatile
  3104                           
  3105                           ;hardware_config.c: 35:     LATEbits.LATE2 = 1;
  3106   0013F8  848D               	bsf	141,2,c	;volatile
  3107                           
  3108                           ;hardware_config.c: 36:     LATEbits.LATE0 = 1;
  3109   0013FA  808D               	bsf	141,0,c	;volatile
  3110                           
  3111                           ;hardware_config.c: 37:     LATEbits.LATE1 = 1;
  3112   0013FC  828D               	bsf	141,1,c	;volatile
  3113                           
  3114                           ;hardware_config.c: 40:  GIE = 0;
  3115   0013FE  9EF2               	bcf	4082,7,c	;volatile
  3116                           
  3117                           ;hardware_config.c: 41:  PEIE = 0;
  3118   001400  9CF2               	bcf	4082,6,c	;volatile
  3119                           
  3120                           ;hardware_config.c: 42:  RBIE = 0;
  3121   001402  96F2               	bcf	4082,3,c	;volatile
  3122                           
  3123                           ;hardware_config.c: 43:  T0IE = 0;
  3124   001404  9AF2               	bcf	4082,5,c	;volatile
  3125                           
  3126                           ;hardware_config.c: 44:  TMR1IE = 0;
  3127   001406  909D               	bcf	3997,0,c	;volatile
  3128                           
  3129                           ;hardware_config.c: 45:  TMR2IE = 0;
  3130   001408  929D               	bcf	3997,1,c	;volatile
  3131                           
  3132                           ;hardware_config.c: 46:  CCP1IE = 0;
  3133   00140A  949D               	bcf	3997,2,c	;volatile
  3134                           
  3135                           ;hardware_config.c: 47:  CCP2IE = 0;
  3136   00140C  90A0               	bcf	4000,0,c	;volatile
  3137                           
  3138                           ;hardware_config.c: 48:  EEIE = 0;
  3139   00140E  98A0               	bcf	4000,4,c	;volatile
  3140                           
  3141                           ;hardware_config.c: 49:  SSPIE = 0;
  3142   001410  969D               	bcf	3997,3,c	;volatile
  3143                           
  3144                           ;hardware_config.c: 50:  BCLIE = 0;
  3145   001412  96A0               	bcf	4000,3,c	;volatile
  3146                           
  3147                           ;hardware_config.c: 51:  ADIE = 0;
  3148   001414  9C9D               	bcf	3997,6,c	;volatile
  3149                           
  3150                           ;hardware_config.c: 52:  RBIE = 0;
  3151   001416  96F2               	bcf	4082,3,c	;volatile
  3152                           
  3153                           ;hardware_config.c: 53:  RCIE = 0;
  3154   001418  9A9D               	bcf	3997,5,c	;volatile
  3155   00141A                     
  3156                           ;hardware_config.c: 54:     OSCCON = 0b01110010;
  3157   00141A  0E72               	movlw	114
  3158   00141C  6ED3               	movwf	211,c	;volatile
  3159                           
  3160                           ;hardware_config.c: 55:     OSCTUNE = 0b11011111;
  3161   00141E  0EDF               	movlw	223
  3162   001420  6E9B               	movwf	155,c	;volatile
  3163   001422                     
  3164                           ;hardware_config.c: 58:     SPIInit();
  3165   001422  ECEF  F00A         	call	_SPIInit	;wreg free
  3166   001426  0012               	return		;funcret
  3167   001428                     __end_of_BoardInit:
  3168                           	callstack 0
  3169                           
  3170 ;; *************** function _SPIInit *****************
  3171 ;; Defined at:
  3172 ;;		line 29 in file "drivers/scr/drv_mspi_port.c"
  3173 ;; Parameters:    Size  Location     Type
  3174 ;;		None
  3175 ;; Auto vars:     Size  Location     Type
  3176 ;;		None
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;Total ram usage:        0 bytes
  3191 ;; Hardware stack levels used: 1
  3192 ;; This function calls:
  3193 ;;		Nothing
  3194 ;; This function is called by:
  3195 ;;		_BoardInit
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text26
  3200   0015DE                     __ptext26:
  3201                           	callstack 0
  3202   0015DE                     _SPIInit:
  3203                           	callstack 29
  3204   0015DE                     
  3205                           ;drivers/scr/drv_mspi_port.c: 31:     TRISCbits.TRISC3 = 0;
  3206   0015DE  9694               	bcf	148,3,c	;volatile
  3207                           
  3208                           ;drivers/scr/drv_mspi_port.c: 32:     TRISCbits.TRISC5 = 0;
  3209   0015E0  9A94               	bcf	148,5,c	;volatile
  3210                           
  3211                           ;drivers/scr/drv_mspi_port.c: 33:     TRISCbits.TRISC4 = 1;
  3212   0015E2  8894               	bsf	148,4,c	;volatile
  3213                           
  3214                           ;drivers/scr/drv_mspi_port.c: 34:     SSPSTATbits.SMP = 1;
  3215   0015E4  8EC7               	bsf	199,7,c	;volatile
  3216                           
  3217                           ;drivers/scr/drv_mspi_port.c: 35:  SSPSTATbits.CKE = 1;
  3218   0015E6  8CC7               	bsf	199,6,c	;volatile
  3219   0015E8                     
  3220                           ;drivers/scr/drv_mspi_port.c: 36:     SSPCON1 = 0X00 | 0X01;
  3221   0015E8  0E01               	movlw	1
  3222   0015EA  6EC6               	movwf	198,c	;volatile
  3223   0015EC                     
  3224                           ;drivers/scr/drv_mspi_port.c: 37:  SSPCON1bits.WCOL = 1;
  3225   0015EC  8EC6               	bsf	198,7,c	;volatile
  3226   0015EE                     
  3227                           ;drivers/scr/drv_mspi_port.c: 38:  SSPCON1bits.SSPOV = 0;
  3228   0015EE  9CC6               	bcf	198,6,c	;volatile
  3229   0015F0                     
  3230                           ;drivers/scr/drv_mspi_port.c: 39:  SSPCON1bits.SSPEN = 1;
  3231   0015F0  8AC6               	bsf	198,5,c	;volatile
  3232   0015F2                     
  3233                           ;drivers/scr/drv_mspi_port.c: 40:  SSPCON1bits.CKP = 0;
  3234   0015F2  98C6               	bcf	198,4,c	;volatile
  3235   0015F4  0012               	return		;funcret
  3236   0015F6                     __end_of_SPIInit:
  3237                           	callstack 0
  3238                           
  3239                           	psect	rparam
  3240   000001                     ___rparam_used  equ	1
  3241   000000                     ___param_bank   equ	0
  3242   000000                     __Lparam        equ	__Lrparam
  3243   000000                     __Hparam        equ	__Hrparam
  3244                           
  3245                           	psect	idloc
  3246                           
  3247                           ;Config register IDLOC0 @ 0x200000
  3248                           ;	unspecified, using default values
  3249   200000                     	org	2097152
  3250   200000  FF                 	db	255
  3251                           
  3252                           ;Config register IDLOC1 @ 0x200001
  3253                           ;	unspecified, using default values
  3254   200001                     	org	2097153
  3255   200001  FF                 	db	255
  3256                           
  3257                           ;Config register IDLOC2 @ 0x200002
  3258                           ;	unspecified, using default values
  3259   200002                     	org	2097154
  3260   200002  FF                 	db	255
  3261                           
  3262                           ;Config register IDLOC3 @ 0x200003
  3263                           ;	unspecified, using default values
  3264   200003                     	org	2097155
  3265   200003  FF                 	db	255
  3266                           
  3267                           ;Config register IDLOC4 @ 0x200004
  3268                           ;	unspecified, using default values
  3269   200004                     	org	2097156
  3270   200004  FF                 	db	255
  3271                           
  3272                           ;Config register IDLOC5 @ 0x200005
  3273                           ;	unspecified, using default values
  3274   200005                     	org	2097157
  3275   200005  FF                 	db	255
  3276                           
  3277                           ;Config register IDLOC6 @ 0x200006
  3278                           ;	unspecified, using default values
  3279   200006                     	org	2097158
  3280   200006  FF                 	db	255
  3281                           
  3282                           ;Config register IDLOC7 @ 0x200007
  3283                           ;	unspecified, using default values
  3284   200007                     	org	2097159
  3285   200007  FF                 	db	255
  3286                           
  3287                           	psect	config
  3288                           
  3289                           ; Padding undefined space
  3290   300000                     	org	3145728
  3291   300000  FF                 	db	255
  3292                           
  3293                           ;Config register CONFIG1H @ 0x300001
  3294                           ;	Oscillator Selection bits
  3295                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  3296                           ;	Fail-Safe Clock Monitor Enable bit
  3297                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3298                           ;	Internal/External Oscillator Switchover bit
  3299                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3300   300001                     	org	3145729
  3301   300001  08                 	db	8
  3302                           
  3303                           ;Config register CONFIG2L @ 0x300002
  3304                           ;	Power-up Timer Enable bit
  3305                           ;	PWRTEN = OFF, PWRT disabled
  3306                           ;	Brown-out Reset Enable bits
  3307                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  3308                           ;	Brown Out Reset Voltage bits
  3309                           ;	BORV = 22, VBOR set to 2.2 V nominal
  3310   300002                     	org	3145730
  3311   300002  11                 	db	17
  3312                           
  3313                           ;Config register CONFIG2H @ 0x300003
  3314                           ;	Watchdog Timer Enable bit
  3315                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  3316                           ;	Watchdog Timer Postscale Select bits
  3317                           ;	WDTPS = 8192, 1:8192
  3318   300003                     	org	3145731
  3319   300003  1A                 	db	26
  3320                           
  3321                           ; Padding undefined space
  3322   300004                     	org	3145732
  3323   300004  FF                 	db	255
  3324                           
  3325                           ;Config register CONFIG3H @ 0x300005
  3326                           ;	CCP2 MUX bit
  3327                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  3328                           ;	PORTB A/D Enable bit
  3329                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3330                           ;	Low-Power Timer1 Oscillator Enable bit
  3331                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3332                           ;	HFINTOSC Fast Start-up
  3333                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
  3334                           ;	MCLR Pin Enable bit
  3335                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  3336   300005                     	org	3145733
  3337   300005  01                 	db	1
  3338                           
  3339                           ;Config register CONFIG4L @ 0x300006
  3340                           ;	Stack Full/Underflow Reset Enable bit
  3341                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  3342                           ;	Single-Supply ICSP Enable bit
  3343                           ;	LVP = OFF, Single-Supply ICSP disabled
  3344                           ;	Extended Instruction Set Enable bit
  3345                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3346                           ;	Background Debugger Enable bit
  3347                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  3348   300006                     	org	3145734
  3349   300006  80                 	db	128
  3350                           
  3351                           ; Padding undefined space
  3352   300007                     	org	3145735
  3353   300007  FF                 	db	255
  3354                           
  3355                           ;Config register CONFIG5L @ 0x300008
  3356                           ;	Code Protection Block 0
  3357                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  3358                           ;	Code Protection Block 1
  3359                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  3360                           ;	Code Protection Block 2
  3361                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  3362                           ;	Code Protection Block 3
  3363                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  3364   300008                     	org	3145736
  3365   300008  0F                 	db	15
  3366                           
  3367                           ;Config register CONFIG5H @ 0x300009
  3368                           ;	Boot Block Code Protection bit
  3369                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  3370                           ;	Data EEPROM Code Protection bit
  3371                           ;	CPD = OFF, Data EEPROM not code-protected
  3372   300009                     	org	3145737
  3373   300009  C0                 	db	192
  3374                           
  3375                           ;Config register CONFIG6L @ 0x30000A
  3376                           ;	Write Protection Block 0
  3377                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  3378                           ;	Write Protection Block 1
  3379                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  3380                           ;	Write Protection Block 2
  3381                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  3382                           ;	Write Protection Block 3
  3383                           ;	WRT3 = OFF, Block 3 (00C000h-00FFFFh) not write-protected
  3384   30000A                     	org	3145738
  3385   30000A  0F                 	db	15
  3386                           
  3387                           ;Config register CONFIG6H @ 0x30000B
  3388                           ;	Configuration Register Write Protection bit
  3389                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  3390                           ;	Boot Block Write Protection bit
  3391                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  3392                           ;	Data EEPROM Write Protection bit
  3393                           ;	WRTD = OFF, Data EEPROM not write-protected
  3394   30000B                     	org	3145739
  3395   30000B  E0                 	db	224
  3396                           
  3397                           ;Config register CONFIG7L @ 0x30000C
  3398                           ;	unspecified, using default values
  3399                           ;	Table Read Protection Block 0
  3400                           ;	EBTR0 = 0x1, unprogrammed default
  3401                           ;	Table Read Protection Block 1
  3402                           ;	EBTR1 = 0x1, unprogrammed default
  3403                           ;	Table Read Protection Block 2
  3404                           ;	EBTR2 = 0x1, unprogrammed default
  3405                           ;	Table Read Protection Block 3
  3406                           ;	EBTR3 = 0x1, unprogrammed default
  3407   30000C                     	org	3145740
  3408   30000C  0F                 	db	15
  3409                           
  3410                           ;Config register CONFIG7H @ 0x30000D
  3411                           ;	Boot Block Table Read Protection bit
  3412                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  3413   30000D                     	org	3145741
  3414   30000D  40                 	db	64
  3415                           tosu	equ	0xFFF
  3416                           tosh	equ	0xFFE
  3417                           tosl	equ	0xFFD
  3418                           stkptr	equ	0xFFC
  3419                           pclatu	equ	0xFFB
  3420                           pclath	equ	0xFFA
  3421                           pcl	equ	0xFF9
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           indf0	equ	0xFEF
  3429                           postinc0	equ	0xFEE
  3430                           postdec0	equ	0xFED
  3431                           preinc0	equ	0xFEC
  3432                           plusw0	equ	0xFEB
  3433                           fsr0h	equ	0xFEA
  3434                           fsr0l	equ	0xFE9
  3435                           wreg	equ	0xFE8
  3436                           indf1	equ	0xFE7
  3437                           postinc1	equ	0xFE6
  3438                           postdec1	equ	0xFE5
  3439                           preinc1	equ	0xFE4
  3440                           plusw1	equ	0xFE3
  3441                           fsr1h	equ	0xFE2
  3442                           fsr1l	equ	0xFE1
  3443                           bsr	equ	0xFE0
  3444                           indf2	equ	0xFDF
  3445                           postinc2	equ	0xFDE
  3446                           postdec2	equ	0xFDD
  3447                           preinc2	equ	0xFDC
  3448                           plusw2	equ	0xFDB
  3449                           fsr2h	equ	0xFDA
  3450                           fsr2l	equ	0xFD9
  3451                           status	equ	0xFD8

Data Sizes:
    Strings     12
    Constant    24
    Data        0
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      60
    BANK0           160      0      56
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    mrf24_data_out$buffer_salida	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 

    S755$buffer_salida	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 

    SetMensajeSalida@mensaje	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 

    sp__GetMensajeEntrada	PTR unsigned char  size(1) Largest target is 56
		 -> mrf24_data_in(BANK0[56]), mrf24_data_in$buffer_entrada(BANK0[50]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_EnviarDato
    _SetMensajeSalida->_strlen
    _MRF24J40Init->_SetChannel
    _SetDeviceMACAddress->_SetShortAddr
    _SetDeviceAddress->_SetShortAddr
    _SetChannel->_SetLongAddr
    _InicializoPines->_SetCSPin
    _InicializoPines->_SetResetPin
    _InicializoPines->_SetWakePin
    _GetShortAddr->_WriteByteSPIPort
    _GetLongAddr->_Write2ByteSPIPort
    _EnviarDato->_SetLongAddr
    _SetShortAddr->_WriteByteSPIPort
    _SetLongAddr->_Write2ByteSPIPort
    _WriteByteSPIPort->_SPIWriteByte
    _Write2ByteSPIPort->_SPIWrite2Byte
    _SPIWrite2Byte->_SPIWriteByte

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3217
                                             17 COMRAM     2     2      0
                          _BoardInit
                         _EnviarDato
                       _MRF24J40Init
                _SetDireccionDestino
                   _SetMensajeSalida
                    _SetPANIDDestino
 ---------------------------------------------------------------------------------
 (1) _SetPANIDDestino                                      2     0      2      23
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SetMensajeSalida                                     1     0      1     136
                                              3 COMRAM     1     0      1
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               3     1      2      91
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _SetDireccionDestino                                  2     0      2      23
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _MRF24J40Init                                         2     2      0    2173
                                             11 COMRAM     2     2      0
                        _GetLongAddr
                       _GetShortAddr
                    _InicializoPines
                _InicializoVariables
                         _SetChannel
                   _SetDeviceAddress
                _SetDeviceMACAddress
                        _SetLongAddr
                        _SetResetPin
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (2) _SetDeviceMACAddress                                  2     2      0     258
                                              4 COMRAM     2     2      0
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (2) _SetDeviceAddress                                     0     0      0     190
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (2) _SetChannel                                           1     1      0     540
                                             10 COMRAM     1     1      0
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (2) _InicializoVariables                                  3     3      0     156
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _InicializoPines                                      0     0      0      59
                           _SetCSPin
                        _SetResetPin
                         _SetWakePin
 ---------------------------------------------------------------------------------
 (3) _SetWakePin                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SetResetPin                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GetShortAddr                                         2     2      0     171
                                              2 COMRAM     2     2      0
                    _ReadByteSPIPort
                           _SetCSPin
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (2) _GetLongAddr                                          5     3      2     198
                                              5 COMRAM     5     3      2
                    _ReadByteSPIPort
                           _SetCSPin
                  _Write2ByteSPIPort
 ---------------------------------------------------------------------------------
 (3) _ReadByteSPIPort                                      0     0      0       0
                            _SPIRead
 ---------------------------------------------------------------------------------
 (4) _SPIRead                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EnviarDato                                           8     8      0     862
                                             10 COMRAM     7     7      0
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (2) _SetShortAddr                                         2     1      1     190
                                              2 COMRAM     2     1      1
                           _SetCSPin
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (2) _SetLongAddr                                          5     2      3     350
                                              5 COMRAM     5     2      3
                           _SetCSPin
                  _Write2ByteSPIPort
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (3) _WriteByteSPIPort                                     1     1      0      58
                                              1 COMRAM     1     1      0
                       _SPIWriteByte
 ---------------------------------------------------------------------------------
 (3) _Write2ByteSPIPort                                    2     0      2      98
                                              3 COMRAM     2     0      2
                      _SPIWrite2Byte
 ---------------------------------------------------------------------------------
 (4) _SPIWrite2Byte                                        2     0      2      74
                                              1 COMRAM     2     0      2
                       _SPIWriteByte
 ---------------------------------------------------------------------------------
 (4) _SPIWriteByte                                         1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetCSPin                                             1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _BoardInit                                            0     0      0       0
                            _SPIInit
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BoardInit
     _SPIInit
   _EnviarDato
     _SetLongAddr
       _SetCSPin
       _Write2ByteSPIPort
         _SPIWrite2Byte
           _SPIWriteByte
       _WriteByteSPIPort
         _SPIWriteByte
     _SetShortAddr
       _SetCSPin
       _WriteByteSPIPort
   _MRF24J40Init
     _GetLongAddr
       _ReadByteSPIPort
         _SPIRead
       _SetCSPin
       _Write2ByteSPIPort
     _GetShortAddr
       _ReadByteSPIPort
       _SetCSPin
       _WriteByteSPIPort
     _InicializoPines
       _SetCSPin
       _SetResetPin
       _SetWakePin
     _InicializoVariables
     _SetChannel
       _SetLongAddr
       _SetShortAddr
     _SetDeviceAddress
       _SetShortAddr
     _SetDeviceMACAddress
       _SetShortAddr
     _SetLongAddr
     _SetResetPin
     _SetShortAddr
   _SetDireccionDestino
   _SetMensajeSalida
     _strlen
   _SetPANIDDestino

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3935      0       0      0.0%
BITBANK14          256      0       0      0.0%
BANK14             256      0       0      0.0%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0      56     35.0%
BITBIGSFRh          98      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BITCOMRAM           95      0       0      0.0%
COMRAM              95     19      60     63.2%
BITBIGSFRlll        32      0       0      0.0%
BITBIGSFRlh         16      0       0      0.0%
BITBIGSFRllh        11      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     116      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Apr 18 14:19:42 2025

                 _SSPSTATbits 0FC7                            l21 15DC                            l30 160A  
                          l15 15F4                            l24 1654                            l18 15CE  
                          l27 15FA                            l51 135A                            u45 1628  
                          u46 162A                            u55 1636                            u56 1638  
               ?_MRF24J40Init 002A                           l105 1426                           l211 12C6  
                         l132 15C4                           l212 1330                           l221 14AA  
                         l141 1638                           l150 1646                           l230 153C  
                         l206 118E                           l135 1662                           l215 15A8  
                         l224 13E2                           l153 1686                           l241 1676  
                         l250 1288                           l218 1588                           l138 162A  
                         l147 1680                           l227 14E2                           l235 1468  
                         l244 166C                           l238 161C                           l990 162E  
                         l958 1512                           l986 1620                           _GIE 7F97  
                         u220 15DC                           u300 1506                           u221 15D8  
                         u301 1502                           u230 1608                           u310 1080  
                         u231 1604                           u311 107C                           u320 1156  
                         u321 1152                           u330 127E                           u331 127A  
                         u260 12AE                           u340 136E                           u245 1660  
                         u261 12AA                           u341 1366                           u246 1662  
                         u270 12FE                           u255 1474                           u271 12FA  
                         u407 1384                           u280 1468                           u281 1464  
                         u417 1034                           u427 104C                           u437 1086  
                         u358 1370                           u295 13AA                           u447 14D6  
                         wreg 0FE8           __end_of_GetLongAddr 13E4                          l1030 15F0  
                        l1022 15DE                          l1032 15F2                          l1024 15E8  
                        l1026 15EC                          l1028 15EE                          l1132 13E4  
                        l1134 141A                          l1136 1422                          l1500 15AA  
                        l1502 15B2                          l1520 12FE                          l1512 1292  
                        l1600 102E                          l1450 1648                          l1522 1306  
                        l1514 12AE                          l1506 128A                          l1610 106A  
                        l1602 1040                          l1460 1658                          l1700 122C  
                        l1540 157A                          l1532 1566                          l1524 1308  
                        l1516 12DE                          l1620 10A4                          l1612 1080  
                        l1604 1046                          l1446 15C8                          l1710 127E  
                        l1702 1232                          l1454 15F6                          l1542 1580  
                        l1534 1566                          l1526 132C                          l1518 12E2  
                        l1630 10F4                          l1622 10B4                          l1614 1092  
                        l1606 1058                          l1448 15CA                          l1464 167A  
                        l1480 1596                          l1704 124C                          l1456 1608  
                        l1472 1682                          l1544 1586                          l1536 156E  
                        l1528 132E                          l1560 1446                          l1552 1428  
                        l1640 112C                          l1632 1104                          l1624 10C4  
                        l1616 109C                          l1608 1062                          l1720 1342  
                        l1490 148C                          l1482 159C                          l1706 124E  
                        l1570 13C8                          l1538 1574                          l1562 1448  
                        l1642 1136                          l1634 110E                          l1626 10D4  
                        l1618 10A0                          l1650 160C                          l1722 134E  
                        l1714 1332                          l1468 163A                          l1492 1492  
                        l1484 15A2                          l1476 158C                          l1708 1250  
                        l1660 1190                          l1572 13D4                          l1580 14AC  
                        l1548 1514                          l1564 144C                          l1644 1144  
                        l1636 1118                          l1628 10E4                          l1652 1610  
                        l1724 135C                          l1716 1336                          l1494 149E  
                        l1478 1590                          l1670 11B4                          l1662 1192  
                        l1574 13DA                          l1566 13A0                          l1582 14D0  
                        l1558 1434                          l1646 1156                          l1638 1122  
                        l1590 14EE                          l1726 137A                          l1718 133A  
                        l1496 14A4                          l1488 146A                          l1680 11D6  
                        l1672 11B6                          l1664 1192                          l1576 13E0  
                        l1568 13C2                          l1656 166E                          l1592 1506  
                        l1728 1394                          l1690 120A                          l1682 11EA  
                        l1674 11C4                          l1666 11A2                          l1586 14E4  
                        l1658 1664                          l1692 120C                          l1684 11EC  
                        l1676 11C6                          l1668 11A4                          l1596 1026  
                        l1588 14EC                          l1694 121A                          l1686 11FA  
                        l1678 11D4                          l1598 102A                          l1696 121C  
                        l1688 11FC                          l1698 122A                          _ADIE 7CEE  
                        _EEIE 7D04                          STR_1 1019                          _T0IE 7F95  
                        _PEIE 7F96                          _RBIE 7F93                          _RCIE 7CED  
                _SPIWriteByte 15C6                          _main 1332               __end_of_SPIInit 15F6  
             __end_of_SPIRead 160C                          fsr2h 0FDA                          indf2 0FDF  
                        fsr2l 0FD9                   EnviarDato@i 0039       GetShortAddr@reg_address 002D  
                        start 0000                  ___param_bank 0000              _long_mac_address 0029  
           ??_ReadByteSPIPort 002A                ??_MRF24J40Init 0035   __end_of_InicializoVariables 1332  
               _SPIWrite2Byte 1648                         ?_main 002A                         _BCLIE 7D03  
        SetDeviceMACAddress@i 002E                         _PORTA 0F80                         _PORTB 0F81  
                       _PORTC 0F82                         _PORTD 0F83                         _PORTE 0F84  
                       _SSPIE 7CEB          __end_of_GetShortAddr 158A               _InicializoPines 15AA  
     SetShortAddr@reg_address 002D           MRF24J40Init@lectura 0036                         tablat 0FF5  
                       status 0FD8                    _EnviarDato 1190           _SetDeviceMACAddress 1428  
             __initialization 153E                  __end_of_main 13A0                ?_SPIWrite2Byte 002B  
            __end_of_SetCSPin 1664                   _GetLongAddr 13A0                 ??_SetLongAddr 0032  
                      ??_main 003B                 __activetblptr 0001                 ??_SetResetPin 002A  
        ?_SetDeviceMACAddress 002A                    _SetChannel 14AC             ?_SetDeviceAddress 002A  
                      _CCP1IE 7CEA                        _CCP2IE 7D00                     ??_SPIInit 002A  
                   ??_SPIRead 002A            ??_SetDeviceAddress 002E                    _SetWakePin 161E  
                      _OSCCON 0FD3                        _TMR1IE 7CE8                        _TMR2IE 7CE9  
__end_of_default_security_key 1011                        _SSPBUF 0FC9                        clear_0 1544  
                      clear_1 1550                        isa$std 0001                SetCSPin@estado 002A  
     __end_of_InicializoPines 15C6                        _strlen 14E4         ??_SetDeviceMACAddress 002E  
        InicializoVariables@i 002B                  __mediumconst 0000             _mrf24_data_config 0001  
                      tblptrh 0FF7                        tblptrl 0FF6                        tblptru 0FF8  
         __end_of_SetLongAddr 14AC           __end_of_SetResetPin 163A         GetShortAddr@leido_spi 002C  
        __end_of_MRF24J40Init 1190              _SetMensajeSalida 160C                    __accesstop 0060  
     __end_of__initialization 1556             __end_of_BoardInit 1428                   ?_EnviarDato 002A  
               ___rparam_used 0001              SetWakePin@estado 002A                 ?_SetShortAddr 002C  
              __pcstackCOMRAM 002A               ??_SPIWrite2Byte 002D                   ?_SetChannel 002A  
                  __pbssBANK0 0060   __end_of_SetDireccionDestino 1678                   ?_SetWakePin 002A  
                   ?_SetCSPin 002A               _ReadByteSPIPort 1682                  _GetShortAddr 1564  
              ??_SetShortAddr 002D             ??_SetPANIDDestino 002C                   _SetLongAddr 146A  
                     ?_strlen 002A              ?_InicializoPines 002A          _default_security_key 1001  
                 _SetResetPin 162C                       _OSCTUNE 0F9B                       _SSPCON1 0FC6  
                     _SPIInit 15DE                       _SPIRead 15F6                    ??_SetCSPin 002A  
           SetShortAddr@value 002C                       __Hparam 0000                       __Lparam 0000  
                __psmallconst 1000                       __pcinit 153E                  ?_GetLongAddr 002F  
                     __ramtop 1000                       __ptext0 1332                       __ptext1 1664  
                     __ptext2 160C                       __ptext3 14E4                       __ptext4 166E  
                     __ptext5 1026                       __ptext6 1428                       __ptext7 1514  
                     __ptext8 14AC                       __ptext9 128A         EnviarDato@pos_memoria 003A  
            _WriteByteSPIPort 1678       __end_of_ReadByteSPIPort 1688          end_of_initialization 1556  
         _default_mac_address 1011                       postinc0 0FEE                       strlen@a 002C  
                     strlen@s 002A                  _MRF24J40Init 1026      __end_of_SetMensajeSalida 161E  
        WriteByteSPIPort@dato 002B                     _TRISBbits 0F93                     _TRISCbits 0F94  
                   _TRISDbits 0F95                     _TRISEbits 0F96          __end_of_SetShortAddr 15AA  
       Write2ByteSPIPort@dato 002D          GetLongAddr@respuesta 0033                  ??_EnviarDato 0034  
                   _BoardInit 13E4             _Write2ByteSPIPort 163A   __end_of_SetDeviceMACAddress 146A  
          ?_Write2ByteSPIPort 002D                __end_of_strlen 1514                  ??_SetChannel 0034  
         start_initialization 153E            __end_of_EnviarDato 128A           ??_Write2ByteSPIPort 002F  
            ?_ReadByteSPIPort 002A          SetPANIDDestino@panid 002A               _SetPANIDDestino 1664  
               ?_SPIWriteByte 002A                  ??_SetWakePin 002A                    ?_BoardInit 002A  
   __end_of_Write2ByteSPIPort 1648            __end_of_SetChannel 14E4         __end_of_SPIWrite2Byte 1656  
                ?_SetLongAddr 002F                      ??_strlen 002C            __end_of_SetWakePin 162C  
                ?_SetResetPin 002A                   __pbssCOMRAM 0001       SetMensajeSalida@mensaje 002D  
                    ?_SPIInit 002A                      ?_SPIRead 002A                ??_SPIWriteByte 002A  
            SPIWriteByte@dato 002A              _SetDeviceAddress 1514           _InicializoVariables 128A  
    __end_of_WriteByteSPIPort 1682             SetResetPin@estado 002A                   __smallconst 1000  
     __end_of_SetPANIDDestino 166E          ?_InicializoVariables 002A              SetLongAddr@value 0031  
                    _LATBbits 0F8A                      _LATCbits 0F8B                      _LATDbits 0F8C  
                    _LATEbits 0F8D                   ??_BoardInit 002A                      _PIR1bits 0F9E  
                _SetShortAddr 158A             ?_SetMensajeSalida 002D         ??_InicializoVariables 002A  
          ??_SetMensajeSalida 002E  SetDireccionDestino@direccion 002A                _mrf24_data_out 0023  
                    _SetCSPin 1656                      __Hrparam 0000                      __Lrparam 0000  
                __Lsmallconst 1000          __end_of_SPIWriteByte 15DE              ?_SetPANIDDestino 002A  
                    __ptext10 15AA                      __ptext11 161E                      __ptext20 1678  
                    __ptext12 162C                      __ptext21 163A                      __ptext13 1564  
                    __ptext22 1648                      __ptext14 13A0                      __ptext23 15C6  
                    __ptext15 1682                      __ptext24 1656                      __ptext16 15F6  
                    __ptext25 13E4                      __ptext17 1190                      __ptext26 15DE  
                    __ptext18 158A                      __ptext19 146A             ??_InicializoPines 002B  
               ?_GetShortAddr 002A                      isa$xinst 0000   __end_of_default_mac_address 1019  
               _mrf24_data_in 0060      __end_of_SetDeviceAddress 153E           _SetDireccionDestino 166E  
              ??_GetShortAddr 002C          ?_SetDireccionDestino 002A             ?_WriteByteSPIPort 002A  
               ??_GetLongAddr 0031            ??_WriteByteSPIPort 002B        GetLongAddr@reg_address 002F  
                 _SSPCON1bits 0FC6             SPIWrite2Byte@dato 002B        SetLongAddr@reg_address 002F  
       ??_SetDireccionDestino 002C  
