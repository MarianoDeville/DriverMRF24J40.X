

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Aug 07 14:46:58 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F46K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,space=0,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=2
    18                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1,group=2
    19                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=2
    24                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    57                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Version 2.20
    61                           ; Generated 05/05/2020 GMT
    62                           ; 
    63                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F46K20 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94   000FE0                     bsr             equ	4064
    95   000FE9                     fsr0            equ	4073
    96   000FEA                     fsr0h           equ	4074
    97   000FE9                     fsr0l           equ	4073
    98   000FE1                     fsr1            equ	4065
    99   000FE2                     fsr1h           equ	4066
   100   000FE1                     fsr1l           equ	4065
   101   000FD9                     fsr2            equ	4057
   102   000FDA                     fsr2h           equ	4058
   103   000FD9                     fsr2l           equ	4057
   104   000FEF                     indf0           equ	4079
   105   000FE7                     indf1           equ	4071
   106   000FDF                     indf2           equ	4063
   107   000FF2                     intcon          equ	4082
   108   000000                     nvmcon          equ	0
   109   000FF9                     pcl             equ	4089
   110   000FFA                     pclath          equ	4090
   111   000FFB                     pclatu          equ	4091
   112   000FEB                     plusw0          equ	4075
   113   000FE3                     plusw1          equ	4067
   114   000FDB                     plusw2          equ	4059
   115   000FED                     postdec0        equ	4077
   116   000FE5                     postdec1        equ	4069
   117   000FDD                     postdec2        equ	4061
   118   000FEE                     postinc0        equ	4078
   119   000FE6                     postinc1        equ	4070
   120   000FDE                     postinc2        equ	4062
   121   000FEC                     preinc0         equ	4076
   122   000FE4                     preinc1         equ	4068
   123   000FDC                     preinc2         equ	4060
   124   000FF3                     prod            equ	4083
   125   000FF4                     prodh           equ	4084
   126   000FF3                     prodl           equ	4083
   127   000FD8                     status          equ	4056
   128   000FF5                     tablat          equ	4085
   129   000FF6                     tblptr          equ	4086
   130   000FF7                     tblptrh         equ	4087
   131   000FF6                     tblptrl         equ	4086
   132   000FF8                     tblptru         equ	4088
   133   000FFD                     tosl            equ	4093
   134   000FE8                     wreg            equ	4072
   135   000F77                     SSPMSK          equ	3959	;# 
   136   000F78                     SLRCON          equ	3960	;# 
   137   000F79                     CM2CON1         equ	3961	;# 
   138   000F7A                     CM2CON0         equ	3962	;# 
   139   000F7B                     CM1CON0         equ	3963	;# 
   140   000F7C                     WPUB            equ	3964	;# 
   141   000F7D                     IOCB            equ	3965	;# 
   142   000F7E                     ANSEL           equ	3966	;# 
   143   000F7F                     ANSELH          equ	3967	;# 
   144   000F80                     PORTA           equ	3968	;# 
   145   000F81                     PORTB           equ	3969	;# 
   146   000F82                     PORTC           equ	3970	;# 
   147   000F83                     PORTD           equ	3971	;# 
   148   000F84                     PORTE           equ	3972	;# 
   149   000F89                     LATA            equ	3977	;# 
   150   000F8A                     LATB            equ	3978	;# 
   151   000F8B                     LATC            equ	3979	;# 
   152   000F8C                     LATD            equ	3980	;# 
   153   000F8D                     LATE            equ	3981	;# 
   154   000F92                     TRISA           equ	3986	;# 
   155   000F92                     DDRA            equ	3986	;# 
   156   000F93                     TRISB           equ	3987	;# 
   157   000F93                     DDRB            equ	3987	;# 
   158   000F94                     TRISC           equ	3988	;# 
   159   000F94                     DDRC            equ	3988	;# 
   160   000F95                     TRISD           equ	3989	;# 
   161   000F95                     DDRD            equ	3989	;# 
   162   000F96                     TRISE           equ	3990	;# 
   163   000F96                     DDRE            equ	3990	;# 
   164   000F9B                     OSCTUNE         equ	3995	;# 
   165   000F9D                     PIE1            equ	3997	;# 
   166   000F9E                     PIR1            equ	3998	;# 
   167   000F9F                     IPR1            equ	3999	;# 
   168   000FA0                     PIE2            equ	4000	;# 
   169   000FA1                     PIR2            equ	4001	;# 
   170   000FA2                     IPR2            equ	4002	;# 
   171   000FA6                     EECON1          equ	4006	;# 
   172   000FA7                     EECON2          equ	4007	;# 
   173   000FA8                     EEDATA          equ	4008	;# 
   174   000FA9                     EEADR           equ	4009	;# 
   175   000FAA                     EEADRH          equ	4010	;# 
   176   000FAB                     RCSTA           equ	4011	;# 
   177   000FAB                     RCSTA1          equ	4011	;# 
   178   000FAC                     TXSTA           equ	4012	;# 
   179   000FAC                     TXSTA1          equ	4012	;# 
   180   000FAD                     TXREG           equ	4013	;# 
   181   000FAD                     TXREG1          equ	4013	;# 
   182   000FAE                     RCREG           equ	4014	;# 
   183   000FAE                     RCREG1          equ	4014	;# 
   184   000FAF                     SPBRG           equ	4015	;# 
   185   000FAF                     SPBRG1          equ	4015	;# 
   186   000FB0                     SPBRGH          equ	4016	;# 
   187   000FB1                     T3CON           equ	4017	;# 
   188   000FB2                     TMR3            equ	4018	;# 
   189   000FB2                     TMR3L           equ	4018	;# 
   190   000FB3                     TMR3H           equ	4019	;# 
   191   000FB4                     CVRCON2         equ	4020	;# 
   192   000FB5                     CVRCON          equ	4021	;# 
   193   000FB6                     ECCP1AS         equ	4022	;# 
   194   000FB7                     PWM1CON         equ	4023	;# 
   195   000FB8                     BAUDCON         equ	4024	;# 
   196   000FB8                     BAUDCTL         equ	4024	;# 
   197   000FB9                     PSTRCON         equ	4025	;# 
   198   000FBA                     CCP2CON         equ	4026	;# 
   199   000FBB                     CCPR2           equ	4027	;# 
   200   000FBB                     CCPR2L          equ	4027	;# 
   201   000FBC                     CCPR2H          equ	4028	;# 
   202   000FBD                     CCP1CON         equ	4029	;# 
   203   000FBE                     CCPR1           equ	4030	;# 
   204   000FBE                     CCPR1L          equ	4030	;# 
   205   000FBF                     CCPR1H          equ	4031	;# 
   206   000FC0                     ADCON2          equ	4032	;# 
   207   000FC1                     ADCON1          equ	4033	;# 
   208   000FC2                     ADCON0          equ	4034	;# 
   209   000FC3                     ADRES           equ	4035	;# 
   210   000FC3                     ADRESL          equ	4035	;# 
   211   000FC4                     ADRESH          equ	4036	;# 
   212   000FC5                     SSPCON2         equ	4037	;# 
   213   000FC6                     SSPCON1         equ	4038	;# 
   214   000FC7                     SSPSTAT         equ	4039	;# 
   215   000FC8                     SSPADD          equ	4040	;# 
   216   000FC9                     SSPBUF          equ	4041	;# 
   217   000FCA                     T2CON           equ	4042	;# 
   218   000FCB                     PR2             equ	4043	;# 
   219   000FCB                     MEMCON          equ	4043	;# 
   220   000FCC                     TMR2            equ	4044	;# 
   221   000FCD                     T1CON           equ	4045	;# 
   222   000FCE                     TMR1            equ	4046	;# 
   223   000FCE                     TMR1L           equ	4046	;# 
   224   000FCF                     TMR1H           equ	4047	;# 
   225   000FD0                     RCON            equ	4048	;# 
   226   000FD1                     WDTCON          equ	4049	;# 
   227   000FD2                     HLVDCON         equ	4050	;# 
   228   000FD2                     LVDCON          equ	4050	;# 
   229   000FD3                     OSCCON          equ	4051	;# 
   230   000FD5                     T0CON           equ	4053	;# 
   231   000FD6                     TMR0            equ	4054	;# 
   232   000FD6                     TMR0L           equ	4054	;# 
   233   000FD7                     TMR0H           equ	4055	;# 
   234   000FD8                     STATUS          equ	4056	;# 
   235   000FD9                     FSR2            equ	4057	;# 
   236   000FD9                     FSR2L           equ	4057	;# 
   237   000FDA                     FSR2H           equ	4058	;# 
   238   000FDB                     PLUSW2          equ	4059	;# 
   239   000FDC                     PREINC2         equ	4060	;# 
   240   000FDD                     POSTDEC2        equ	4061	;# 
   241   000FDE                     POSTINC2        equ	4062	;# 
   242   000FDF                     INDF2           equ	4063	;# 
   243   000FE0                     BSR             equ	4064	;# 
   244   000FE1                     FSR1            equ	4065	;# 
   245   000FE1                     FSR1L           equ	4065	;# 
   246   000FE2                     FSR1H           equ	4066	;# 
   247   000FE3                     PLUSW1          equ	4067	;# 
   248   000FE4                     PREINC1         equ	4068	;# 
   249   000FE5                     POSTDEC1        equ	4069	;# 
   250   000FE6                     POSTINC1        equ	4070	;# 
   251   000FE7                     INDF1           equ	4071	;# 
   252   000FE8                     WREG            equ	4072	;# 
   253   000FE9                     FSR0            equ	4073	;# 
   254   000FE9                     FSR0L           equ	4073	;# 
   255   000FEA                     FSR0H           equ	4074	;# 
   256   000FEB                     PLUSW0          equ	4075	;# 
   257   000FEC                     PREINC0         equ	4076	;# 
   258   000FED                     POSTDEC0        equ	4077	;# 
   259   000FEE                     POSTINC0        equ	4078	;# 
   260   000FEF                     INDF0           equ	4079	;# 
   261   000FF0                     INTCON3         equ	4080	;# 
   262   000FF1                     INTCON2         equ	4081	;# 
   263   000FF2                     INTCON          equ	4082	;# 
   264   000FF3                     PROD            equ	4083	;# 
   265   000FF3                     PRODL           equ	4083	;# 
   266   000FF4                     PRODH           equ	4084	;# 
   267   000FF5                     TABLAT          equ	4085	;# 
   268   000FF6                     TBLPTR          equ	4086	;# 
   269   000FF6                     TBLPTRL         equ	4086	;# 
   270   000FF7                     TBLPTRH         equ	4087	;# 
   271   000FF8                     TBLPTRU         equ	4088	;# 
   272   000FF9                     PCLAT           equ	4089	;# 
   273   000FF9                     PC              equ	4089	;# 
   274   000FF9                     PCL             equ	4089	;# 
   275   000FFA                     PCLATH          equ	4090	;# 
   276   000FFB                     PCLATU          equ	4091	;# 
   277   000FFC                     STKPTR          equ	4092	;# 
   278   000FFD                     TOS             equ	4093	;# 
   279   000FFD                     TOSL            equ	4093	;# 
   280   000FFE                     TOSH            equ	4094	;# 
   281   000FFF                     TOSU            equ	4095	;# 
   282   000F77                     SSPMSK          equ	3959	;# 
   283   000F78                     SLRCON          equ	3960	;# 
   284   000F79                     CM2CON1         equ	3961	;# 
   285   000F7A                     CM2CON0         equ	3962	;# 
   286   000F7B                     CM1CON0         equ	3963	;# 
   287   000F7C                     WPUB            equ	3964	;# 
   288   000F7D                     IOCB            equ	3965	;# 
   289   000F7E                     ANSEL           equ	3966	;# 
   290   000F7F                     ANSELH          equ	3967	;# 
   291   000F80                     PORTA           equ	3968	;# 
   292   000F81                     PORTB           equ	3969	;# 
   293   000F82                     PORTC           equ	3970	;# 
   294   000F83                     PORTD           equ	3971	;# 
   295   000F84                     PORTE           equ	3972	;# 
   296   000F89                     LATA            equ	3977	;# 
   297   000F8A                     LATB            equ	3978	;# 
   298   000F8B                     LATC            equ	3979	;# 
   299   000F8C                     LATD            equ	3980	;# 
   300   000F8D                     LATE            equ	3981	;# 
   301   000F92                     TRISA           equ	3986	;# 
   302   000F92                     DDRA            equ	3986	;# 
   303   000F93                     TRISB           equ	3987	;# 
   304   000F93                     DDRB            equ	3987	;# 
   305   000F94                     TRISC           equ	3988	;# 
   306   000F94                     DDRC            equ	3988	;# 
   307   000F95                     TRISD           equ	3989	;# 
   308   000F95                     DDRD            equ	3989	;# 
   309   000F96                     TRISE           equ	3990	;# 
   310   000F96                     DDRE            equ	3990	;# 
   311   000F9B                     OSCTUNE         equ	3995	;# 
   312   000F9D                     PIE1            equ	3997	;# 
   313   000F9E                     PIR1            equ	3998	;# 
   314   000F9F                     IPR1            equ	3999	;# 
   315   000FA0                     PIE2            equ	4000	;# 
   316   000FA1                     PIR2            equ	4001	;# 
   317   000FA2                     IPR2            equ	4002	;# 
   318   000FA6                     EECON1          equ	4006	;# 
   319   000FA7                     EECON2          equ	4007	;# 
   320   000FA8                     EEDATA          equ	4008	;# 
   321   000FA9                     EEADR           equ	4009	;# 
   322   000FAA                     EEADRH          equ	4010	;# 
   323   000FAB                     RCSTA           equ	4011	;# 
   324   000FAB                     RCSTA1          equ	4011	;# 
   325   000FAC                     TXSTA           equ	4012	;# 
   326   000FAC                     TXSTA1          equ	4012	;# 
   327   000FAD                     TXREG           equ	4013	;# 
   328   000FAD                     TXREG1          equ	4013	;# 
   329   000FAE                     RCREG           equ	4014	;# 
   330   000FAE                     RCREG1          equ	4014	;# 
   331   000FAF                     SPBRG           equ	4015	;# 
   332   000FAF                     SPBRG1          equ	4015	;# 
   333   000FB0                     SPBRGH          equ	4016	;# 
   334   000FB1                     T3CON           equ	4017	;# 
   335   000FB2                     TMR3            equ	4018	;# 
   336   000FB2                     TMR3L           equ	4018	;# 
   337   000FB3                     TMR3H           equ	4019	;# 
   338   000FB4                     CVRCON2         equ	4020	;# 
   339   000FB5                     CVRCON          equ	4021	;# 
   340   000FB6                     ECCP1AS         equ	4022	;# 
   341   000FB7                     PWM1CON         equ	4023	;# 
   342   000FB8                     BAUDCON         equ	4024	;# 
   343   000FB8                     BAUDCTL         equ	4024	;# 
   344   000FB9                     PSTRCON         equ	4025	;# 
   345   000FBA                     CCP2CON         equ	4026	;# 
   346   000FBB                     CCPR2           equ	4027	;# 
   347   000FBB                     CCPR2L          equ	4027	;# 
   348   000FBC                     CCPR2H          equ	4028	;# 
   349   000FBD                     CCP1CON         equ	4029	;# 
   350   000FBE                     CCPR1           equ	4030	;# 
   351   000FBE                     CCPR1L          equ	4030	;# 
   352   000FBF                     CCPR1H          equ	4031	;# 
   353   000FC0                     ADCON2          equ	4032	;# 
   354   000FC1                     ADCON1          equ	4033	;# 
   355   000FC2                     ADCON0          equ	4034	;# 
   356   000FC3                     ADRES           equ	4035	;# 
   357   000FC3                     ADRESL          equ	4035	;# 
   358   000FC4                     ADRESH          equ	4036	;# 
   359   000FC5                     SSPCON2         equ	4037	;# 
   360   000FC6                     SSPCON1         equ	4038	;# 
   361   000FC7                     SSPSTAT         equ	4039	;# 
   362   000FC8                     SSPADD          equ	4040	;# 
   363   000FC9                     SSPBUF          equ	4041	;# 
   364   000FCA                     T2CON           equ	4042	;# 
   365   000FCB                     PR2             equ	4043	;# 
   366   000FCB                     MEMCON          equ	4043	;# 
   367   000FCC                     TMR2            equ	4044	;# 
   368   000FCD                     T1CON           equ	4045	;# 
   369   000FCE                     TMR1            equ	4046	;# 
   370   000FCE                     TMR1L           equ	4046	;# 
   371   000FCF                     TMR1H           equ	4047	;# 
   372   000FD0                     RCON            equ	4048	;# 
   373   000FD1                     WDTCON          equ	4049	;# 
   374   000FD2                     HLVDCON         equ	4050	;# 
   375   000FD2                     LVDCON          equ	4050	;# 
   376   000FD3                     OSCCON          equ	4051	;# 
   377   000FD5                     T0CON           equ	4053	;# 
   378   000FD6                     TMR0            equ	4054	;# 
   379   000FD6                     TMR0L           equ	4054	;# 
   380   000FD7                     TMR0H           equ	4055	;# 
   381   000FD8                     STATUS          equ	4056	;# 
   382   000FD9                     FSR2            equ	4057	;# 
   383   000FD9                     FSR2L           equ	4057	;# 
   384   000FDA                     FSR2H           equ	4058	;# 
   385   000FDB                     PLUSW2          equ	4059	;# 
   386   000FDC                     PREINC2         equ	4060	;# 
   387   000FDD                     POSTDEC2        equ	4061	;# 
   388   000FDE                     POSTINC2        equ	4062	;# 
   389   000FDF                     INDF2           equ	4063	;# 
   390   000FE0                     BSR             equ	4064	;# 
   391   000FE1                     FSR1            equ	4065	;# 
   392   000FE1                     FSR1L           equ	4065	;# 
   393   000FE2                     FSR1H           equ	4066	;# 
   394   000FE3                     PLUSW1          equ	4067	;# 
   395   000FE4                     PREINC1         equ	4068	;# 
   396   000FE5                     POSTDEC1        equ	4069	;# 
   397   000FE6                     POSTINC1        equ	4070	;# 
   398   000FE7                     INDF1           equ	4071	;# 
   399   000FE8                     WREG            equ	4072	;# 
   400   000FE9                     FSR0            equ	4073	;# 
   401   000FE9                     FSR0L           equ	4073	;# 
   402   000FEA                     FSR0H           equ	4074	;# 
   403   000FEB                     PLUSW0          equ	4075	;# 
   404   000FEC                     PREINC0         equ	4076	;# 
   405   000FED                     POSTDEC0        equ	4077	;# 
   406   000FEE                     POSTINC0        equ	4078	;# 
   407   000FEF                     INDF0           equ	4079	;# 
   408   000FF0                     INTCON3         equ	4080	;# 
   409   000FF1                     INTCON2         equ	4081	;# 
   410   000FF2                     INTCON          equ	4082	;# 
   411   000FF3                     PROD            equ	4083	;# 
   412   000FF3                     PRODL           equ	4083	;# 
   413   000FF4                     PRODH           equ	4084	;# 
   414   000FF5                     TABLAT          equ	4085	;# 
   415   000FF6                     TBLPTR          equ	4086	;# 
   416   000FF6                     TBLPTRL         equ	4086	;# 
   417   000FF7                     TBLPTRH         equ	4087	;# 
   418   000FF8                     TBLPTRU         equ	4088	;# 
   419   000FF9                     PCLAT           equ	4089	;# 
   420   000FF9                     PC              equ	4089	;# 
   421   000FF9                     PCL             equ	4089	;# 
   422   000FFA                     PCLATH          equ	4090	;# 
   423   000FFB                     PCLATU          equ	4091	;# 
   424   000FFC                     STKPTR          equ	4092	;# 
   425   000FFD                     TOS             equ	4093	;# 
   426   000FFD                     TOSL            equ	4093	;# 
   427   000FFE                     TOSH            equ	4094	;# 
   428   000FFF                     TOSU            equ	4095	;# 
   429   000F77                     SSPMSK          equ	3959	;# 
   430   000F78                     SLRCON          equ	3960	;# 
   431   000F79                     CM2CON1         equ	3961	;# 
   432   000F7A                     CM2CON0         equ	3962	;# 
   433   000F7B                     CM1CON0         equ	3963	;# 
   434   000F7C                     WPUB            equ	3964	;# 
   435   000F7D                     IOCB            equ	3965	;# 
   436   000F7E                     ANSEL           equ	3966	;# 
   437   000F7F                     ANSELH          equ	3967	;# 
   438   000F80                     PORTA           equ	3968	;# 
   439   000F81                     PORTB           equ	3969	;# 
   440   000F82                     PORTC           equ	3970	;# 
   441   000F83                     PORTD           equ	3971	;# 
   442   000F84                     PORTE           equ	3972	;# 
   443   000F89                     LATA            equ	3977	;# 
   444   000F8A                     LATB            equ	3978	;# 
   445   000F8B                     LATC            equ	3979	;# 
   446   000F8C                     LATD            equ	3980	;# 
   447   000F8D                     LATE            equ	3981	;# 
   448   000F92                     TRISA           equ	3986	;# 
   449   000F92                     DDRA            equ	3986	;# 
   450   000F93                     TRISB           equ	3987	;# 
   451   000F93                     DDRB            equ	3987	;# 
   452   000F94                     TRISC           equ	3988	;# 
   453   000F94                     DDRC            equ	3988	;# 
   454   000F95                     TRISD           equ	3989	;# 
   455   000F95                     DDRD            equ	3989	;# 
   456   000F96                     TRISE           equ	3990	;# 
   457   000F96                     DDRE            equ	3990	;# 
   458   000F9B                     OSCTUNE         equ	3995	;# 
   459   000F9D                     PIE1            equ	3997	;# 
   460   000F9E                     PIR1            equ	3998	;# 
   461   000F9F                     IPR1            equ	3999	;# 
   462   000FA0                     PIE2            equ	4000	;# 
   463   000FA1                     PIR2            equ	4001	;# 
   464   000FA2                     IPR2            equ	4002	;# 
   465   000FA6                     EECON1          equ	4006	;# 
   466   000FA7                     EECON2          equ	4007	;# 
   467   000FA8                     EEDATA          equ	4008	;# 
   468   000FA9                     EEADR           equ	4009	;# 
   469   000FAA                     EEADRH          equ	4010	;# 
   470   000FAB                     RCSTA           equ	4011	;# 
   471   000FAB                     RCSTA1          equ	4011	;# 
   472   000FAC                     TXSTA           equ	4012	;# 
   473   000FAC                     TXSTA1          equ	4012	;# 
   474   000FAD                     TXREG           equ	4013	;# 
   475   000FAD                     TXREG1          equ	4013	;# 
   476   000FAE                     RCREG           equ	4014	;# 
   477   000FAE                     RCREG1          equ	4014	;# 
   478   000FAF                     SPBRG           equ	4015	;# 
   479   000FAF                     SPBRG1          equ	4015	;# 
   480   000FB0                     SPBRGH          equ	4016	;# 
   481   000FB1                     T3CON           equ	4017	;# 
   482   000FB2                     TMR3            equ	4018	;# 
   483   000FB2                     TMR3L           equ	4018	;# 
   484   000FB3                     TMR3H           equ	4019	;# 
   485   000FB4                     CVRCON2         equ	4020	;# 
   486   000FB5                     CVRCON          equ	4021	;# 
   487   000FB6                     ECCP1AS         equ	4022	;# 
   488   000FB7                     PWM1CON         equ	4023	;# 
   489   000FB8                     BAUDCON         equ	4024	;# 
   490   000FB8                     BAUDCTL         equ	4024	;# 
   491   000FB9                     PSTRCON         equ	4025	;# 
   492   000FBA                     CCP2CON         equ	4026	;# 
   493   000FBB                     CCPR2           equ	4027	;# 
   494   000FBB                     CCPR2L          equ	4027	;# 
   495   000FBC                     CCPR2H          equ	4028	;# 
   496   000FBD                     CCP1CON         equ	4029	;# 
   497   000FBE                     CCPR1           equ	4030	;# 
   498   000FBE                     CCPR1L          equ	4030	;# 
   499   000FBF                     CCPR1H          equ	4031	;# 
   500   000FC0                     ADCON2          equ	4032	;# 
   501   000FC1                     ADCON1          equ	4033	;# 
   502   000FC2                     ADCON0          equ	4034	;# 
   503   000FC3                     ADRES           equ	4035	;# 
   504   000FC3                     ADRESL          equ	4035	;# 
   505   000FC4                     ADRESH          equ	4036	;# 
   506   000FC5                     SSPCON2         equ	4037	;# 
   507   000FC6                     SSPCON1         equ	4038	;# 
   508   000FC7                     SSPSTAT         equ	4039	;# 
   509   000FC8                     SSPADD          equ	4040	;# 
   510   000FC9                     SSPBUF          equ	4041	;# 
   511   000FCA                     T2CON           equ	4042	;# 
   512   000FCB                     PR2             equ	4043	;# 
   513   000FCB                     MEMCON          equ	4043	;# 
   514   000FCC                     TMR2            equ	4044	;# 
   515   000FCD                     T1CON           equ	4045	;# 
   516   000FCE                     TMR1            equ	4046	;# 
   517   000FCE                     TMR1L           equ	4046	;# 
   518   000FCF                     TMR1H           equ	4047	;# 
   519   000FD0                     RCON            equ	4048	;# 
   520   000FD1                     WDTCON          equ	4049	;# 
   521   000FD2                     HLVDCON         equ	4050	;# 
   522   000FD2                     LVDCON          equ	4050	;# 
   523   000FD3                     OSCCON          equ	4051	;# 
   524   000FD5                     T0CON           equ	4053	;# 
   525   000FD6                     TMR0            equ	4054	;# 
   526   000FD6                     TMR0L           equ	4054	;# 
   527   000FD7                     TMR0H           equ	4055	;# 
   528   000FD8                     STATUS          equ	4056	;# 
   529   000FD9                     FSR2            equ	4057	;# 
   530   000FD9                     FSR2L           equ	4057	;# 
   531   000FDA                     FSR2H           equ	4058	;# 
   532   000FDB                     PLUSW2          equ	4059	;# 
   533   000FDC                     PREINC2         equ	4060	;# 
   534   000FDD                     POSTDEC2        equ	4061	;# 
   535   000FDE                     POSTINC2        equ	4062	;# 
   536   000FDF                     INDF2           equ	4063	;# 
   537   000FE0                     BSR             equ	4064	;# 
   538   000FE1                     FSR1            equ	4065	;# 
   539   000FE1                     FSR1L           equ	4065	;# 
   540   000FE2                     FSR1H           equ	4066	;# 
   541   000FE3                     PLUSW1          equ	4067	;# 
   542   000FE4                     PREINC1         equ	4068	;# 
   543   000FE5                     POSTDEC1        equ	4069	;# 
   544   000FE6                     POSTINC1        equ	4070	;# 
   545   000FE7                     INDF1           equ	4071	;# 
   546   000FE8                     WREG            equ	4072	;# 
   547   000FE9                     FSR0            equ	4073	;# 
   548   000FE9                     FSR0L           equ	4073	;# 
   549   000FEA                     FSR0H           equ	4074	;# 
   550   000FEB                     PLUSW0          equ	4075	;# 
   551   000FEC                     PREINC0         equ	4076	;# 
   552   000FED                     POSTDEC0        equ	4077	;# 
   553   000FEE                     POSTINC0        equ	4078	;# 
   554   000FEF                     INDF0           equ	4079	;# 
   555   000FF0                     INTCON3         equ	4080	;# 
   556   000FF1                     INTCON2         equ	4081	;# 
   557   000FF2                     INTCON          equ	4082	;# 
   558   000FF3                     PROD            equ	4083	;# 
   559   000FF3                     PRODL           equ	4083	;# 
   560   000FF4                     PRODH           equ	4084	;# 
   561   000FF5                     TABLAT          equ	4085	;# 
   562   000FF6                     TBLPTR          equ	4086	;# 
   563   000FF6                     TBLPTRL         equ	4086	;# 
   564   000FF7                     TBLPTRH         equ	4087	;# 
   565   000FF8                     TBLPTRU         equ	4088	;# 
   566   000FF9                     PCLAT           equ	4089	;# 
   567   000FF9                     PC              equ	4089	;# 
   568   000FF9                     PCL             equ	4089	;# 
   569   000FFA                     PCLATH          equ	4090	;# 
   570   000FFB                     PCLATU          equ	4091	;# 
   571   000FFC                     STKPTR          equ	4092	;# 
   572   000FFD                     TOS             equ	4093	;# 
   573   000FFD                     TOSL            equ	4093	;# 
   574   000FFE                     TOSH            equ	4094	;# 
   575   000FFF                     TOSU            equ	4095	;# 
   576   000F77                     SSPMSK          equ	3959	;# 
   577   000F78                     SLRCON          equ	3960	;# 
   578   000F79                     CM2CON1         equ	3961	;# 
   579   000F7A                     CM2CON0         equ	3962	;# 
   580   000F7B                     CM1CON0         equ	3963	;# 
   581   000F7C                     WPUB            equ	3964	;# 
   582   000F7D                     IOCB            equ	3965	;# 
   583   000F7E                     ANSEL           equ	3966	;# 
   584   000F7F                     ANSELH          equ	3967	;# 
   585   000F80                     PORTA           equ	3968	;# 
   586   000F81                     PORTB           equ	3969	;# 
   587   000F82                     PORTC           equ	3970	;# 
   588   000F83                     PORTD           equ	3971	;# 
   589   000F84                     PORTE           equ	3972	;# 
   590   000F89                     LATA            equ	3977	;# 
   591   000F8A                     LATB            equ	3978	;# 
   592   000F8B                     LATC            equ	3979	;# 
   593   000F8C                     LATD            equ	3980	;# 
   594   000F8D                     LATE            equ	3981	;# 
   595   000F92                     TRISA           equ	3986	;# 
   596   000F92                     DDRA            equ	3986	;# 
   597   000F93                     TRISB           equ	3987	;# 
   598   000F93                     DDRB            equ	3987	;# 
   599   000F94                     TRISC           equ	3988	;# 
   600   000F94                     DDRC            equ	3988	;# 
   601   000F95                     TRISD           equ	3989	;# 
   602   000F95                     DDRD            equ	3989	;# 
   603   000F96                     TRISE           equ	3990	;# 
   604   000F96                     DDRE            equ	3990	;# 
   605   000F9B                     OSCTUNE         equ	3995	;# 
   606   000F9D                     PIE1            equ	3997	;# 
   607   000F9E                     PIR1            equ	3998	;# 
   608   000F9F                     IPR1            equ	3999	;# 
   609   000FA0                     PIE2            equ	4000	;# 
   610   000FA1                     PIR2            equ	4001	;# 
   611   000FA2                     IPR2            equ	4002	;# 
   612   000FA6                     EECON1          equ	4006	;# 
   613   000FA7                     EECON2          equ	4007	;# 
   614   000FA8                     EEDATA          equ	4008	;# 
   615   000FA9                     EEADR           equ	4009	;# 
   616   000FAA                     EEADRH          equ	4010	;# 
   617   000FAB                     RCSTA           equ	4011	;# 
   618   000FAB                     RCSTA1          equ	4011	;# 
   619   000FAC                     TXSTA           equ	4012	;# 
   620   000FAC                     TXSTA1          equ	4012	;# 
   621   000FAD                     TXREG           equ	4013	;# 
   622   000FAD                     TXREG1          equ	4013	;# 
   623   000FAE                     RCREG           equ	4014	;# 
   624   000FAE                     RCREG1          equ	4014	;# 
   625   000FAF                     SPBRG           equ	4015	;# 
   626   000FAF                     SPBRG1          equ	4015	;# 
   627   000FB0                     SPBRGH          equ	4016	;# 
   628   000FB1                     T3CON           equ	4017	;# 
   629   000FB2                     TMR3            equ	4018	;# 
   630   000FB2                     TMR3L           equ	4018	;# 
   631   000FB3                     TMR3H           equ	4019	;# 
   632   000FB4                     CVRCON2         equ	4020	;# 
   633   000FB5                     CVRCON          equ	4021	;# 
   634   000FB6                     ECCP1AS         equ	4022	;# 
   635   000FB7                     PWM1CON         equ	4023	;# 
   636   000FB8                     BAUDCON         equ	4024	;# 
   637   000FB8                     BAUDCTL         equ	4024	;# 
   638   000FB9                     PSTRCON         equ	4025	;# 
   639   000FBA                     CCP2CON         equ	4026	;# 
   640   000FBB                     CCPR2           equ	4027	;# 
   641   000FBB                     CCPR2L          equ	4027	;# 
   642   000FBC                     CCPR2H          equ	4028	;# 
   643   000FBD                     CCP1CON         equ	4029	;# 
   644   000FBE                     CCPR1           equ	4030	;# 
   645   000FBE                     CCPR1L          equ	4030	;# 
   646   000FBF                     CCPR1H          equ	4031	;# 
   647   000FC0                     ADCON2          equ	4032	;# 
   648   000FC1                     ADCON1          equ	4033	;# 
   649   000FC2                     ADCON0          equ	4034	;# 
   650   000FC3                     ADRES           equ	4035	;# 
   651   000FC3                     ADRESL          equ	4035	;# 
   652   000FC4                     ADRESH          equ	4036	;# 
   653   000FC5                     SSPCON2         equ	4037	;# 
   654   000FC6                     SSPCON1         equ	4038	;# 
   655   000FC7                     SSPSTAT         equ	4039	;# 
   656   000FC8                     SSPADD          equ	4040	;# 
   657   000FC9                     SSPBUF          equ	4041	;# 
   658   000FCA                     T2CON           equ	4042	;# 
   659   000FCB                     PR2             equ	4043	;# 
   660   000FCB                     MEMCON          equ	4043	;# 
   661   000FCC                     TMR2            equ	4044	;# 
   662   000FCD                     T1CON           equ	4045	;# 
   663   000FCE                     TMR1            equ	4046	;# 
   664   000FCE                     TMR1L           equ	4046	;# 
   665   000FCF                     TMR1H           equ	4047	;# 
   666   000FD0                     RCON            equ	4048	;# 
   667   000FD1                     WDTCON          equ	4049	;# 
   668   000FD2                     HLVDCON         equ	4050	;# 
   669   000FD2                     LVDCON          equ	4050	;# 
   670   000FD3                     OSCCON          equ	4051	;# 
   671   000FD5                     T0CON           equ	4053	;# 
   672   000FD6                     TMR0            equ	4054	;# 
   673   000FD6                     TMR0L           equ	4054	;# 
   674   000FD7                     TMR0H           equ	4055	;# 
   675   000FD8                     STATUS          equ	4056	;# 
   676   000FD9                     FSR2            equ	4057	;# 
   677   000FD9                     FSR2L           equ	4057	;# 
   678   000FDA                     FSR2H           equ	4058	;# 
   679   000FDB                     PLUSW2          equ	4059	;# 
   680   000FDC                     PREINC2         equ	4060	;# 
   681   000FDD                     POSTDEC2        equ	4061	;# 
   682   000FDE                     POSTINC2        equ	4062	;# 
   683   000FDF                     INDF2           equ	4063	;# 
   684   000FE0                     BSR             equ	4064	;# 
   685   000FE1                     FSR1            equ	4065	;# 
   686   000FE1                     FSR1L           equ	4065	;# 
   687   000FE2                     FSR1H           equ	4066	;# 
   688   000FE3                     PLUSW1          equ	4067	;# 
   689   000FE4                     PREINC1         equ	4068	;# 
   690   000FE5                     POSTDEC1        equ	4069	;# 
   691   000FE6                     POSTINC1        equ	4070	;# 
   692   000FE7                     INDF1           equ	4071	;# 
   693   000FE8                     WREG            equ	4072	;# 
   694   000FE9                     FSR0            equ	4073	;# 
   695   000FE9                     FSR0L           equ	4073	;# 
   696   000FEA                     FSR0H           equ	4074	;# 
   697   000FEB                     PLUSW0          equ	4075	;# 
   698   000FEC                     PREINC0         equ	4076	;# 
   699   000FED                     POSTDEC0        equ	4077	;# 
   700   000FEE                     POSTINC0        equ	4078	;# 
   701   000FEF                     INDF0           equ	4079	;# 
   702   000FF0                     INTCON3         equ	4080	;# 
   703   000FF1                     INTCON2         equ	4081	;# 
   704   000FF2                     INTCON          equ	4082	;# 
   705   000FF3                     PROD            equ	4083	;# 
   706   000FF3                     PRODL           equ	4083	;# 
   707   000FF4                     PRODH           equ	4084	;# 
   708   000FF5                     TABLAT          equ	4085	;# 
   709   000FF6                     TBLPTR          equ	4086	;# 
   710   000FF6                     TBLPTRL         equ	4086	;# 
   711   000FF7                     TBLPTRH         equ	4087	;# 
   712   000FF8                     TBLPTRU         equ	4088	;# 
   713   000FF9                     PCLAT           equ	4089	;# 
   714   000FF9                     PC              equ	4089	;# 
   715   000FF9                     PCL             equ	4089	;# 
   716   000FFA                     PCLATH          equ	4090	;# 
   717   000FFB                     PCLATU          equ	4091	;# 
   718   000FFC                     STKPTR          equ	4092	;# 
   719   000FFD                     TOS             equ	4093	;# 
   720   000FFD                     TOSL            equ	4093	;# 
   721   000FFE                     TOSH            equ	4094	;# 
   722   000FFF                     TOSU            equ	4095	;# 
   723   000F77                     SSPMSK          equ	3959	;# 
   724   000F78                     SLRCON          equ	3960	;# 
   725   000F79                     CM2CON1         equ	3961	;# 
   726   000F7A                     CM2CON0         equ	3962	;# 
   727   000F7B                     CM1CON0         equ	3963	;# 
   728   000F7C                     WPUB            equ	3964	;# 
   729   000F7D                     IOCB            equ	3965	;# 
   730   000F7E                     ANSEL           equ	3966	;# 
   731   000F7F                     ANSELH          equ	3967	;# 
   732   000F80                     PORTA           equ	3968	;# 
   733   000F81                     PORTB           equ	3969	;# 
   734   000F82                     PORTC           equ	3970	;# 
   735   000F83                     PORTD           equ	3971	;# 
   736   000F84                     PORTE           equ	3972	;# 
   737   000F89                     LATA            equ	3977	;# 
   738   000F8A                     LATB            equ	3978	;# 
   739   000F8B                     LATC            equ	3979	;# 
   740   000F8C                     LATD            equ	3980	;# 
   741   000F8D                     LATE            equ	3981	;# 
   742   000F92                     TRISA           equ	3986	;# 
   743   000F92                     DDRA            equ	3986	;# 
   744   000F93                     TRISB           equ	3987	;# 
   745   000F93                     DDRB            equ	3987	;# 
   746   000F94                     TRISC           equ	3988	;# 
   747   000F94                     DDRC            equ	3988	;# 
   748   000F95                     TRISD           equ	3989	;# 
   749   000F95                     DDRD            equ	3989	;# 
   750   000F96                     TRISE           equ	3990	;# 
   751   000F96                     DDRE            equ	3990	;# 
   752   000F9B                     OSCTUNE         equ	3995	;# 
   753   000F9D                     PIE1            equ	3997	;# 
   754   000F9E                     PIR1            equ	3998	;# 
   755   000F9F                     IPR1            equ	3999	;# 
   756   000FA0                     PIE2            equ	4000	;# 
   757   000FA1                     PIR2            equ	4001	;# 
   758   000FA2                     IPR2            equ	4002	;# 
   759   000FA6                     EECON1          equ	4006	;# 
   760   000FA7                     EECON2          equ	4007	;# 
   761   000FA8                     EEDATA          equ	4008	;# 
   762   000FA9                     EEADR           equ	4009	;# 
   763   000FAA                     EEADRH          equ	4010	;# 
   764   000FAB                     RCSTA           equ	4011	;# 
   765   000FAB                     RCSTA1          equ	4011	;# 
   766   000FAC                     TXSTA           equ	4012	;# 
   767   000FAC                     TXSTA1          equ	4012	;# 
   768   000FAD                     TXREG           equ	4013	;# 
   769   000FAD                     TXREG1          equ	4013	;# 
   770   000FAE                     RCREG           equ	4014	;# 
   771   000FAE                     RCREG1          equ	4014	;# 
   772   000FAF                     SPBRG           equ	4015	;# 
   773   000FAF                     SPBRG1          equ	4015	;# 
   774   000FB0                     SPBRGH          equ	4016	;# 
   775   000FB1                     T3CON           equ	4017	;# 
   776   000FB2                     TMR3            equ	4018	;# 
   777   000FB2                     TMR3L           equ	4018	;# 
   778   000FB3                     TMR3H           equ	4019	;# 
   779   000FB4                     CVRCON2         equ	4020	;# 
   780   000FB5                     CVRCON          equ	4021	;# 
   781   000FB6                     ECCP1AS         equ	4022	;# 
   782   000FB7                     PWM1CON         equ	4023	;# 
   783   000FB8                     BAUDCON         equ	4024	;# 
   784   000FB8                     BAUDCTL         equ	4024	;# 
   785   000FB9                     PSTRCON         equ	4025	;# 
   786   000FBA                     CCP2CON         equ	4026	;# 
   787   000FBB                     CCPR2           equ	4027	;# 
   788   000FBB                     CCPR2L          equ	4027	;# 
   789   000FBC                     CCPR2H          equ	4028	;# 
   790   000FBD                     CCP1CON         equ	4029	;# 
   791   000FBE                     CCPR1           equ	4030	;# 
   792   000FBE                     CCPR1L          equ	4030	;# 
   793   000FBF                     CCPR1H          equ	4031	;# 
   794   000FC0                     ADCON2          equ	4032	;# 
   795   000FC1                     ADCON1          equ	4033	;# 
   796   000FC2                     ADCON0          equ	4034	;# 
   797   000FC3                     ADRES           equ	4035	;# 
   798   000FC3                     ADRESL          equ	4035	;# 
   799   000FC4                     ADRESH          equ	4036	;# 
   800   000FC5                     SSPCON2         equ	4037	;# 
   801   000FC6                     SSPCON1         equ	4038	;# 
   802   000FC7                     SSPSTAT         equ	4039	;# 
   803   000FC8                     SSPADD          equ	4040	;# 
   804   000FC9                     SSPBUF          equ	4041	;# 
   805   000FCA                     T2CON           equ	4042	;# 
   806   000FCB                     PR2             equ	4043	;# 
   807   000FCB                     MEMCON          equ	4043	;# 
   808   000FCC                     TMR2            equ	4044	;# 
   809   000FCD                     T1CON           equ	4045	;# 
   810   000FCE                     TMR1            equ	4046	;# 
   811   000FCE                     TMR1L           equ	4046	;# 
   812   000FCF                     TMR1H           equ	4047	;# 
   813   000FD0                     RCON            equ	4048	;# 
   814   000FD1                     WDTCON          equ	4049	;# 
   815   000FD2                     HLVDCON         equ	4050	;# 
   816   000FD2                     LVDCON          equ	4050	;# 
   817   000FD3                     OSCCON          equ	4051	;# 
   818   000FD5                     T0CON           equ	4053	;# 
   819   000FD6                     TMR0            equ	4054	;# 
   820   000FD6                     TMR0L           equ	4054	;# 
   821   000FD7                     TMR0H           equ	4055	;# 
   822   000FD8                     STATUS          equ	4056	;# 
   823   000FD9                     FSR2            equ	4057	;# 
   824   000FD9                     FSR2L           equ	4057	;# 
   825   000FDA                     FSR2H           equ	4058	;# 
   826   000FDB                     PLUSW2          equ	4059	;# 
   827   000FDC                     PREINC2         equ	4060	;# 
   828   000FDD                     POSTDEC2        equ	4061	;# 
   829   000FDE                     POSTINC2        equ	4062	;# 
   830   000FDF                     INDF2           equ	4063	;# 
   831   000FE0                     BSR             equ	4064	;# 
   832   000FE1                     FSR1            equ	4065	;# 
   833   000FE1                     FSR1L           equ	4065	;# 
   834   000FE2                     FSR1H           equ	4066	;# 
   835   000FE3                     PLUSW1          equ	4067	;# 
   836   000FE4                     PREINC1         equ	4068	;# 
   837   000FE5                     POSTDEC1        equ	4069	;# 
   838   000FE6                     POSTINC1        equ	4070	;# 
   839   000FE7                     INDF1           equ	4071	;# 
   840   000FE8                     WREG            equ	4072	;# 
   841   000FE9                     FSR0            equ	4073	;# 
   842   000FE9                     FSR0L           equ	4073	;# 
   843   000FEA                     FSR0H           equ	4074	;# 
   844   000FEB                     PLUSW0          equ	4075	;# 
   845   000FEC                     PREINC0         equ	4076	;# 
   846   000FED                     POSTDEC0        equ	4077	;# 
   847   000FEE                     POSTINC0        equ	4078	;# 
   848   000FEF                     INDF0           equ	4079	;# 
   849   000FF0                     INTCON3         equ	4080	;# 
   850   000FF1                     INTCON2         equ	4081	;# 
   851   000FF2                     INTCON          equ	4082	;# 
   852   000FF3                     PROD            equ	4083	;# 
   853   000FF3                     PRODL           equ	4083	;# 
   854   000FF4                     PRODH           equ	4084	;# 
   855   000FF5                     TABLAT          equ	4085	;# 
   856   000FF6                     TBLPTR          equ	4086	;# 
   857   000FF6                     TBLPTRL         equ	4086	;# 
   858   000FF7                     TBLPTRH         equ	4087	;# 
   859   000FF8                     TBLPTRU         equ	4088	;# 
   860   000FF9                     PCLAT           equ	4089	;# 
   861   000FF9                     PC              equ	4089	;# 
   862   000FF9                     PCL             equ	4089	;# 
   863   000FFA                     PCLATH          equ	4090	;# 
   864   000FFB                     PCLATU          equ	4091	;# 
   865   000FFC                     STKPTR          equ	4092	;# 
   866   000FFD                     TOS             equ	4093	;# 
   867   000FFD                     TOSL            equ	4093	;# 
   868   000FFE                     TOSH            equ	4094	;# 
   869   000FFF                     TOSU            equ	4095	;# 
   870   000F77                     SSPMSK          equ	3959	;# 
   871   000F78                     SLRCON          equ	3960	;# 
   872   000F79                     CM2CON1         equ	3961	;# 
   873   000F7A                     CM2CON0         equ	3962	;# 
   874   000F7B                     CM1CON0         equ	3963	;# 
   875   000F7C                     WPUB            equ	3964	;# 
   876   000F7D                     IOCB            equ	3965	;# 
   877   000F7E                     ANSEL           equ	3966	;# 
   878   000F7F                     ANSELH          equ	3967	;# 
   879   000F80                     PORTA           equ	3968	;# 
   880   000F81                     PORTB           equ	3969	;# 
   881   000F82                     PORTC           equ	3970	;# 
   882   000F83                     PORTD           equ	3971	;# 
   883   000F84                     PORTE           equ	3972	;# 
   884   000F89                     LATA            equ	3977	;# 
   885   000F8A                     LATB            equ	3978	;# 
   886   000F8B                     LATC            equ	3979	;# 
   887   000F8C                     LATD            equ	3980	;# 
   888   000F8D                     LATE            equ	3981	;# 
   889   000F92                     TRISA           equ	3986	;# 
   890   000F92                     DDRA            equ	3986	;# 
   891   000F93                     TRISB           equ	3987	;# 
   892   000F93                     DDRB            equ	3987	;# 
   893   000F94                     TRISC           equ	3988	;# 
   894   000F94                     DDRC            equ	3988	;# 
   895   000F95                     TRISD           equ	3989	;# 
   896   000F95                     DDRD            equ	3989	;# 
   897   000F96                     TRISE           equ	3990	;# 
   898   000F96                     DDRE            equ	3990	;# 
   899   000F9B                     OSCTUNE         equ	3995	;# 
   900   000F9D                     PIE1            equ	3997	;# 
   901   000F9E                     PIR1            equ	3998	;# 
   902   000F9F                     IPR1            equ	3999	;# 
   903   000FA0                     PIE2            equ	4000	;# 
   904   000FA1                     PIR2            equ	4001	;# 
   905   000FA2                     IPR2            equ	4002	;# 
   906   000FA6                     EECON1          equ	4006	;# 
   907   000FA7                     EECON2          equ	4007	;# 
   908   000FA8                     EEDATA          equ	4008	;# 
   909   000FA9                     EEADR           equ	4009	;# 
   910   000FAA                     EEADRH          equ	4010	;# 
   911   000FAB                     RCSTA           equ	4011	;# 
   912   000FAB                     RCSTA1          equ	4011	;# 
   913   000FAC                     TXSTA           equ	4012	;# 
   914   000FAC                     TXSTA1          equ	4012	;# 
   915   000FAD                     TXREG           equ	4013	;# 
   916   000FAD                     TXREG1          equ	4013	;# 
   917   000FAE                     RCREG           equ	4014	;# 
   918   000FAE                     RCREG1          equ	4014	;# 
   919   000FAF                     SPBRG           equ	4015	;# 
   920   000FAF                     SPBRG1          equ	4015	;# 
   921   000FB0                     SPBRGH          equ	4016	;# 
   922   000FB1                     T3CON           equ	4017	;# 
   923   000FB2                     TMR3            equ	4018	;# 
   924   000FB2                     TMR3L           equ	4018	;# 
   925   000FB3                     TMR3H           equ	4019	;# 
   926   000FB4                     CVRCON2         equ	4020	;# 
   927   000FB5                     CVRCON          equ	4021	;# 
   928   000FB6                     ECCP1AS         equ	4022	;# 
   929   000FB7                     PWM1CON         equ	4023	;# 
   930   000FB8                     BAUDCON         equ	4024	;# 
   931   000FB8                     BAUDCTL         equ	4024	;# 
   932   000FB9                     PSTRCON         equ	4025	;# 
   933   000FBA                     CCP2CON         equ	4026	;# 
   934   000FBB                     CCPR2           equ	4027	;# 
   935   000FBB                     CCPR2L          equ	4027	;# 
   936   000FBC                     CCPR2H          equ	4028	;# 
   937   000FBD                     CCP1CON         equ	4029	;# 
   938   000FBE                     CCPR1           equ	4030	;# 
   939   000FBE                     CCPR1L          equ	4030	;# 
   940   000FBF                     CCPR1H          equ	4031	;# 
   941   000FC0                     ADCON2          equ	4032	;# 
   942   000FC1                     ADCON1          equ	4033	;# 
   943   000FC2                     ADCON0          equ	4034	;# 
   944   000FC3                     ADRES           equ	4035	;# 
   945   000FC3                     ADRESL          equ	4035	;# 
   946   000FC4                     ADRESH          equ	4036	;# 
   947   000FC5                     SSPCON2         equ	4037	;# 
   948   000FC6                     SSPCON1         equ	4038	;# 
   949   000FC7                     SSPSTAT         equ	4039	;# 
   950   000FC8                     SSPADD          equ	4040	;# 
   951   000FC9                     SSPBUF          equ	4041	;# 
   952   000FCA                     T2CON           equ	4042	;# 
   953   000FCB                     PR2             equ	4043	;# 
   954   000FCB                     MEMCON          equ	4043	;# 
   955   000FCC                     TMR2            equ	4044	;# 
   956   000FCD                     T1CON           equ	4045	;# 
   957   000FCE                     TMR1            equ	4046	;# 
   958   000FCE                     TMR1L           equ	4046	;# 
   959   000FCF                     TMR1H           equ	4047	;# 
   960   000FD0                     RCON            equ	4048	;# 
   961   000FD1                     WDTCON          equ	4049	;# 
   962   000FD2                     HLVDCON         equ	4050	;# 
   963   000FD2                     LVDCON          equ	4050	;# 
   964   000FD3                     OSCCON          equ	4051	;# 
   965   000FD5                     T0CON           equ	4053	;# 
   966   000FD6                     TMR0            equ	4054	;# 
   967   000FD6                     TMR0L           equ	4054	;# 
   968   000FD7                     TMR0H           equ	4055	;# 
   969   000FD8                     STATUS          equ	4056	;# 
   970   000FD9                     FSR2            equ	4057	;# 
   971   000FD9                     FSR2L           equ	4057	;# 
   972   000FDA                     FSR2H           equ	4058	;# 
   973   000FDB                     PLUSW2          equ	4059	;# 
   974   000FDC                     PREINC2         equ	4060	;# 
   975   000FDD                     POSTDEC2        equ	4061	;# 
   976   000FDE                     POSTINC2        equ	4062	;# 
   977   000FDF                     INDF2           equ	4063	;# 
   978   000FE0                     BSR             equ	4064	;# 
   979   000FE1                     FSR1            equ	4065	;# 
   980   000FE1                     FSR1L           equ	4065	;# 
   981   000FE2                     FSR1H           equ	4066	;# 
   982   000FE3                     PLUSW1          equ	4067	;# 
   983   000FE4                     PREINC1         equ	4068	;# 
   984   000FE5                     POSTDEC1        equ	4069	;# 
   985   000FE6                     POSTINC1        equ	4070	;# 
   986   000FE7                     INDF1           equ	4071	;# 
   987   000FE8                     WREG            equ	4072	;# 
   988   000FE9                     FSR0            equ	4073	;# 
   989   000FE9                     FSR0L           equ	4073	;# 
   990   000FEA                     FSR0H           equ	4074	;# 
   991   000FEB                     PLUSW0          equ	4075	;# 
   992   000FEC                     PREINC0         equ	4076	;# 
   993   000FED                     POSTDEC0        equ	4077	;# 
   994   000FEE                     POSTINC0        equ	4078	;# 
   995   000FEF                     INDF0           equ	4079	;# 
   996   000FF0                     INTCON3         equ	4080	;# 
   997   000FF1                     INTCON2         equ	4081	;# 
   998   000FF2                     INTCON          equ	4082	;# 
   999   000FF3                     PROD            equ	4083	;# 
  1000   000FF3                     PRODL           equ	4083	;# 
  1001   000FF4                     PRODH           equ	4084	;# 
  1002   000FF5                     TABLAT          equ	4085	;# 
  1003   000FF6                     TBLPTR          equ	4086	;# 
  1004   000FF6                     TBLPTRL         equ	4086	;# 
  1005   000FF7                     TBLPTRH         equ	4087	;# 
  1006   000FF8                     TBLPTRU         equ	4088	;# 
  1007   000FF9                     PCLAT           equ	4089	;# 
  1008   000FF9                     PC              equ	4089	;# 
  1009   000FF9                     PCL             equ	4089	;# 
  1010   000FFA                     PCLATH          equ	4090	;# 
  1011   000FFB                     PCLATU          equ	4091	;# 
  1012   000FFC                     STKPTR          equ	4092	;# 
  1013   000FFD                     TOS             equ	4093	;# 
  1014   000FFD                     TOSL            equ	4093	;# 
  1015   000FFE                     TOSH            equ	4094	;# 
  1016   000FFF                     TOSU            equ	4095	;# 
  1017   000F77                     SSPMSK          equ	3959	;# 
  1018   000F78                     SLRCON          equ	3960	;# 
  1019   000F79                     CM2CON1         equ	3961	;# 
  1020   000F7A                     CM2CON0         equ	3962	;# 
  1021   000F7B                     CM1CON0         equ	3963	;# 
  1022   000F7C                     WPUB            equ	3964	;# 
  1023   000F7D                     IOCB            equ	3965	;# 
  1024   000F7E                     ANSEL           equ	3966	;# 
  1025   000F7F                     ANSELH          equ	3967	;# 
  1026   000F80                     PORTA           equ	3968	;# 
  1027   000F81                     PORTB           equ	3969	;# 
  1028   000F82                     PORTC           equ	3970	;# 
  1029   000F83                     PORTD           equ	3971	;# 
  1030   000F84                     PORTE           equ	3972	;# 
  1031   000F89                     LATA            equ	3977	;# 
  1032   000F8A                     LATB            equ	3978	;# 
  1033   000F8B                     LATC            equ	3979	;# 
  1034   000F8C                     LATD            equ	3980	;# 
  1035   000F8D                     LATE            equ	3981	;# 
  1036   000F92                     TRISA           equ	3986	;# 
  1037   000F92                     DDRA            equ	3986	;# 
  1038   000F93                     TRISB           equ	3987	;# 
  1039   000F93                     DDRB            equ	3987	;# 
  1040   000F94                     TRISC           equ	3988	;# 
  1041   000F94                     DDRC            equ	3988	;# 
  1042   000F95                     TRISD           equ	3989	;# 
  1043   000F95                     DDRD            equ	3989	;# 
  1044   000F96                     TRISE           equ	3990	;# 
  1045   000F96                     DDRE            equ	3990	;# 
  1046   000F9B                     OSCTUNE         equ	3995	;# 
  1047   000F9D                     PIE1            equ	3997	;# 
  1048   000F9E                     PIR1            equ	3998	;# 
  1049   000F9F                     IPR1            equ	3999	;# 
  1050   000FA0                     PIE2            equ	4000	;# 
  1051   000FA1                     PIR2            equ	4001	;# 
  1052   000FA2                     IPR2            equ	4002	;# 
  1053   000FA6                     EECON1          equ	4006	;# 
  1054   000FA7                     EECON2          equ	4007	;# 
  1055   000FA8                     EEDATA          equ	4008	;# 
  1056   000FA9                     EEADR           equ	4009	;# 
  1057   000FAA                     EEADRH          equ	4010	;# 
  1058   000FAB                     RCSTA           equ	4011	;# 
  1059   000FAB                     RCSTA1          equ	4011	;# 
  1060   000FAC                     TXSTA           equ	4012	;# 
  1061   000FAC                     TXSTA1          equ	4012	;# 
  1062   000FAD                     TXREG           equ	4013	;# 
  1063   000FAD                     TXREG1          equ	4013	;# 
  1064   000FAE                     RCREG           equ	4014	;# 
  1065   000FAE                     RCREG1          equ	4014	;# 
  1066   000FAF                     SPBRG           equ	4015	;# 
  1067   000FAF                     SPBRG1          equ	4015	;# 
  1068   000FB0                     SPBRGH          equ	4016	;# 
  1069   000FB1                     T3CON           equ	4017	;# 
  1070   000FB2                     TMR3            equ	4018	;# 
  1071   000FB2                     TMR3L           equ	4018	;# 
  1072   000FB3                     TMR3H           equ	4019	;# 
  1073   000FB4                     CVRCON2         equ	4020	;# 
  1074   000FB5                     CVRCON          equ	4021	;# 
  1075   000FB6                     ECCP1AS         equ	4022	;# 
  1076   000FB7                     PWM1CON         equ	4023	;# 
  1077   000FB8                     BAUDCON         equ	4024	;# 
  1078   000FB8                     BAUDCTL         equ	4024	;# 
  1079   000FB9                     PSTRCON         equ	4025	;# 
  1080   000FBA                     CCP2CON         equ	4026	;# 
  1081   000FBB                     CCPR2           equ	4027	;# 
  1082   000FBB                     CCPR2L          equ	4027	;# 
  1083   000FBC                     CCPR2H          equ	4028	;# 
  1084   000FBD                     CCP1CON         equ	4029	;# 
  1085   000FBE                     CCPR1           equ	4030	;# 
  1086   000FBE                     CCPR1L          equ	4030	;# 
  1087   000FBF                     CCPR1H          equ	4031	;# 
  1088   000FC0                     ADCON2          equ	4032	;# 
  1089   000FC1                     ADCON1          equ	4033	;# 
  1090   000FC2                     ADCON0          equ	4034	;# 
  1091   000FC3                     ADRES           equ	4035	;# 
  1092   000FC3                     ADRESL          equ	4035	;# 
  1093   000FC4                     ADRESH          equ	4036	;# 
  1094   000FC5                     SSPCON2         equ	4037	;# 
  1095   000FC6                     SSPCON1         equ	4038	;# 
  1096   000FC7                     SSPSTAT         equ	4039	;# 
  1097   000FC8                     SSPADD          equ	4040	;# 
  1098   000FC9                     SSPBUF          equ	4041	;# 
  1099   000FCA                     T2CON           equ	4042	;# 
  1100   000FCB                     PR2             equ	4043	;# 
  1101   000FCB                     MEMCON          equ	4043	;# 
  1102   000FCC                     TMR2            equ	4044	;# 
  1103   000FCD                     T1CON           equ	4045	;# 
  1104   000FCE                     TMR1            equ	4046	;# 
  1105   000FCE                     TMR1L           equ	4046	;# 
  1106   000FCF                     TMR1H           equ	4047	;# 
  1107   000FD0                     RCON            equ	4048	;# 
  1108   000FD1                     WDTCON          equ	4049	;# 
  1109   000FD2                     HLVDCON         equ	4050	;# 
  1110   000FD2                     LVDCON          equ	4050	;# 
  1111   000FD3                     OSCCON          equ	4051	;# 
  1112   000FD5                     T0CON           equ	4053	;# 
  1113   000FD6                     TMR0            equ	4054	;# 
  1114   000FD6                     TMR0L           equ	4054	;# 
  1115   000FD7                     TMR0H           equ	4055	;# 
  1116   000FD8                     STATUS          equ	4056	;# 
  1117   000FD9                     FSR2            equ	4057	;# 
  1118   000FD9                     FSR2L           equ	4057	;# 
  1119   000FDA                     FSR2H           equ	4058	;# 
  1120   000FDB                     PLUSW2          equ	4059	;# 
  1121   000FDC                     PREINC2         equ	4060	;# 
  1122   000FDD                     POSTDEC2        equ	4061	;# 
  1123   000FDE                     POSTINC2        equ	4062	;# 
  1124   000FDF                     INDF2           equ	4063	;# 
  1125   000FE0                     BSR             equ	4064	;# 
  1126   000FE1                     FSR1            equ	4065	;# 
  1127   000FE1                     FSR1L           equ	4065	;# 
  1128   000FE2                     FSR1H           equ	4066	;# 
  1129   000FE3                     PLUSW1          equ	4067	;# 
  1130   000FE4                     PREINC1         equ	4068	;# 
  1131   000FE5                     POSTDEC1        equ	4069	;# 
  1132   000FE6                     POSTINC1        equ	4070	;# 
  1133   000FE7                     INDF1           equ	4071	;# 
  1134   000FE8                     WREG            equ	4072	;# 
  1135   000FE9                     FSR0            equ	4073	;# 
  1136   000FE9                     FSR0L           equ	4073	;# 
  1137   000FEA                     FSR0H           equ	4074	;# 
  1138   000FEB                     PLUSW0          equ	4075	;# 
  1139   000FEC                     PREINC0         equ	4076	;# 
  1140   000FED                     POSTDEC0        equ	4077	;# 
  1141   000FEE                     POSTINC0        equ	4078	;# 
  1142   000FEF                     INDF0           equ	4079	;# 
  1143   000FF0                     INTCON3         equ	4080	;# 
  1144   000FF1                     INTCON2         equ	4081	;# 
  1145   000FF2                     INTCON          equ	4082	;# 
  1146   000FF3                     PROD            equ	4083	;# 
  1147   000FF3                     PRODL           equ	4083	;# 
  1148   000FF4                     PRODH           equ	4084	;# 
  1149   000FF5                     TABLAT          equ	4085	;# 
  1150   000FF6                     TBLPTR          equ	4086	;# 
  1151   000FF6                     TBLPTRL         equ	4086	;# 
  1152   000FF7                     TBLPTRH         equ	4087	;# 
  1153   000FF8                     TBLPTRU         equ	4088	;# 
  1154   000FF9                     PCLAT           equ	4089	;# 
  1155   000FF9                     PC              equ	4089	;# 
  1156   000FF9                     PCL             equ	4089	;# 
  1157   000FFA                     PCLATH          equ	4090	;# 
  1158   000FFB                     PCLATU          equ	4091	;# 
  1159   000FFC                     STKPTR          equ	4092	;# 
  1160   000FFD                     TOS             equ	4093	;# 
  1161   000FFD                     TOSL            equ	4093	;# 
  1162   000FFE                     TOSH            equ	4094	;# 
  1163   000FFF                     TOSU            equ	4095	;# 
  1164   000F77                     SSPMSK          equ	3959	;# 
  1165   000F78                     SLRCON          equ	3960	;# 
  1166   000F79                     CM2CON1         equ	3961	;# 
  1167   000F7A                     CM2CON0         equ	3962	;# 
  1168   000F7B                     CM1CON0         equ	3963	;# 
  1169   000F7C                     WPUB            equ	3964	;# 
  1170   000F7D                     IOCB            equ	3965	;# 
  1171   000F7E                     ANSEL           equ	3966	;# 
  1172   000F7F                     ANSELH          equ	3967	;# 
  1173   000F80                     PORTA           equ	3968	;# 
  1174   000F81                     PORTB           equ	3969	;# 
  1175   000F82                     PORTC           equ	3970	;# 
  1176   000F83                     PORTD           equ	3971	;# 
  1177   000F84                     PORTE           equ	3972	;# 
  1178   000F89                     LATA            equ	3977	;# 
  1179   000F8A                     LATB            equ	3978	;# 
  1180   000F8B                     LATC            equ	3979	;# 
  1181   000F8C                     LATD            equ	3980	;# 
  1182   000F8D                     LATE            equ	3981	;# 
  1183   000F92                     TRISA           equ	3986	;# 
  1184   000F92                     DDRA            equ	3986	;# 
  1185   000F93                     TRISB           equ	3987	;# 
  1186   000F93                     DDRB            equ	3987	;# 
  1187   000F94                     TRISC           equ	3988	;# 
  1188   000F94                     DDRC            equ	3988	;# 
  1189   000F95                     TRISD           equ	3989	;# 
  1190   000F95                     DDRD            equ	3989	;# 
  1191   000F96                     TRISE           equ	3990	;# 
  1192   000F96                     DDRE            equ	3990	;# 
  1193   000F9B                     OSCTUNE         equ	3995	;# 
  1194   000F9D                     PIE1            equ	3997	;# 
  1195   000F9E                     PIR1            equ	3998	;# 
  1196   000F9F                     IPR1            equ	3999	;# 
  1197   000FA0                     PIE2            equ	4000	;# 
  1198   000FA1                     PIR2            equ	4001	;# 
  1199   000FA2                     IPR2            equ	4002	;# 
  1200   000FA6                     EECON1          equ	4006	;# 
  1201   000FA7                     EECON2          equ	4007	;# 
  1202   000FA8                     EEDATA          equ	4008	;# 
  1203   000FA9                     EEADR           equ	4009	;# 
  1204   000FAA                     EEADRH          equ	4010	;# 
  1205   000FAB                     RCSTA           equ	4011	;# 
  1206   000FAB                     RCSTA1          equ	4011	;# 
  1207   000FAC                     TXSTA           equ	4012	;# 
  1208   000FAC                     TXSTA1          equ	4012	;# 
  1209   000FAD                     TXREG           equ	4013	;# 
  1210   000FAD                     TXREG1          equ	4013	;# 
  1211   000FAE                     RCREG           equ	4014	;# 
  1212   000FAE                     RCREG1          equ	4014	;# 
  1213   000FAF                     SPBRG           equ	4015	;# 
  1214   000FAF                     SPBRG1          equ	4015	;# 
  1215   000FB0                     SPBRGH          equ	4016	;# 
  1216   000FB1                     T3CON           equ	4017	;# 
  1217   000FB2                     TMR3            equ	4018	;# 
  1218   000FB2                     TMR3L           equ	4018	;# 
  1219   000FB3                     TMR3H           equ	4019	;# 
  1220   000FB4                     CVRCON2         equ	4020	;# 
  1221   000FB5                     CVRCON          equ	4021	;# 
  1222   000FB6                     ECCP1AS         equ	4022	;# 
  1223   000FB7                     PWM1CON         equ	4023	;# 
  1224   000FB8                     BAUDCON         equ	4024	;# 
  1225   000FB8                     BAUDCTL         equ	4024	;# 
  1226   000FB9                     PSTRCON         equ	4025	;# 
  1227   000FBA                     CCP2CON         equ	4026	;# 
  1228   000FBB                     CCPR2           equ	4027	;# 
  1229   000FBB                     CCPR2L          equ	4027	;# 
  1230   000FBC                     CCPR2H          equ	4028	;# 
  1231   000FBD                     CCP1CON         equ	4029	;# 
  1232   000FBE                     CCPR1           equ	4030	;# 
  1233   000FBE                     CCPR1L          equ	4030	;# 
  1234   000FBF                     CCPR1H          equ	4031	;# 
  1235   000FC0                     ADCON2          equ	4032	;# 
  1236   000FC1                     ADCON1          equ	4033	;# 
  1237   000FC2                     ADCON0          equ	4034	;# 
  1238   000FC3                     ADRES           equ	4035	;# 
  1239   000FC3                     ADRESL          equ	4035	;# 
  1240   000FC4                     ADRESH          equ	4036	;# 
  1241   000FC5                     SSPCON2         equ	4037	;# 
  1242   000FC6                     SSPCON1         equ	4038	;# 
  1243   000FC7                     SSPSTAT         equ	4039	;# 
  1244   000FC8                     SSPADD          equ	4040	;# 
  1245   000FC9                     SSPBUF          equ	4041	;# 
  1246   000FCA                     T2CON           equ	4042	;# 
  1247   000FCB                     PR2             equ	4043	;# 
  1248   000FCB                     MEMCON          equ	4043	;# 
  1249   000FCC                     TMR2            equ	4044	;# 
  1250   000FCD                     T1CON           equ	4045	;# 
  1251   000FCE                     TMR1            equ	4046	;# 
  1252   000FCE                     TMR1L           equ	4046	;# 
  1253   000FCF                     TMR1H           equ	4047	;# 
  1254   000FD0                     RCON            equ	4048	;# 
  1255   000FD1                     WDTCON          equ	4049	;# 
  1256   000FD2                     HLVDCON         equ	4050	;# 
  1257   000FD2                     LVDCON          equ	4050	;# 
  1258   000FD3                     OSCCON          equ	4051	;# 
  1259   000FD5                     T0CON           equ	4053	;# 
  1260   000FD6                     TMR0            equ	4054	;# 
  1261   000FD6                     TMR0L           equ	4054	;# 
  1262   000FD7                     TMR0H           equ	4055	;# 
  1263   000FD8                     STATUS          equ	4056	;# 
  1264   000FD9                     FSR2            equ	4057	;# 
  1265   000FD9                     FSR2L           equ	4057	;# 
  1266   000FDA                     FSR2H           equ	4058	;# 
  1267   000FDB                     PLUSW2          equ	4059	;# 
  1268   000FDC                     PREINC2         equ	4060	;# 
  1269   000FDD                     POSTDEC2        equ	4061	;# 
  1270   000FDE                     POSTINC2        equ	4062	;# 
  1271   000FDF                     INDF2           equ	4063	;# 
  1272   000FE0                     BSR             equ	4064	;# 
  1273   000FE1                     FSR1            equ	4065	;# 
  1274   000FE1                     FSR1L           equ	4065	;# 
  1275   000FE2                     FSR1H           equ	4066	;# 
  1276   000FE3                     PLUSW1          equ	4067	;# 
  1277   000FE4                     PREINC1         equ	4068	;# 
  1278   000FE5                     POSTDEC1        equ	4069	;# 
  1279   000FE6                     POSTINC1        equ	4070	;# 
  1280   000FE7                     INDF1           equ	4071	;# 
  1281   000FE8                     WREG            equ	4072	;# 
  1282   000FE9                     FSR0            equ	4073	;# 
  1283   000FE9                     FSR0L           equ	4073	;# 
  1284   000FEA                     FSR0H           equ	4074	;# 
  1285   000FEB                     PLUSW0          equ	4075	;# 
  1286   000FEC                     PREINC0         equ	4076	;# 
  1287   000FED                     POSTDEC0        equ	4077	;# 
  1288   000FEE                     POSTINC0        equ	4078	;# 
  1289   000FEF                     INDF0           equ	4079	;# 
  1290   000FF0                     INTCON3         equ	4080	;# 
  1291   000FF1                     INTCON2         equ	4081	;# 
  1292   000FF2                     INTCON          equ	4082	;# 
  1293   000FF3                     PROD            equ	4083	;# 
  1294   000FF3                     PRODL           equ	4083	;# 
  1295   000FF4                     PRODH           equ	4084	;# 
  1296   000FF5                     TABLAT          equ	4085	;# 
  1297   000FF6                     TBLPTR          equ	4086	;# 
  1298   000FF6                     TBLPTRL         equ	4086	;# 
  1299   000FF7                     TBLPTRH         equ	4087	;# 
  1300   000FF8                     TBLPTRU         equ	4088	;# 
  1301   000FF9                     PCLAT           equ	4089	;# 
  1302   000FF9                     PC              equ	4089	;# 
  1303   000FF9                     PCL             equ	4089	;# 
  1304   000FFA                     PCLATH          equ	4090	;# 
  1305   000FFB                     PCLATU          equ	4091	;# 
  1306   000FFC                     STKPTR          equ	4092	;# 
  1307   000FFD                     TOS             equ	4093	;# 
  1308   000FFD                     TOSL            equ	4093	;# 
  1309   000FFE                     TOSH            equ	4094	;# 
  1310   000FFF                     TOSU            equ	4095	;# 
  1311                           
  1312                           	psect	idataBANK1
  1313   001C5E                     __pidataBANK1:
  1314                           	callstack 0
  1315                           
  1316                           ;initializer for envio@F3358
  1317   001C5E  4D                 	db	77
  1318   001C5F  52                 	db	82
  1319   001C60  46                 	db	70
  1320   001C61  43                 	db	67
  1321   001C62  4E                 	db	78
  1322   001C63  46                 	db	70
  1323   001C64  3A                 	db	58
  1324   001C65  00                 	db	0
  1325   001C66  00                 	db	0
  1326   001C67  00                 	db	0
  1327   001C68  00                 	db	0
  1328   001C69  00                 	db	0
  1329   001C6A  00                 	db	0
  1330   001C6B  00                 	db	0
  1331   001C6C  00                 	db	0
  1332   001C6D  00                 	db	0
  1333   001C6E  00                 	db	0
  1334   001C6F  00                 	db	0
  1335   001C70  00                 	db	0
  1336   001C71  00                 	db	0
  1337   001C72  00                 	db	0
  1338   001C73  00                 	db	0
  1339   001C74  00                 	db	0
  1340   001C75  00                 	db	0
  1341   001C76  00                 	db	0
  1342   001C77  00                 	db	0
  1343   001C78  00                 	db	0
  1344   001C79  00                 	db	0
  1345   001C7A  00                 	db	0
  1346   001C7B  00                 	db	0
  1347   001C7C  00                 	db	0
  1348   001C7D  00                 	db	0
  1349   001C7E  00                 	db	0
  1350   001C7F  00                 	db	0
  1351   001C80  00                 	db	0
  1352   001C81  00                 	db	0
  1353   001C82  00                 	db	0
  1354   001C83  00                 	db	0
  1355   001C84  00                 	db	0
  1356   001C85  00                 	db	0
  1357   001C86  00                 	db	0
  1358   001C87  00                 	db	0
  1359   001C88  00                 	db	0
  1360                           
  1361                           	psect	smallconst
  1362   001000                     __psmallconst:
  1363                           	callstack 0
  1364   001000  00                 	db	0
  1365   001001                     _default_security_key:
  1366                           	callstack 0
  1367   001001  00                 	db	0
  1368   001002  10                 	db	16
  1369   001003  25                 	db	37
  1370   001004  37                 	db	55
  1371   001005  04                 	db	4
  1372   001006  55                 	db	85
  1373   001007  06                 	db	6
  1374   001008  79                 	db	121
  1375   001009  08                 	db	8
  1376   00100A  09                 	db	9
  1377   00100B  10                 	db	16
  1378   00100C  11                 	db	17
  1379   00100D  12                 	db	18
  1380   00100E  13                 	db	19
  1381   00100F  14                 	db	20
  1382   001010  15                 	db	21
  1383   001011                     __end_of_default_security_key:
  1384                           	callstack 0
  1385   001011                     _default_mac_address:
  1386                           	callstack 0
  1387   001011  11                 	db	17
  1388   001012  28                 	db	40
  1389   001013  35                 	db	53
  1390   001014  44                 	db	68
  1391   001015  56                 	db	86
  1392   001016  66                 	db	102
  1393   001017  77                 	db	119
  1394   001018  01                 	db	1
  1395   001019                     __end_of_default_mac_address:
  1396                           	callstack 0
  1397   007CF0                     _TMR1IF         set	31984
  1398   007E68                     _TMR1ON         set	32360
  1399   007E69                     _TMR1CS         set	32361
  1400   007E6B                     _T1OSCEN        set	32363
  1401   007E6A                     _T1SYNC         set	32362
  1402   007E6D                     _T1CKPS1        set	32365
  1403   007E6C                     _T1CKPS0        set	32364
  1404   007E6F                     _T1RD16         set	32367
  1405   007F8F                     _RBPU           set	32655
  1406   007CED                     _RCIE           set	31981
  1407   007CEE                     _ADIE           set	31982
  1408   007D03                     _BCLIE          set	32003
  1409   007CEB                     _SSPIE          set	31979
  1410   007D04                     _EEIE           set	32004
  1411   007D00                     _CCP2IE         set	32000
  1412   007CEA                     _CCP1IE         set	31978
  1413   007CE9                     _TMR2IE         set	31977
  1414   007CE8                     _TMR1IE         set	31976
  1415   007F95                     _T0IE           set	32661
  1416   007F93                     _RBIE           set	32659
  1417   007F94                     _INT0E          set	32660
  1418   007F96                     _PEIE           set	32662
  1419   007F97                     _GIE            set	32663
  1420   007E87                     _IPEN           set	32391
  1421   000FCF                     _TMR1H          set	4047
  1422   000FCE                     _TMR1L          set	4046
  1423   000F9B                     _OSCTUNE        set	3995
  1424   000FD3                     _OSCCON         set	4051
  1425   000F95                     _TRISDbits      set	3989
  1426   000F96                     _TRISEbits      set	3990
  1427   000F93                     _TRISBbits      set	3987
  1428   000F84                     _PORTE          set	3972
  1429   000F83                     _PORTD          set	3971
  1430   000F82                     _PORTC          set	3970
  1431   000F81                     _PORTB          set	3969
  1432   000F80                     _PORTA          set	3968
  1433   000F8D                     _LATEbits       set	3981
  1434   000F82                     _PORTCbits      set	3970
  1435   000FC9                     _SSPBUF         set	4041
  1436   000F9E                     _PIR1bits       set	3998
  1437   000FC6                     _SSPCON1bits    set	4038
  1438   000FC6                     _SSPCON1        set	4038
  1439   000FC7                     _SSPSTATbits    set	4039
  1440   000F94                     _TRISCbits      set	3988
  1441   000F81                     _PORTBbits      set	3969
  1442   000F8C                     _LATDbits       set	3980
  1443   000F8B                     _LATCbits       set	3979
  1444   001019  00                 	db	0	; dummy byte at the end
  1445   000002                     __activetblptr  equ	2
  1446                           
  1447                           ; #config settings
  1448                           
  1449                           	psect	cinit
  1450   001A0C                     __pcinit:
  1451                           	callstack 0
  1452   001A0C                     start_initialization:
  1453                           	callstack 0
  1454   001A0C                     __initialization:
  1455                           	callstack 0
  1456                           
  1457                           ; Initialize objects allocated to BANK1 (43 bytes)
  1458                           ; load TBLPTR registers with __pidataBANK1
  1459   001A0C  0E5E               	movlw	low __pidataBANK1
  1460   001A0E  6EF6               	movwf	tblptrl,c
  1461   001A10  0E1C               	movlw	high __pidataBANK1
  1462   001A12  6EF7               	movwf	tblptrh,c
  1463   001A14  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1464   001A16  6EF8               	movwf	tblptru,c
  1465   001A18  EE01  F0C1         	lfsr	0,__pdataBANK1
  1466   001A1C  EE10 F02B          	lfsr	1,43
  1467   001A20                     copy_data0:
  1468   001A20  0009               	tblrd		*+
  1469   001A22  CFF5 FFEE          	movff	tablat,postinc0
  1470   001A26  50E5               	movf	postdec1,w,c
  1471   001A28  50E1               	movf	fsr1l,w,c
  1472   001A2A  E1FA               	bnz	copy_data0
  1473                           
  1474                           ; Clear objects allocated to BANK2 (142 bytes)
  1475   001A2C  EE02  F000         	lfsr	0,__pbssBANK2
  1476   001A30  0E8E               	movlw	142
  1477   001A32                     clear_0:
  1478   001A32  6AEE               	clrf	postinc0,c
  1479   001A34  06E8               	decf	wreg,f,c
  1480   001A36  E1FD               	bnz	clear_0
  1481                           
  1482                           ; Clear objects allocated to BANK1 (102 bytes)
  1483   001A38  EE01  F000         	lfsr	0,__pbssBANK1
  1484   001A3C  0E66               	movlw	102
  1485   001A3E                     clear_1:
  1486   001A3E  6AEE               	clrf	postinc0,c
  1487   001A40  06E8               	decf	wreg,f,c
  1488   001A42  E1FD               	bnz	clear_1
  1489                           
  1490                           ; Clear objects allocated to COMRAM (38 bytes)
  1491   001A44  EE00  F001         	lfsr	0,__pbssCOMRAM
  1492   001A48  0E26               	movlw	38
  1493   001A4A                     clear_2:
  1494   001A4A  6AEE               	clrf	postinc0,c
  1495   001A4C  06E8               	decf	wreg,f,c
  1496   001A4E  E1FD               	bnz	clear_2
  1497   001A50                     end_of_initialization:
  1498                           	callstack 0
  1499   001A50                     __end_of__initialization:
  1500                           	callstack 0
  1501   001A50  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1502   001A52  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1503   001A54  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1504   001A56  6EF8               	movwf	tblptru,c
  1505   001A58  0100               	movlb	0
  1506   001A5A  EFC0  F00A         	goto	_main	;jump to C main() function
  1507                           
  1508                           	psect	bssCOMRAM
  1509   000001                     __pbssCOMRAM:
  1510                           	callstack 0
  1511   000001                     _timeStamp:
  1512                           	callstack 0
  1513   000001                     	ds	4
  1514   000005                     _estadoActual:
  1515                           	callstack 0
  1516   000005                     	ds	1
  1517   000006                     _long_mac_address_e:
  1518                           	callstack 0
  1519   000006                     	ds	1
  1520   000007                     _data_config_s:
  1521                           	callstack 0
  1522   000007                     	ds	32
  1523                           
  1524                           	psect	bssBANK1
  1525   000100                     __pbssBANK1:
  1526                           	callstack 0
  1527   000100                     envio@F3356:
  1528                           	callstack 0
  1529   000100                     	ds	32
  1530   000120                     _data_in_s:
  1531                           	callstack 0
  1532   000120                     	ds	70
  1533                           
  1534                           	psect	dataBANK1
  1535   0001C1                     __pdataBANK1:
  1536                           	callstack 0
  1537   0001C1                     envio@F3358:
  1538                           	callstack 0
  1539   0001C1                     	ds	43
  1540                           
  1541                           	psect	bssBANK2
  1542   000200                     __pbssBANK2:
  1543                           	callstack 0
  1544   000200                     envio@F3354:
  1545                           	callstack 0
  1546   000200                     	ds	71
  1547   000247                     _data_out_s:
  1548                           	callstack 0
  1549   000247                     	ds	71
  1550                           
  1551                           	psect	cstackBANK1
  1552   000166                     __pcstackBANK1:
  1553                           	callstack 0
  1554   000166                     main@data_out_s:
  1555                           	callstack 0
  1556                           
  1557                           ; 71 bytes @ 0x0
  1558   000166                     	ds	71
  1559   0001AD                     main@delay_parpadeo:
  1560                           	callstack 0
  1561                           
  1562                           ; 9 bytes @ 0x47
  1563   0001AD                     	ds	9
  1564   0001B6                     main@boton1:
  1565                           	callstack 0
  1566                           
  1567                           ; 11 bytes @ 0x50
  1568   0001B6                     	ds	11
  1569                           
  1570                           	psect	cstackBANK0
  1571   000060                     __pcstackBANK0:
  1572                           	callstack 0
  1573   000060                     envio@buuf:
  1574                           	callstack 0
  1575                           
  1576                           ; 43 bytes @ 0x0
  1577   000060                     	ds	43
  1578   00008B                     envio@size:
  1579                           	callstack 0
  1580                           
  1581                           ; 1 bytes @ 0x2B
  1582   00008B                     	ds	1
  1583   00008C                     envio@data_config_s:
  1584                           	callstack 0
  1585                           
  1586                           ; 32 bytes @ 0x2C
  1587   00008C                     	ds	32
  1588   0000AC                     envio@data_out_s:
  1589                           	callstack 0
  1590                           
  1591                           ; 71 bytes @ 0x4C
  1592   0000AC                     	ds	71
  1593                           
  1594                           	psect	cstackCOMRAM
  1595   000027                     __pcstackCOMRAM:
  1596                           	callstack 0
  1597   000027                     ?_MRF24GetDataIn:
  1598                           	callstack 0
  1599   000027                     ?_strlen:
  1600                           	callstack 0
  1601   000027                     SetCSPin@estado:
  1602                           	callstack 0
  1603   000027                     SetWakePin@estado:
  1604                           	callstack 0
  1605   000027                     SetResetPin@estado:
  1606                           	callstack 0
  1607   000027                     SPIWriteByte@dato:
  1608                           	callstack 0
  1609   000027                     DelayReset@delay:
  1610                           	callstack 0
  1611   000027                     memcpy@d1:
  1612                           	callstack 0
  1613   000027                     strlen@s:
  1614                           	callstack 0
  1615   000027                     strncpy@d:
  1616                           	callstack 0
  1617   000027                     DelayInit@delay:
  1618                           	callstack 0
  1619   000027                     DelayIsRunning@delay:
  1620                           	callstack 0
  1621   000027                     
  1622                           ; 1 bytes @ 0x0
  1623   000027                     	ds	1
  1624   000028                     WriteByteSPIPort@dato:
  1625                           	callstack 0
  1626   000028                     memcpy@s1:
  1627                           	callstack 0
  1628   000028                     strncpy@s:
  1629                           	callstack 0
  1630   000028                     SPIWrite2Byte@dato:
  1631                           	callstack 0
  1632   000028                     
  1633                           ; 1 bytes @ 0x1
  1634   000028                     	ds	1
  1635   000029                     SetShortAddr@valor:
  1636                           	callstack 0
  1637   000029                     GetShortAddr@leido_spi:
  1638                           	callstack 0
  1639   000029                     strlen@a:
  1640                           	callstack 0
  1641   000029                     DelayRead@delay:
  1642                           	callstack 0
  1643   000029                     memcpy@n:
  1644                           	callstack 0
  1645   000029                     strncpy@n:
  1646                           	callstack 0
  1647   000029                     DelayInit@duration:
  1648                           	callstack 0
  1649   000029                     
  1650                           ; 1 bytes @ 0x2
  1651   000029                     	ds	1
  1652   00002A                     SetShortAddr@reg_address:
  1653                           	callstack 0
  1654   00002A                     GetShortAddr@reg_address:
  1655                           	callstack 0
  1656   00002A                     Write2ByteSPIPort@dato:
  1657                           	callstack 0
  1658   00002A                     
  1659                           ; 1 bytes @ 0x3
  1660   00002A                     	ds	1
  1661   00002B                     SetDeviceMACAddress@i:
  1662                           	callstack 0
  1663   00002B                     memcpy@tmp:
  1664                           	callstack 0
  1665   00002B                     ??_strncpy:
  1666   00002B                     ??_DelayRead:
  1667   00002B                     
  1668                           ; 1 bytes @ 0x4
  1669   00002B                     	ds	1
  1670   00002C                     memcpy@d:
  1671                           	callstack 0
  1672   00002C                     strncpy@cp:
  1673                           	callstack 0
  1674   00002C                     SetLongAddr@reg_address:
  1675                           	callstack 0
  1676   00002C                     GetLongAddr@reg_address:
  1677                           	callstack 0
  1678   00002C                     
  1679                           ; 1 bytes @ 0x5
  1680   00002C                     	ds	1
  1681   00002D                     memcpy@s:
  1682                           	callstack 0
  1683   00002D                     DebounceFSMInit@antirrebote_boton_n:
  1684                           	callstack 0
  1685   00002D                     
  1686                           ; 1 bytes @ 0x6
  1687   00002D                     	ds	1
  1688   00002E                     SetLongAddr@valor:
  1689                           	callstack 0
  1690   00002E                     ??_GetLongAddr:
  1691                           
  1692                           ; 1 bytes @ 0x7
  1693   00002E                     	ds	1
  1694   00002F                     ??_SetLongAddr:
  1695   00002F                     
  1696                           ; 1 bytes @ 0x8
  1697   00002F                     	ds	1
  1698   000030                     GetLongAddr@respuesta:
  1699                           	callstack 0
  1700                           
  1701                           ; 1 bytes @ 0x9
  1702   000030                     	ds	1
  1703   000031                     MRF24TransmitirDato@p_info_out_s:
  1704                           	callstack 0
  1705   000031                     ??_SetChannel:
  1706   000031                     ??_MRF24ReciboPaquete:
  1707                           
  1708                           ; 1 bytes @ 0xA
  1709   000031                     	ds	1
  1710   000032                     ??_MRF24TransmitirDato:
  1711                           
  1712                           ; 1 bytes @ 0xB
  1713   000032                     	ds	4
  1714   000036                     MRF24ReciboPaquete@add:
  1715                           	callstack 0
  1716                           
  1717                           ; 2 bytes @ 0xF
  1718   000036                     	ds	1
  1719   000037                     MRF24TransmitirDato@i:
  1720                           	callstack 0
  1721   000037                     DebounceFSMUpdate@antirrebote_boton_n:
  1722                           	callstack 0
  1723   000037                     ??_InicializoMRF24:
  1724                           
  1725                           ; 1 bytes @ 0x10
  1726   000037                     	ds	1
  1727   000038                     MRF24TransmitirDato@pos_mem:
  1728                           	callstack 0
  1729   000038                     MRF24ReciboPaquete@i:
  1730                           	callstack 0
  1731                           
  1732                           ; 1 bytes @ 0x11
  1733   000038                     	ds	1
  1734   000039                     InicializoMRF24@lectura:
  1735                           	callstack 0
  1736   000039                     DebounceFSMUpdate@estado_pin:
  1737                           	callstack 0
  1738   000039                     
  1739                           ; 1 bytes @ 0x12
  1740   000039                     	ds	1
  1741   00003A                     InicializoMRF24@delay_time_out:
  1742                           	callstack 0
  1743   00003A                     ??_DebounceFSMUpdate:
  1744                           
  1745                           ; 1 bytes @ 0x13
  1746   00003A                     	ds	9
  1747   000043                     ??_MRF24J40Init:
  1748                           
  1749                           ; 1 bytes @ 0x1C
  1750   000043                     	ds	1
  1751   000044                     ??_main:
  1752                           
  1753                           ; 1 bytes @ 0x1D
  1754   000044                     	ds	2
  1755                           
  1756 ;;
  1757 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1758 ;;
  1759 ;; *************** function _main *****************
  1760 ;; Defined at:
  1761 ;;		line 32 in file "main.c"
  1762 ;; Parameters:    Size  Location     Type
  1763 ;;		None
  1764 ;; Auto vars:     Size  Location     Type
  1765 ;;  mrf24_data_i    2    0        PTR struct .
  1766 ;;		 -> data_in_s(70), 
  1767 ;;  data_out_s     71    0[BANK1 ] struct .
  1768 ;;  boton1         11   80[BANK1 ] struct .
  1769 ;;  delay_parpad    9   71[BANK1 ] struct .
  1770 ;; Return value:  Size  Location     Type
  1771 ;;                  1    wreg      void 
  1772 ;; Registers used:
  1773 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1774 ;; Tracked objects:
  1775 ;;		On entry : 0/0
  1776 ;;		On exit  : 0/0
  1777 ;;		Unchanged: 0/0
  1778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1780 ;;      Locals:         0       0      91       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Totals:         2       0      91       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;Total ram usage:       93 bytes
  1784 ;; Hardware stack levels required when called: 8
  1785 ;; This function calls:
  1786 ;;		_BoardInit
  1787 ;;		_DebounceFSMInit
  1788 ;;		_DebounceFSMUpdate
  1789 ;;		_DelayInit
  1790 ;;		_DelayRead
  1791 ;;		_MRF24GetDataIn
  1792 ;;		_MRF24IsNewMsg
  1793 ;;		_MRF24J40Init
  1794 ;;		_MRF24ReciboPaquete
  1795 ;;		_envio
  1796 ;; This function is called by:
  1797 ;;		Startup code after reset
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           	psect	text0
  1802   001580                     __ptext0:
  1803                           	callstack 0
  1804   001580                     _main:
  1805                           	callstack 23
  1806   001580                     
  1807                           ;main.c: 34:     delayNoBloqueanteData_t delay_parpadeo;;main.c: 35:     debounceData_t 
      +                          boton1;;main.c: 36:  DebounceFSMInit(&boton1);
  1808   001580  0EB6               	movlw	low main@boton1
  1809   001582  6E2D               	movwf	DebounceFSMInit@antirrebote_boton_n^0,c
  1810   001584  0E01               	movlw	high main@boton1
  1811   001586  6E2E               	movwf	(DebounceFSMInit@antirrebote_boton_n+1)^0,c
  1812   001588  ECAF  F00D         	call	_DebounceFSMInit	;wreg free
  1813   00158C                     
  1814                           ;main.c: 37:     BoardInit();
  1815   00158C  ECD5  F00C         	call	_BoardInit	;wreg free
  1816   001590                     
  1817                           ;main.c: 38:     MRF24J40Init();
  1818   001590  EC92  F00D         	call	_MRF24J40Init	;wreg free
  1819   001594                     
  1820                           ;main.c: 39:     DelayInit(&delay_parpadeo, 1000);
  1821   001594  0EAD               	movlw	low main@delay_parpadeo
  1822   001596  6E27               	movwf	DelayInit@delay^0,c
  1823   001598  0E01               	movlw	high main@delay_parpadeo
  1824   00159A  6E28               	movwf	(DelayInit@delay+1)^0,c
  1825   00159C  0EE8               	movlw	232
  1826   00159E  6E29               	movwf	DelayInit@duration^0,c
  1827   0015A0  0E03               	movlw	3
  1828   0015A2  6E2A               	movwf	(DelayInit@duration+1)^0,c
  1829   0015A4  0E00               	movlw	0
  1830   0015A6  6E2B               	movwf	(DelayInit@duration+2)^0,c
  1831   0015A8  0E00               	movlw	0
  1832   0015AA  6E2C               	movwf	(DelayInit@duration+3)^0,c
  1833   0015AC  EC19  F00E         	call	_DelayInit	;wreg free
  1834   0015B0                     
  1835                           ;main.c: 41:     mrf24_data_out_t data_out_s;;main.c: 42:  data_out_s.dest_address = (0x
      +                          1111);
  1836   0015B0  0E11               	movlw	17
  1837   0015B2  0101               	movlb	1	; () banked
  1838   0015B4  6F69               	movwf	(main@data_out_s+3)& (0+255),b
  1839   0015B6  0E11               	movlw	17
  1840   0015B8  6F68               	movwf	(main@data_out_s+2)& (0+255),b
  1841   0015BA                     
  1842                           ; BSR set to: 1
  1843                           ;main.c: 43:  data_out_s.dest_panid = 0x1234;
  1844   0015BA  0E12               	movlw	18
  1845   0015BC  6F67               	movwf	(main@data_out_s+1)& (0+255),b
  1846   0015BE  0E34               	movlw	52
  1847   0015C0  6F66               	movwf	main@data_out_s& (0+255),b
  1848   0015C2                     
  1849                           ; BSR set to: 1
  1850                           ;main.c: 44:  data_out_s.origin_address = 0x4567;
  1851   0015C2  0E45               	movlw	69
  1852   0015C4  6F6B               	movwf	(main@data_out_s+5)& (0+255),b
  1853   0015C6  0E67               	movlw	103
  1854   0015C8  6F6A               	movwf	(main@data_out_s+4)& (0+255),b
  1855   0015CA                     l296:
  1856   0015CA  0004               	clrwdt		;# 
  1857                           
  1858                           ;main.c: 49:         switch(DebounceFSMUpdate(&boton1,PORTCbits.RC2)) {
  1859   0015CC  EFEC  F00A         	goto	l2365
  1860   0015D0                     l2361:
  1861                           
  1862                           ;main.c: 52:                 envio();
  1863   0015D0  EC0A  F00C         	call	_envio	;wreg free
  1864                           
  1865                           ;main.c: 53:     break;
  1866   0015D4  EF0C  F00B         	goto	l2367
  1867   0015D8                     l2365:
  1868   0015D8  0EB6               	movlw	low main@boton1
  1869   0015DA  6E37               	movwf	DebounceFSMUpdate@antirrebote_boton_n^0,c
  1870   0015DC  0E01               	movlw	high main@boton1
  1871   0015DE  6E38               	movwf	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,c
  1872   0015E0  B482               	btfsc	130,2,c	;volatile
  1873   0015E2  EFF5  F00A         	goto	u971
  1874   0015E6  EFF8  F00A         	goto	u970
  1875   0015EA                     u971:
  1876   0015EA  0E01               	movlw	1
  1877   0015EC  EFF9  F00A         	goto	u976
  1878   0015F0                     u970:
  1879   0015F0  0E00               	movlw	0
  1880   0015F2                     u976:
  1881   0015F2  6E39               	movwf	DebounceFSMUpdate@estado_pin^0,c
  1882   0015F4  EC13  F00A         	call	_DebounceFSMUpdate	;wreg free
  1883   0015F8  6E44               	movwf	??_main^0,c
  1884   0015FA  6A45               	clrf	(??_main+1)^0,c
  1885                           
  1886                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1887                           ; Switch size 1, requested type "simple"
  1888                           ; Number of cases is 1, Range of values is 0 to 0
  1889                           ; switch strategies available:
  1890                           ; Name         Instructions Cycles
  1891                           ; simple_byte            4     3 (average)
  1892                           ;	Chosen strategy is simple_byte
  1893   0015FC  5045               	movf	(??_main+1)^0,w,c
  1894   0015FE  0A00               	xorlw	0	; case 0
  1895   001600  B4D8               	btfsc	status,2,c
  1896   001602  EF05  F00B         	goto	l2445
  1897   001606  EF0C  F00B         	goto	l2367
  1898   00160A                     l2445:
  1899                           
  1900                           ; Switch size 1, requested type "simple"
  1901                           ; Number of cases is 1, Range of values is 1 to 1
  1902                           ; switch strategies available:
  1903                           ; Name         Instructions Cycles
  1904                           ; simple_byte            4     3 (average)
  1905                           ;	Chosen strategy is simple_byte
  1906   00160A  5044               	movf	??_main^0,w,c
  1907   00160C  0A01               	xorlw	1	; case 1
  1908   00160E  B4D8               	btfsc	status,2,c
  1909   001610  EFE8  F00A         	goto	l2361
  1910   001614  EF0C  F00B         	goto	l2367
  1911   001618                     l2367:
  1912                           
  1913                           ;main.c: 59:         if(MRF24IsNewMsg() == MSG_PRESENT) {
  1914   001618  ECE8  F00D         	call	_MRF24IsNewMsg	;wreg free
  1915   00161C  0A03               	xorlw	3
  1916   00161E  A4D8               	btfss	status,2,c
  1917   001620  EF14  F00B         	goto	u981
  1918   001624  EF16  F00B         	goto	u980
  1919   001628                     u981:
  1920   001628  EF1A  F00B         	goto	l2373
  1921   00162C                     u980:
  1922   00162C  EC0C  F00F         	call	_MRF24GetDataIn	;wreg free
  1923   001630                     
  1924                           ;main.c: 62:             MRF24ReciboPaquete();
  1925   001630  EC3B  F00B         	call	_MRF24ReciboPaquete	;wreg free
  1926   001634                     l2373:
  1927                           
  1928                           ;main.c: 87:         if(DelayRead(&delay_parpadeo)) {
  1929   001634  0EAD               	movlw	low main@delay_parpadeo
  1930   001636  6E29               	movwf	DelayRead@delay^0,c
  1931   001638  0E01               	movlw	high main@delay_parpadeo
  1932   00163A  6E2A               	movwf	(DelayRead@delay+1)^0,c
  1933   00163C  ECAD  F00B         	call	_DelayRead	;wreg free
  1934   001640  0900               	iorlw	0
  1935   001642  B4D8               	btfsc	status,2,c
  1936   001644  EF26  F00B         	goto	u991
  1937   001648  EF28  F00B         	goto	u990
  1938   00164C                     u991:
  1939   00164C  EFE5  F00A         	goto	l296
  1940   001650                     u990:
  1941   001650                     
  1942                           ;main.c: 88:             LATEbits.LATE0 = !LATEbits.LATE0;
  1943   001650  A08D               	btfss	141,0,c	;volatile
  1944   001652  EF2D  F00B         	goto	u1001
  1945   001656  EF31  F00B         	goto	u1000
  1946   00165A                     u1001:
  1947   00165A  6A44               	clrf	??_main^0,c
  1948   00165C  2A44               	incf	??_main^0,f,c
  1949   00165E  EF32  F00B         	goto	u1018
  1950   001662                     u1000:
  1951   001662  6A44               	clrf	??_main^0,c
  1952   001664                     u1018:
  1953   001664  508D               	movf	141,w,c	;volatile
  1954   001666  1844               	xorwf	??_main^0,w,c
  1955   001668  0BFE               	andlw	-2
  1956   00166A  1844               	xorwf	??_main^0,w,c
  1957   00166C  6E8D               	movwf	141,c	;volatile
  1958   00166E  EFE5  F00A         	goto	l296
  1959   001672  EF20  F000         	goto	start
  1960   001676                     __end_of_main:
  1961                           	callstack 0
  1962                           
  1963 ;; *************** function _envio *****************
  1964 ;; Defined at:
  1965 ;;		line 93 in file "main.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;		None
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  data_out_s     71   76[BANK0 ] struct .
  1970 ;;  buuf           43    0[BANK0 ] unsigned char [43]
  1971 ;;  data_config_   32   44[BANK0 ] struct .
  1972 ;;  size            1   43[BANK0 ] unsigned char 
  1973 ;; Return value:  Size  Location     Type
  1974 ;;                  1    wreg      void 
  1975 ;; Registers used:
  1976 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1977 ;; Tracked objects:
  1978 ;;		On entry : 0/0
  1979 ;;		On exit  : 0/0
  1980 ;;		Unchanged: 0/0
  1981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Locals:         0     147       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1985 ;;      Totals:         0     147       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;Total ram usage:      147 bytes
  1987 ;; Hardware stack levels used: 1
  1988 ;; Hardware stack levels required when called: 6
  1989 ;; This function calls:
  1990 ;;		_MRF24TransmitirDato
  1991 ;;		_memcpy
  1992 ;;		_strlen
  1993 ;; This function is called by:
  1994 ;;		_main
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text1
  1999   001814                     __ptext1:
  2000                           	callstack 0
  2001   001814                     _envio:
  2002                           	callstack 24
  2003   001814                     
  2004                           ;main.c: 95:     mrf24_data_out_t data_out_s = {0};
  2005   001814  EE22  F000         	lfsr	2,envio@F3354
  2006   001818  EE10  F0AC         	lfsr	1,envio@data_out_s
  2007   00181C  0E46               	movlw	70
  2008   00181E                     u931:
  2009   00181E  CFDB FFE3          	movff	plusw2,plusw1
  2010   001822  06E8               	decf	wreg,f,c
  2011   001824  E2FC               	bc	u931
  2012                           
  2013                           ;main.c: 96:     mrf24_data_config_t data_config_s = {0};
  2014   001826  EE21  F000         	lfsr	2,envio@F3356
  2015   00182A  EE10  F08C         	lfsr	1,envio@data_config_s
  2016   00182E  0E1F               	movlw	31
  2017   001830                     u941:
  2018   001830  CFDB FFE3          	movff	plusw2,plusw1
  2019   001834  06E8               	decf	wreg,f,c
  2020   001836  E2FC               	bc	u941
  2021   001838                     
  2022                           ;main.c: 98:     data_out_s.dest_address = (0x1111);
  2023   001838  0E11               	movlw	17
  2024   00183A  0100               	movlb	0	; () banked
  2025   00183C  6FAF               	movwf	(envio@data_out_s+3)& (0+255),b
  2026   00183E  0E11               	movlw	17
  2027   001840  6FAE               	movwf	(envio@data_out_s+2)& (0+255),b
  2028   001842                     
  2029                           ; BSR set to: 0
  2030                           ;main.c: 99:  data_out_s.dest_panid = 0x1234;
  2031   001842  0E12               	movlw	18
  2032   001844  6FAD               	movwf	(envio@data_out_s+1)& (0+255),b
  2033   001846  0E34               	movlw	52
  2034   001848  6FAC               	movwf	envio@data_out_s& (0+255),b
  2035   00184A                     
  2036                           ; BSR set to: 0
  2037                           ;main.c: 100:  data_out_s.origin_address = 0x4567;
  2038   00184A  0E45               	movlw	69
  2039   00184C  6FB1               	movwf	(envio@data_out_s+5)& (0+255),b
  2040   00184E  0E67               	movlw	103
  2041   001850  6FB0               	movwf	(envio@data_out_s+4)& (0+255),b
  2042   001852                     
  2043                           ; BSR set to: 0
  2044                           ;main.c: 102:     data_config_s.my_channel = CH_11;
  2045   001852  0E03               	movlw	3
  2046   001854  6F8C               	movwf	envio@data_config_s& (0+255),b
  2047   001856                     
  2048                           ; BSR set to: 0
  2049                           ;main.c: 103:     data_config_s.my_address = (0x1111);
  2050   001856  0E11               	movlw	17
  2051   001858  6F90               	movwf	(envio@data_config_s+4)& (0+255),b
  2052   00185A  0E11               	movlw	17
  2053   00185C  6F8F               	movwf	(envio@data_config_s+3)& (0+255),b
  2054   00185E                     
  2055                           ; BSR set to: 0
  2056                           ;main.c: 104:     data_config_s.my_panid = 0x1234;
  2057   00185E  0E12               	movlw	18
  2058   001860  6F8E               	movwf	(envio@data_config_s+2)& (0+255),b
  2059   001862  0E34               	movlw	52
  2060   001864  6F8D               	movwf	(envio@data_config_s+1)& (0+255),b
  2061   001866                     
  2062                           ; BSR set to: 0
  2063                           ;main.c: 105:     data_config_s.intervalo = 0xf7;
  2064   001866  0E00               	movlw	0
  2065   001868  6F92               	movwf	(envio@data_config_s+6)& (0+255),b
  2066   00186A  0EF7               	movlw	247
  2067   00186C  6F91               	movwf	(envio@data_config_s+5)& (0+255),b
  2068   00186E                     
  2069                           ; BSR set to: 0
  2070                           ;main.c: 106:     char buuf[sizeof(data_config_s) + 10] = {"MRFCNF:"};
  2071   00186E  EE21  F0C1         	lfsr	2,envio@F3358
  2072   001872  EE10  F060         	lfsr	1,envio@buuf
  2073   001876  0E2A               	movlw	42
  2074   001878                     u951:
  2075   001878  CFDB FFE3          	movff	plusw2,plusw1
  2076   00187C  06E8               	decf	wreg,f,c
  2077   00187E  E2FC               	bc	u951
  2078   001880                     
  2079                           ; BSR set to: 0
  2080                           ;main.c: 108:     uint8_t size = strlen(buuf);
  2081   001880  0E60               	movlw	low envio@buuf
  2082   001882  6E27               	movwf	strlen@s^0,c
  2083   001884  EC02  F00E         	call	_strlen	;wreg free
  2084   001888  5027               	movf	?_strlen^0,w,c
  2085   00188A  0100               	movlb	0	; () banked
  2086   00188C  6F8B               	movwf	envio@size& (0+255),b
  2087   00188E                     
  2088                           ; BSR set to: 0
  2089                           ;main.c: 110:     memcpy(buuf + size, &data_config_s, sizeof(data_config_s));
  2090   00188E  518B               	movf	envio@size& (0+255),w,b
  2091   001890  0F60               	addlw	low envio@buuf
  2092   001892  6E27               	movwf	memcpy@d1^0,c
  2093   001894  0E8C               	movlw	low envio@data_config_s
  2094   001896  6E28               	movwf	memcpy@s1^0,c
  2095   001898  0E00               	movlw	0
  2096   00189A  6E2A               	movwf	(memcpy@n+1)^0,c
  2097   00189C  0E20               	movlw	32
  2098   00189E  6E29               	movwf	memcpy@n^0,c
  2099   0018A0  EC72  F00D         	call	_memcpy	;wreg free
  2100   0018A4                     
  2101                           ;main.c: 112:     size += sizeof(data_config_s);
  2102   0018A4  0E20               	movlw	32
  2103   0018A6  0100               	movlb	0	; () banked
  2104   0018A8  278B               	addwf	envio@size& (0+255),f,b
  2105   0018AA                     
  2106                           ; BSR set to: 0
  2107                           ;main.c: 114:     memcpy(data_out_s.buffer, buuf, size);
  2108   0018AA  0EB2               	movlw	low (envio@data_out_s+6)
  2109   0018AC  6E27               	movwf	memcpy@d1^0,c
  2110   0018AE  0E60               	movlw	low envio@buuf
  2111   0018B0  6E28               	movwf	memcpy@s1^0,c
  2112   0018B2  C08B  F029         	movff	envio@size,memcpy@n
  2113   0018B6  6A2A               	clrf	(memcpy@n+1)^0,c
  2114   0018B8  EC72  F00D         	call	_memcpy	;wreg free
  2115   0018BC                     
  2116                           ;main.c: 115:     data_out_s.buffer_size = size;
  2117   0018BC  C08B  F0F2         	movff	envio@size,envio@data_out_s+70
  2118   0018C0                     
  2119                           ;main.c: 117:     MRF24TransmitirDato(&data_out_s);
  2120   0018C0  0EAC               	movlw	low envio@data_out_s
  2121   0018C2  6E31               	movwf	MRF24TransmitirDato@p_info_out_s^0,c
  2122   0018C4  EC0D  F008         	call	_MRF24TransmitirDato	;wreg free
  2123   0018C8  0012               	return		;funcret
  2124   0018CA                     __end_of_envio:
  2125                           	callstack 0
  2126                           
  2127 ;; *************** function _strlen *****************
  2128 ;; Defined at:
  2129 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strlen.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;  s               1    0[COMRAM] PTR const unsigned char 
  2132 ;;		 -> envio@buuf(43), 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  a               1    2[COMRAM] PTR const unsigned char 
  2135 ;;		 -> envio@buuf(43), 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  2    0[COMRAM] unsigned int 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2145 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2148 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2149 ;;Total ram usage:        3 bytes
  2150 ;; Hardware stack levels used: 1
  2151 ;; Hardware stack levels required when called: 1
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_envio
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text2
  2160   001C04                     __ptext2:
  2161                           	callstack 0
  2162   001C04                     _strlen:
  2163                           	callstack 28
  2164   001C04  C027  F029         	movff	strlen@s,strlen@a
  2165   001C08  EF07  F00E         	goto	l2147
  2166   001C0C                     l2145:
  2167   001C0C  2A27               	incf	strlen@s^0,f,c
  2168   001C0E                     l2147:
  2169   001C0E  5027               	movf	strlen@s^0,w,c
  2170   001C10  6ED9               	movwf	fsr2l,c
  2171   001C12  6ADA               	clrf	fsr2h,c
  2172   001C14  50DF               	movf	indf2,w,c
  2173   001C16  A4D8               	btfss	status,2,c
  2174   001C18  EF10  F00E         	goto	u811
  2175   001C1C  EF12  F00E         	goto	u810
  2176   001C20                     u811:
  2177   001C20  EF06  F00E         	goto	l2145
  2178   001C24                     u810:
  2179   001C24  5029               	movf	strlen@a^0,w,c
  2180   001C26  5C27               	subwf	strlen@s^0,w,c
  2181   001C28  6E27               	movwf	?_strlen^0,c
  2182   001C2A  6A28               	clrf	(?_strlen+1)^0,c
  2183   001C2C  BE27               	btfsc	?_strlen^0,7,c
  2184   001C2E  0628               	decf	(?_strlen+1)^0,f,c
  2185   001C30  0012               	return		;funcret
  2186   001C32                     __end_of_strlen:
  2187                           	callstack 0
  2188                           
  2189 ;; *************** function _memcpy *****************
  2190 ;; Defined at:
  2191 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\memcpy.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  d1              1    0[COMRAM] PTR void 
  2194 ;;		 -> envio@buuf(43), envio@data_out_s(71), 
  2195 ;;  s1              1    1[COMRAM] PTR const void 
  2196 ;;		 -> envio@buuf(43), envio@data_config_s(32), 
  2197 ;;  n               2    2[COMRAM] unsigned int 
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  s               1    6[COMRAM] PTR const unsigned char 
  2200 ;;		 -> envio@buuf(43), envio@data_config_s(32), 
  2201 ;;  d               1    5[COMRAM] PTR unsigned char 
  2202 ;;		 -> envio@buuf(43), envio@data_out_s(71), 
  2203 ;;  tmp             1    4[COMRAM] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  1    0[COMRAM] PTR void 
  2206 ;; Registers used:
  2207 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;Total ram usage:        7 bytes
  2218 ;; Hardware stack levels used: 1
  2219 ;; Hardware stack levels required when called: 1
  2220 ;; This function calls:
  2221 ;;		Nothing
  2222 ;; This function is called by:
  2223 ;;		_envio
  2224 ;; This function uses a non-reentrant model
  2225 ;;
  2226                           
  2227                           	psect	text3
  2228   001AE4                     __ptext3:
  2229                           	callstack 0
  2230   001AE4                     _memcpy:
  2231                           	callstack 28
  2232   001AE4  C028  F02D         	movff	memcpy@s1,memcpy@s
  2233   001AE8  C027  F02C         	movff	memcpy@d1,memcpy@d
  2234   001AEC  EF84  F00D         	goto	l2161
  2235   001AF0                     l2155:
  2236   001AF0  502D               	movf	memcpy@s^0,w,c
  2237   001AF2  6ED9               	movwf	fsr2l,c
  2238   001AF4  6ADA               	clrf	fsr2h,c
  2239   001AF6  50DF               	movf	indf2,w,c
  2240   001AF8  6E2B               	movwf	memcpy@tmp^0,c
  2241   001AFA  2A2D               	incf	memcpy@s^0,f,c
  2242   001AFC  502C               	movf	memcpy@d^0,w,c
  2243   001AFE  6ED9               	movwf	fsr2l,c
  2244   001B00  6ADA               	clrf	fsr2h,c
  2245   001B02  C02B  FFDF         	movff	memcpy@tmp,indf2
  2246   001B06  2A2C               	incf	memcpy@d^0,f,c
  2247   001B08                     l2161:
  2248   001B08  0629               	decf	memcpy@n^0,f,c
  2249   001B0A  A0D8               	btfss	status,0,c
  2250   001B0C  062A               	decf	(memcpy@n+1)^0,f,c
  2251   001B0E  2829               	incf	memcpy@n^0,w,c
  2252   001B10  E106               	bnz	u821
  2253   001B12  282A               	incf	(memcpy@n+1)^0,w,c
  2254   001B14  A4D8               	btfss	status,2,c
  2255   001B16  EF8F  F00D         	goto	u821
  2256   001B1A  EF91  F00D         	goto	u820
  2257   001B1E                     u821:
  2258   001B1E  EF78  F00D         	goto	l2155
  2259   001B22                     u820:
  2260   001B22  0012               	return		;funcret
  2261   001B24                     __end_of_memcpy:
  2262                           	callstack 0
  2263                           
  2264 ;; *************** function _MRF24TransmitirDato *****************
  2265 ;; Defined at:
  2266 ;;		line 377 in file "drivers/scr/API_MRF24J40.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;  p_info_out_s    1   10[COMRAM] PTR struct .
  2269 ;;		 -> envio@data_out_s(71), 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  i               1   16[COMRAM] char 
  2272 ;;  pos_mem         1   17[COMRAM] unsigned char 
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      enum E3263
  2275 ;; Registers used:
  2276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2282 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2286 ;;Total ram usage:        8 bytes
  2287 ;; Hardware stack levels used: 1
  2288 ;; Hardware stack levels required when called: 5
  2289 ;; This function calls:
  2290 ;;		_SetLongAddr
  2291 ;;		_SetShortAddr
  2292 ;; This function is called by:
  2293 ;;		_envio
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           	psect	text4
  2298   00101A                     __ptext4:
  2299                           	callstack 0
  2300   00101A                     _MRF24TransmitirDato:
  2301                           	callstack 24
  2302   00101A                     
  2303                           ;drivers/scr/API_MRF24J40.c: 379:  if(INITIALIZATION_OK != estadoActual)
  2304   00101A  5005               	movf	_estadoActual^0,w,c
  2305   00101C  B4D8               	btfsc	status,2,c
  2306   00101E  EF13  F008         	goto	u741
  2307   001022  EF15  F008         	goto	u740
  2308   001026                     u741:
  2309   001026  EF17  F008         	goto	l2041
  2310   00102A                     u740:
  2311   00102A  EF3C  F009         	goto	l157
  2312   00102E                     l2041:
  2313                           
  2314                           ;drivers/scr/API_MRF24J40.c: 382:  if((0X00) == p_info_out_s->dest_address)
  2315   00102E  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2316   001030  6ED9               	movwf	fsr2l,c
  2317   001032  6ADA               	clrf	fsr2h,c
  2318   001034  0E02               	movlw	2
  2319   001036  26D9               	addwf	fsr2l,f,c
  2320   001038  50DE               	movf	postinc2,w,c
  2321   00103A  10DE               	iorwf	postinc2,w,c
  2322   00103C  A4D8               	btfss	status,2,c
  2323   00103E  EF23  F008         	goto	u751
  2324   001042  EF25  F008         	goto	u750
  2325   001046                     u751:
  2326   001046  EF27  F008         	goto	l2045
  2327   00104A                     u750:
  2328   00104A  EF3C  F009         	goto	l157
  2329   00104E                     l2045:
  2330                           
  2331                           ;drivers/scr/API_MRF24J40.c: 385:  if((0X00) == p_info_out_s->buffer_size)
  2332   00104E  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2333   001050  6ED9               	movwf	fsr2l,c
  2334   001052  6ADA               	clrf	fsr2h,c
  2335   001054  0E46               	movlw	70
  2336   001056  26D9               	addwf	fsr2l,f,c
  2337   001058  50DF               	movf	indf2,w,c
  2338   00105A  A4D8               	btfss	status,2,c
  2339   00105C  EF32  F008         	goto	u761
  2340   001060  EF34  F008         	goto	u760
  2341   001064                     u761:
  2342   001064  EF36  F008         	goto	l2049
  2343   001068                     u760:
  2344   001068  EF3C  F009         	goto	l157
  2345   00106C                     l2049:
  2346                           
  2347                           ;drivers/scr/API_MRF24J40.c: 388:  if(64 > p_info_out_s->buffer_size)
  2348   00106C  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2349   00106E  6ED9               	movwf	fsr2l,c
  2350   001070  6ADA               	clrf	fsr2h,c
  2351   001072  0E46               	movlw	70
  2352   001074  26D9               	addwf	fsr2l,f,c
  2353   001076  0E40               	movlw	64
  2354   001078  60DF               	cpfslt	indf2,c
  2355   00107A  EF41  F008         	goto	u771
  2356   00107E  EF43  F008         	goto	u770
  2357   001082                     u771:
  2358   001082  EF45  F008         	goto	l160
  2359   001086                     u770:
  2360   001086  EF3C  F009         	goto	l157
  2361   00108A                     l160:
  2362                           
  2363                           ;drivers/scr/API_MRF24J40.c: 390:  uint8_t pos_mem = 0;
  2364   00108A  6A38               	clrf	MRF24TransmitirDato@pos_mem^0,c
  2365   00108C                     
  2366                           ;drivers/scr/API_MRF24J40.c: 391:  SetLongAddr(pos_mem++, (0X0B));
  2367   00108C  0E00               	movlw	0
  2368   00108E  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  2369   001090  0E00               	movlw	0
  2370   001092  6E2C               	movwf	SetLongAddr@reg_address^0,c
  2371   001094  0E0B               	movlw	11
  2372   001096  6E2E               	movwf	SetLongAddr@valor^0,c
  2373   001098  EC51  F00D         	call	_SetLongAddr	;wreg free
  2374   00109C  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2375   00109E                     
  2376                           ;drivers/scr/API_MRF24J40.c: 392:  SetLongAddr(pos_mem++, p_info_out_s->buffer_size + (0
      +                          X0B));
  2377   00109E  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2378   0010A2  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2379   0010A4  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2380   0010A6  6ED9               	movwf	fsr2l,c
  2381   0010A8  6ADA               	clrf	fsr2h,c
  2382   0010AA  0E46               	movlw	70
  2383   0010AC  26D9               	addwf	fsr2l,f,c
  2384   0010AE  50DF               	movf	indf2,w,c
  2385   0010B0  0F0B               	addlw	11
  2386   0010B2  6E2E               	movwf	SetLongAddr@valor^0,c
  2387   0010B4  EC51  F00D         	call	_SetLongAddr	;wreg free
  2388   0010B8  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2389   0010BA                     
  2390                           ;drivers/scr/API_MRF24J40.c: 393:  SetLongAddr(pos_mem++, (0X01) | (0X20) | (0X40));
  2391   0010BA  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2392   0010BE  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2393   0010C0  0E61               	movlw	97
  2394   0010C2  6E2E               	movwf	SetLongAddr@valor^0,c
  2395   0010C4  EC51  F00D         	call	_SetLongAddr	;wreg free
  2396   0010C8  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2397   0010CA                     
  2398                           ;drivers/scr/API_MRF24J40.c: 394:  SetLongAddr(pos_mem++, (0X80) | (0X08));
  2399   0010CA  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2400   0010CE  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2401   0010D0  0E88               	movlw	136
  2402   0010D2  6E2E               	movwf	SetLongAddr@valor^0,c
  2403   0010D4  EC51  F00D         	call	_SetLongAddr	;wreg free
  2404   0010D8  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2405   0010DA                     
  2406                           ;drivers/scr/API_MRF24J40.c: 395:  SetLongAddr(pos_mem++, data_config_s.sequence_number+
      +                          +);
  2407   0010DA  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2408   0010DE  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2409   0010E0  EE20  F00E         	lfsr	2,_data_config_s+7
  2410   0010E4  50DF               	movf	indf2,w,c
  2411   0010E6  2ADF               	incf	indf2,f,c
  2412   0010E8  6E2E               	movwf	SetLongAddr@valor^0,c
  2413   0010EA  EC51  F00D         	call	_SetLongAddr	;wreg free
  2414   0010EE  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2415   0010F0                     
  2416                           ;drivers/scr/API_MRF24J40.c: 397:  if((0X00) == p_info_out_s->dest_panid)
  2417   0010F0  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2418   0010F2  6ED9               	movwf	fsr2l,c
  2419   0010F4  6ADA               	clrf	fsr2h,c
  2420   0010F6  50DE               	movf	postinc2,w,c
  2421   0010F8  10DE               	iorwf	postinc2,w,c
  2422   0010FA  A4D8               	btfss	status,2,c
  2423   0010FC  EF82  F008         	goto	u781
  2424   001100  EF84  F008         	goto	u780
  2425   001104                     u781:
  2426   001104  EF8B  F008         	goto	l2077
  2427   001108                     u780:
  2428   001108                     
  2429                           ;drivers/scr/API_MRF24J40.c: 398:   p_info_out_s->dest_panid = data_config_s.my_panid;
  2430   001108  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2431   00110A  6ED9               	movwf	fsr2l,c
  2432   00110C  6ADA               	clrf	fsr2h,c
  2433   00110E  C008  FFDE         	movff	_data_config_s+1,postinc2
  2434   001112  C009  FFDD         	movff	_data_config_s+2,postdec2
  2435   001116                     l2077:
  2436                           
  2437                           ;drivers/scr/API_MRF24J40.c: 399:  SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_p
      +                          anid);
  2438   001116  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2439   00111A  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2440   00111C  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2441   00111E  6ED9               	movwf	fsr2l,c
  2442   001120  6ADA               	clrf	fsr2h,c
  2443   001122  50DF               	movf	indf2,w,c
  2444   001124  6E2E               	movwf	SetLongAddr@valor^0,c
  2445   001126  EC51  F00D         	call	_SetLongAddr	;wreg free
  2446   00112A  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2447   00112C                     
  2448                           ;drivers/scr/API_MRF24J40.c: 400:  SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_
      +                          panid >> (0X08)));
  2449   00112C  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2450   001130  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2451   001132  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2452   001134  6ED9               	movwf	fsr2l,c
  2453   001136  6ADA               	clrf	fsr2h,c
  2454   001138  CFDE F032          	movff	postinc2,??_MRF24TransmitirDato
  2455   00113C  CFDD F033          	movff	postdec2,??_MRF24TransmitirDato+1
  2456   001140  C033  F032         	movff	??_MRF24TransmitirDato+1,??_MRF24TransmitirDato
  2457   001144  6A33               	clrf	(??_MRF24TransmitirDato+1)^0,c
  2458   001146  5032               	movf	??_MRF24TransmitirDato^0,w,c
  2459   001148  6E2E               	movwf	SetLongAddr@valor^0,c
  2460   00114A  EC51  F00D         	call	_SetLongAddr	;wreg free
  2461   00114E  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2462   001150                     
  2463                           ;drivers/scr/API_MRF24J40.c: 401:  SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_a
      +                          ddress);
  2464   001150  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2465   001154  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2466   001156  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2467   001158  6ED9               	movwf	fsr2l,c
  2468   00115A  6ADA               	clrf	fsr2h,c
  2469   00115C  0E02               	movlw	2
  2470   00115E  26D9               	addwf	fsr2l,f,c
  2471   001160  50DF               	movf	indf2,w,c
  2472   001162  6E2E               	movwf	SetLongAddr@valor^0,c
  2473   001164  EC51  F00D         	call	_SetLongAddr	;wreg free
  2474   001168  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2475   00116A                     
  2476                           ;drivers/scr/API_MRF24J40.c: 402:  SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_
      +                          address >> (0X08)));
  2477   00116A  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2478   00116E  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2479   001170  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2480   001172  6ED9               	movwf	fsr2l,c
  2481   001174  6ADA               	clrf	fsr2h,c
  2482   001176  0E02               	movlw	2
  2483   001178  26D9               	addwf	fsr2l,f,c
  2484   00117A  CFDE F032          	movff	postinc2,??_MRF24TransmitirDato
  2485   00117E  CFDD F033          	movff	postdec2,??_MRF24TransmitirDato+1
  2486   001182  C033  F032         	movff	??_MRF24TransmitirDato+1,??_MRF24TransmitirDato
  2487   001186  6A33               	clrf	(??_MRF24TransmitirDato+1)^0,c
  2488   001188  5032               	movf	??_MRF24TransmitirDato^0,w,c
  2489   00118A  6E2E               	movwf	SetLongAddr@valor^0,c
  2490   00118C  EC51  F00D         	call	_SetLongAddr	;wreg free
  2491   001190  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2492   001192                     
  2493                           ;drivers/scr/API_MRF24J40.c: 404:  if((0X00) == p_info_out_s->origin_address)
  2494   001192  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2495   001194  6ED9               	movwf	fsr2l,c
  2496   001196  6ADA               	clrf	fsr2h,c
  2497   001198  0E04               	movlw	4
  2498   00119A  26D9               	addwf	fsr2l,f,c
  2499   00119C  50DE               	movf	postinc2,w,c
  2500   00119E  10DE               	iorwf	postinc2,w,c
  2501   0011A0  A4D8               	btfss	status,2,c
  2502   0011A2  EFD5  F008         	goto	u791
  2503   0011A6  EFD7  F008         	goto	u790
  2504   0011AA                     u791:
  2505   0011AA  EFE0  F008         	goto	l2097
  2506   0011AE                     u790:
  2507   0011AE                     
  2508                           ;drivers/scr/API_MRF24J40.c: 405:   p_info_out_s->origin_address = data_config_s.my_addr
      +                          ess;
  2509   0011AE  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2510   0011B0  6ED9               	movwf	fsr2l,c
  2511   0011B2  6ADA               	clrf	fsr2h,c
  2512   0011B4  0E04               	movlw	4
  2513   0011B6  26D9               	addwf	fsr2l,f,c
  2514   0011B8  C00A  FFDE         	movff	_data_config_s+3,postinc2
  2515   0011BC  C00B  FFDD         	movff	_data_config_s+4,postdec2
  2516   0011C0                     l2097:
  2517                           
  2518                           ;drivers/scr/API_MRF24J40.c: 406:  SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->origin
      +                          _address);
  2519   0011C0  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2520   0011C4  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2521   0011C6  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2522   0011C8  6ED9               	movwf	fsr2l,c
  2523   0011CA  6ADA               	clrf	fsr2h,c
  2524   0011CC  0E04               	movlw	4
  2525   0011CE  26D9               	addwf	fsr2l,f,c
  2526   0011D0  50DF               	movf	indf2,w,c
  2527   0011D2  6E2E               	movwf	SetLongAddr@valor^0,c
  2528   0011D4  EC51  F00D         	call	_SetLongAddr	;wreg free
  2529   0011D8  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2530   0011DA                     
  2531                           ;drivers/scr/API_MRF24J40.c: 407:  SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->origi
      +                          n_address >> (0X08)));
  2532   0011DA  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2533   0011DE  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2534   0011E0  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2535   0011E2  6ED9               	movwf	fsr2l,c
  2536   0011E4  6ADA               	clrf	fsr2h,c
  2537   0011E6  0E04               	movlw	4
  2538   0011E8  26D9               	addwf	fsr2l,f,c
  2539   0011EA  CFDE F032          	movff	postinc2,??_MRF24TransmitirDato
  2540   0011EE  CFDD F033          	movff	postdec2,??_MRF24TransmitirDato+1
  2541   0011F2  C033  F032         	movff	??_MRF24TransmitirDato+1,??_MRF24TransmitirDato
  2542   0011F6  6A33               	clrf	(??_MRF24TransmitirDato+1)^0,c
  2543   0011F8  5032               	movf	??_MRF24TransmitirDato^0,w,c
  2544   0011FA  6E2E               	movwf	SetLongAddr@valor^0,c
  2545   0011FC  EC51  F00D         	call	_SetLongAddr	;wreg free
  2546   001200  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2547   001202                     
  2548                           ;drivers/scr/API_MRF24J40.c: 409:  for(int8_t i = 0; i < p_info_out_s->buffer_size; i++)
      +                           {
  2549   001202  6A37               	clrf	MRF24TransmitirDato@i^0,c
  2550   001204  EF13  F009         	goto	l2113
  2551   001208                     l2107:
  2552                           
  2553                           ;drivers/scr/API_MRF24J40.c: 411:   SetLongAddr(pos_mem++, p_info_out_s->buffer[i]);
  2554   001208  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2555   00120C  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2556   00120E  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2557   001210  2437               	addwf	MRF24TransmitirDato@i^0,w,c
  2558   001212  6ED9               	movwf	fsr2l,c
  2559   001214  6ADA               	clrf	fsr2h,c
  2560   001216  0E06               	movlw	6
  2561   001218  26D9               	addwf	fsr2l,f,c
  2562   00121A  50DF               	movf	indf2,w,c
  2563   00121C  6E2E               	movwf	SetLongAddr@valor^0,c
  2564   00121E  EC51  F00D         	call	_SetLongAddr	;wreg free
  2565   001222  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2566   001224                     
  2567                           ;drivers/scr/API_MRF24J40.c: 412:  }
  2568   001224  2A37               	incf	MRF24TransmitirDato@i^0,f,c
  2569   001226                     l2113:
  2570   001226  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2571   001228  6ED9               	movwf	fsr2l,c
  2572   00122A  6ADA               	clrf	fsr2h,c
  2573   00122C  0E46               	movlw	70
  2574   00122E  26D9               	addwf	fsr2l,f,c
  2575   001230  50DF               	movf	indf2,w,c
  2576   001232  6E32               	movwf	??_MRF24TransmitirDato^0,c
  2577   001234  6A33               	clrf	(??_MRF24TransmitirDato+1)^0,c
  2578   001236  C037  F034         	movff	MRF24TransmitirDato@i,??_MRF24TransmitirDato+2
  2579   00123A  6A35               	clrf	(??_MRF24TransmitirDato+3)^0,c
  2580   00123C  BE34               	btfsc	(??_MRF24TransmitirDato+2)^0,7,c
  2581   00123E  0635               	decf	(??_MRF24TransmitirDato+3)^0,f,c
  2582   001240  5032               	movf	??_MRF24TransmitirDato^0,w,c
  2583   001242  5C34               	subwf	(??_MRF24TransmitirDato+2)^0,w,c
  2584   001244  5035               	movf	(??_MRF24TransmitirDato+3)^0,w,c
  2585   001246  0A80               	xorlw	128
  2586   001248  6E36               	movwf	(??_MRF24TransmitirDato+4)^0,c
  2587   00124A  5033               	movf	(??_MRF24TransmitirDato+1)^0,w,c
  2588   00124C  0A80               	xorlw	128
  2589   00124E  5836               	subwfb	(??_MRF24TransmitirDato+4)^0,w,c
  2590   001250  A0D8               	btfss	status,0,c
  2591   001252  EF2D  F009         	goto	u801
  2592   001256  EF2F  F009         	goto	u800
  2593   00125A                     u801:
  2594   00125A  EF04  F009         	goto	l2107
  2595   00125E                     u800:
  2596   00125E                     
  2597                           ;drivers/scr/API_MRF24J40.c: 413:  SetLongAddr(pos_mem++, (0X00));
  2598   00125E  C038  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2599   001262  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2600   001264  0E00               	movlw	0
  2601   001266  6E2E               	movwf	SetLongAddr@valor^0,c
  2602   001268  EC51  F00D         	call	_SetLongAddr	;wreg free
  2603   00126C  2A38               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2604   00126E                     
  2605                           ;drivers/scr/API_MRF24J40.c: 414:  SetShortAddr((0x1B), (0X04) | (0X01));
  2606   00126E  0E05               	movlw	5
  2607   001270  6E29               	movwf	SetShortAddr@valor^0,c
  2608   001272  0E1B               	movlw	27
  2609   001274  EC95  F00E         	call	_SetShortAddr
  2610   001278                     l157:
  2611   001278  0012               	return		;funcret
  2612   00127A                     __end_of_MRF24TransmitirDato:
  2613                           	callstack 0
  2614                           
  2615 ;; *************** function _MRF24ReciboPaquete *****************
  2616 ;; Defined at:
  2617 ;;		line 440 in file "drivers/scr/API_MRF24J40.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;  i               1   17[COMRAM] unsigned char 
  2622 ;;  add             2   15[COMRAM] unsigned short 
  2623 ;; Return value:  Size  Location     Type
  2624 ;;                  1    wreg      enum E3263
  2625 ;; Registers used:
  2626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2627 ;; Tracked objects:
  2628 ;;		On entry : 0/0
  2629 ;;		On exit  : 0/0
  2630 ;;		Unchanged: 0/0
  2631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;Total ram usage:        8 bytes
  2637 ;; Hardware stack levels used: 1
  2638 ;; Hardware stack levels required when called: 5
  2639 ;; This function calls:
  2640 ;;		_GetLongAddr
  2641 ;;		_GetShortAddr
  2642 ;;		_SetLongAddr
  2643 ;;		_SetShortAddr
  2644 ;; This function is called by:
  2645 ;;		_main
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text5
  2650   001676                     __ptext5:
  2651                           	callstack 0
  2652   001676                     _MRF24ReciboPaquete:
  2653                           	callstack 25
  2654   001676                     
  2655                           ;drivers/scr/API_MRF24J40.c: 453:  if(INITIALIZATION_OK != estadoActual)
  2656   001676  5005               	movf	_estadoActual^0,w,c
  2657   001678  B4D8               	btfsc	status,2,c
  2658   00167A  EF41  F00B         	goto	u851
  2659   00167E  EF43  F00B         	goto	u850
  2660   001682                     u851:
  2661   001682  EF45  F00B         	goto	l2197
  2662   001686                     u850:
  2663   001686  EFAC  F00B         	goto	l174
  2664   00168A                     l2197:
  2665                           
  2666                           ;drivers/scr/API_MRF24J40.c: 455:  SetLongAddr((0x39), (0X04));
  2667   00168A  0E00               	movlw	0
  2668   00168C  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  2669   00168E  0E39               	movlw	57
  2670   001690  6E2C               	movwf	SetLongAddr@reg_address^0,c
  2671   001692  0E04               	movlw	4
  2672   001694  6E2E               	movwf	SetLongAddr@valor^0,c
  2673   001696  EC51  F00D         	call	_SetLongAddr	;wreg free
  2674                           
  2675                           ;drivers/scr/API_MRF24J40.c: 456:  SetShortAddr((0x0D), (0X04));
  2676   00169A  0E04               	movlw	4
  2677   00169C  6E29               	movwf	SetShortAddr@valor^0,c
  2678   00169E  0E0D               	movlw	13
  2679   0016A0  EC95  F00E         	call	_SetShortAddr
  2680                           
  2681                           ;drivers/scr/API_MRF24J40.c: 457:  data_in_s.buffer_size = GetLongAddr((0x300));
  2682   0016A4  0E03               	movlw	3
  2683   0016A6  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  2684   0016A8  0E00               	movlw	0
  2685   0016AA  6E2C               	movwf	GetLongAddr@reg_address^0,c
  2686   0016AC  EC2F  F00D         	call	_GetLongAddr	;wreg free
  2687   0016B0  0101               	movlb	1	; () banked
  2688   0016B2  6F65               	movwf	(_data_in_s+69)& (0+255),b
  2689                           
  2690                           ;drivers/scr/API_MRF24J40.c: 458:  uint16_t add = GetLongAddr((0x300) + 9);
  2691   0016B4  0E03               	movlw	3
  2692   0016B6  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  2693   0016B8  0E09               	movlw	9
  2694   0016BA  6E2C               	movwf	GetLongAddr@reg_address^0,c
  2695   0016BC  EC2F  F00D         	call	_GetLongAddr	;wreg free
  2696   0016C0  6E31               	movwf	??_MRF24ReciboPaquete^0,c
  2697   0016C2  5031               	movf	??_MRF24ReciboPaquete^0,w,c
  2698   0016C4  6E36               	movwf	MRF24ReciboPaquete@add^0,c
  2699   0016C6  6A37               	clrf	(MRF24ReciboPaquete@add+1)^0,c
  2700                           
  2701                           ;drivers/scr/API_MRF24J40.c: 459:  add = (add << (0X08)) | GetLongAddr((0x300) + 8);
  2702   0016C8  0E03               	movlw	3
  2703   0016CA  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  2704   0016CC  0E08               	movlw	8
  2705   0016CE  6E2C               	movwf	GetLongAddr@reg_address^0,c
  2706   0016D0  EC2F  F00D         	call	_GetLongAddr	;wreg free
  2707   0016D4  6E31               	movwf	??_MRF24ReciboPaquete^0,c
  2708   0016D6  5036               	movf	MRF24ReciboPaquete@add^0,w,c
  2709   0016D8  6E32               	movwf	(??_MRF24ReciboPaquete+1)^0,c
  2710   0016DA  5031               	movf	??_MRF24ReciboPaquete^0,w,c
  2711   0016DC  6E36               	movwf	MRF24ReciboPaquete@add^0,c
  2712   0016DE  C032  F037         	movff	??_MRF24ReciboPaquete+1,MRF24ReciboPaquete@add+1
  2713   0016E2                     
  2714                           ;drivers/scr/API_MRF24J40.c: 460:  data_in_s.source_address = add;
  2715   0016E2  C036  F122         	movff	MRF24ReciboPaquete@add,_data_in_s+2
  2716   0016E6  C037  F123         	movff	MRF24ReciboPaquete@add+1,_data_in_s+3
  2717   0016EA                     
  2718                           ;drivers/scr/API_MRF24J40.c: 462:  for(uint8_t i = 0; i < data_in_s.buffer_size - (0x04)
      +                          ; i++) {
  2719   0016EA  6A38               	clrf	MRF24ReciboPaquete@i^0,c
  2720   0016EC  EF88  F00B         	goto	l2207
  2721   0016F0                     l2203:
  2722                           
  2723                           ; BSR set to: 1
  2724                           ;drivers/scr/API_MRF24J40.c: 464:   data_in_s.buffer[i] = GetLongAddr((0x300) + (0X0B) +
      +                           i - 1);
  2725   0016F0  0E25               	movlw	low (_data_in_s+5)
  2726   0016F2  2438               	addwf	MRF24ReciboPaquete@i^0,w,c
  2727   0016F4  6ED9               	movwf	fsr2l,c
  2728   0016F6  6ADA               	clrf	fsr2h,c
  2729   0016F8  0E01               	movlw	high (_data_in_s+5)
  2730   0016FA  22DA               	addwfc	fsr2h,f,c
  2731   0016FC  0E0A               	movlw	10
  2732   0016FE  2438               	addwf	MRF24ReciboPaquete@i^0,w,c
  2733   001700  6E2C               	movwf	GetLongAddr@reg_address^0,c
  2734   001702  6A2D               	clrf	(GetLongAddr@reg_address+1)^0,c
  2735   001704  0E03               	movlw	3
  2736   001706  222D               	addwfc	(GetLongAddr@reg_address+1)^0,f,c
  2737   001708  EC2F  F00D         	call	_GetLongAddr	;wreg free
  2738   00170C  6EDF               	movwf	indf2,c
  2739   00170E                     
  2740                           ;drivers/scr/API_MRF24J40.c: 465:  }
  2741   00170E  2A38               	incf	MRF24ReciboPaquete@i^0,f,c
  2742   001710                     l2207:
  2743   001710  0EFC               	movlw	252
  2744   001712  0101               	movlb	1	; () banked
  2745   001714  2565               	addwf	(_data_in_s+69)& (0+255),w,b
  2746   001716  6E31               	movwf	??_MRF24ReciboPaquete^0,c
  2747   001718  6A32               	clrf	(??_MRF24ReciboPaquete+1)^0,c
  2748   00171A  0EFF               	movlw	255
  2749   00171C  2232               	addwfc	(??_MRF24ReciboPaquete+1)^0,f,c
  2750   00171E  5038               	movf	MRF24ReciboPaquete@i^0,w,c
  2751   001720  6E33               	movwf	(??_MRF24ReciboPaquete+2)^0,c
  2752   001722  6A34               	clrf	(??_MRF24ReciboPaquete+3)^0,c
  2753   001724  5031               	movf	??_MRF24ReciboPaquete^0,w,c
  2754   001726  5C33               	subwf	(??_MRF24ReciboPaquete+2)^0,w,c
  2755   001728  5034               	movf	(??_MRF24ReciboPaquete+3)^0,w,c
  2756   00172A  0A80               	xorlw	128
  2757   00172C  6E35               	movwf	(??_MRF24ReciboPaquete+4)^0,c
  2758   00172E  5032               	movf	(??_MRF24ReciboPaquete+1)^0,w,c
  2759   001730  0A80               	xorlw	128
  2760   001732  5835               	subwfb	(??_MRF24ReciboPaquete+4)^0,w,c
  2761   001734  A0D8               	btfss	status,0,c
  2762   001736  EF9F  F00B         	goto	u861
  2763   00173A  EFA1  F00B         	goto	u860
  2764   00173E                     u861:
  2765   00173E  EF78  F00B         	goto	l2203
  2766   001742                     u860:
  2767   001742                     
  2768                           ; BSR set to: 1
  2769                           ;drivers/scr/API_MRF24J40.c: 466:  SetLongAddr((0x39), (0X00));
  2770   001742  0E00               	movlw	0
  2771   001744  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  2772   001746  0E39               	movlw	57
  2773   001748  6E2C               	movwf	SetLongAddr@reg_address^0,c
  2774   00174A  0E00               	movlw	0
  2775   00174C  6E2E               	movwf	SetLongAddr@valor^0,c
  2776   00174E  EC51  F00D         	call	_SetLongAddr	;wreg free
  2777                           
  2778                           ;drivers/scr/API_MRF24J40.c: 467:  (void)GetShortAddr((0x31));
  2779   001752  0E31               	movlw	49
  2780   001754  EC6F  F00E         	call	_GetShortAddr
  2781   001758                     l174:
  2782   001758  0012               	return		;funcret
  2783   00175A                     __end_of_MRF24ReciboPaquete:
  2784                           	callstack 0
  2785                           
  2786 ;; *************** function _MRF24J40Init *****************
  2787 ;; Defined at:
  2788 ;;		line 287 in file "drivers/scr/API_MRF24J40.c"
  2789 ;; Parameters:    Size  Location     Type
  2790 ;;		None
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;		None
  2793 ;; Return value:  Size  Location     Type
  2794 ;;                  1    wreg      enum E3263
  2795 ;; Registers used:
  2796 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2797 ;; Tracked objects:
  2798 ;;		On entry : 0/0
  2799 ;;		On exit  : 0/0
  2800 ;;		Unchanged: 0/0
  2801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;Total ram usage:        1 bytes
  2807 ;; Hardware stack levels used: 1
  2808 ;; Hardware stack levels required when called: 7
  2809 ;; This function calls:
  2810 ;;		_InicializoMRF24
  2811 ;;		_InicializoPines
  2812 ;;		_InicializoVariables
  2813 ;;		_SetResetPin
  2814 ;; This function is called by:
  2815 ;;		_main
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text6
  2820   001B24                     __ptext6:
  2821                           	callstack 0
  2822   001B24                     _MRF24J40Init:
  2823                           	callstack 23
  2824   001B24                     
  2825                           ;drivers/scr/API_MRF24J40.c: 289:  InicializoVariables();
  2826   001B24  ECA2  F00C         	call	_InicializoVariables	;wreg free
  2827   001B28                     
  2828                           ;drivers/scr/API_MRF24J40.c: 290:  InicializoPines();
  2829   001B28  ECC8  F00E         	call	_InicializoPines	;wreg free
  2830   001B2C                     
  2831                           ;drivers/scr/API_MRF24J40.c: 291:  _delay((unsigned long)((1)*(16000000/4000.0)));;
  2832   001B2C  0E06               	movlw	6
  2833   001B2E  6E43               	movwf	??_MRF24J40Init^0,c
  2834   001B30  0E30               	movlw	48
  2835   001B32                     u1047:
  2836   001B32  2EE8               	decfsz	wreg,f,c
  2837   001B34  D7FE               	bra	u1047
  2838   001B36  2E43               	decfsz	??_MRF24J40Init^0,f,c
  2839   001B38  D7FC               	bra	u1047
  2840   001B3A  F000 F000          	nop2	
  2841   001B3E                     
  2842                           ;drivers/scr/API_MRF24J40.c: 292:  SetResetPin(1);
  2843   001B3E  0E01               	movlw	1
  2844   001B40  ECEB  F00E         	call	_SetResetPin
  2845   001B44                     
  2846                           ;drivers/scr/API_MRF24J40.c: 293:  _delay((unsigned long)((1)*(16000000/4000.0)));;
  2847   001B44  0E06               	movlw	6
  2848   001B46  6E43               	movwf	??_MRF24J40Init^0,c
  2849   001B48  0E30               	movlw	48
  2850   001B4A                     u1057:
  2851   001B4A  2EE8               	decfsz	wreg,f,c
  2852   001B4C  D7FE               	bra	u1057
  2853   001B4E  2E43               	decfsz	??_MRF24J40Init^0,f,c
  2854   001B50  D7FC               	bra	u1057
  2855   001B52  F000 F000          	nop2	
  2856   001B56                     
  2857                           ;drivers/scr/API_MRF24J40.c: 294:  estadoActual = InicializoMRF24();
  2858   001B56  EC3D  F009         	call	_InicializoMRF24	;wreg free
  2859   001B5A  6E05               	movwf	_estadoActual^0,c
  2860   001B5C  0012               	return		;funcret
  2861   001B5E                     __end_of_MRF24J40Init:
  2862                           	callstack 0
  2863                           
  2864 ;; *************** function _InicializoVariables *****************
  2865 ;; Defined at:
  2866 ;;		line 89 in file "drivers/scr/API_MRF24J40.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;Total ram usage:        0 bytes
  2885 ;; Hardware stack levels used: 1
  2886 ;; Hardware stack levels required when called: 2
  2887 ;; This function calls:
  2888 ;;		_strncpy
  2889 ;; This function is called by:
  2890 ;;		_MRF24J40Init
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text7
  2895   001944                     __ptext7:
  2896                           	callstack 0
  2897   001944                     _InicializoVariables:
  2898                           	callstack 27
  2899   001944                     
  2900                           ;drivers/scr/API_MRF24J40.c: 91:  if((0X00) == data_config_s.my_address || (0X00) == dat
      +                          a_config_s.my_panid) {
  2901   001944  500A               	movf	(_data_config_s+3)^0,w,c
  2902   001946  100B               	iorwf	(_data_config_s+4)^0,w,c
  2903   001948  B4D8               	btfsc	status,2,c
  2904   00194A  EFA9  F00C         	goto	u681
  2905   00194E  EFAB  F00C         	goto	u680
  2906   001952                     u681:
  2907   001952  EFB4  F00C         	goto	l1961
  2908   001956                     u680:
  2909   001956  5008               	movf	(_data_config_s+1)^0,w,c
  2910   001958  1009               	iorwf	(_data_config_s+2)^0,w,c
  2911   00195A  A4D8               	btfss	status,2,c
  2912   00195C  EFB2  F00C         	goto	u691
  2913   001960  EFB4  F00C         	goto	u690
  2914   001964                     u691:
  2915   001964  EFD4  F00C         	goto	l100
  2916   001968                     u690:
  2917   001968                     l1961:
  2918                           
  2919                           ;drivers/scr/API_MRF24J40.c: 93:   strncpy((char *)data_config_s.security_key,
  2920   001968  0E17               	movlw	low (_data_config_s+16)
  2921   00196A  6E27               	movwf	strncpy@d^0,c
  2922   00196C  0E01               	movlw	low _default_security_key
  2923   00196E  6E28               	movwf	strncpy@s^0,c
  2924   001970  0E00               	movlw	0
  2925   001972  6E2A               	movwf	(strncpy@n+1)^0,c
  2926   001974  0E10               	movlw	16
  2927   001976  6E29               	movwf	strncpy@n^0,c
  2928   001978  EC65  F00C         	call	_strncpy	;wreg free
  2929                           
  2930                           ;drivers/scr/API_MRF24J40.c: 96:   strncpy((char *)data_config_s.my_mac,
  2931   00197C  0E0F               	movlw	low (_data_config_s+8)
  2932   00197E  6E27               	movwf	strncpy@d^0,c
  2933   001980  0E11               	movlw	low _default_mac_address
  2934   001982  6E28               	movwf	strncpy@s^0,c
  2935   001984  0E00               	movlw	0
  2936   001986  6E2A               	movwf	(strncpy@n+1)^0,c
  2937   001988  0E08               	movlw	8
  2938   00198A  6E29               	movwf	strncpy@n^0,c
  2939   00198C  EC65  F00C         	call	_strncpy	;wreg free
  2940   001990                     
  2941                           ;drivers/scr/API_MRF24J40.c: 99:   data_config_s.sequence_number = (0X01);
  2942   001990  0E01               	movlw	1
  2943   001992  6E0E               	movwf	(_data_config_s+7)^0,c
  2944   001994                     
  2945                           ;drivers/scr/API_MRF24J40.c: 100:   data_config_s.my_channel = CH_11;
  2946   001994  0E03               	movlw	3
  2947   001996  6E07               	movwf	_data_config_s^0,c
  2948   001998                     
  2949                           ;drivers/scr/API_MRF24J40.c: 101:   data_config_s.my_panid = (0x1234);
  2950   001998  0E12               	movlw	18
  2951   00199A  6E09               	movwf	(_data_config_s+2)^0,c
  2952   00199C  0E34               	movlw	52
  2953   00199E  6E08               	movwf	(_data_config_s+1)^0,c
  2954   0019A0                     
  2955                           ;drivers/scr/API_MRF24J40.c: 102:   data_config_s.my_address = (0x1112);
  2956   0019A0  0E11               	movlw	17
  2957   0019A2  6E0B               	movwf	(_data_config_s+4)^0,c
  2958   0019A4  0E12               	movlw	18
  2959   0019A6  6E0A               	movwf	(_data_config_s+3)^0,c
  2960   0019A8                     l100:
  2961   0019A8  0012               	return		;funcret
  2962   0019AA                     __end_of_InicializoVariables:
  2963                           	callstack 0
  2964                           
  2965 ;; *************** function _strncpy *****************
  2966 ;; Defined at:
  2967 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strncpy.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  d               1    0[COMRAM] PTR unsigned char 
  2970 ;;		 -> data_config_s(32), 
  2971 ;;  s               1    1[COMRAM] PTR const unsigned char 
  2972 ;;		 -> default_mac_address(8), default_security_key(16), 
  2973 ;;  n               2    2[COMRAM] unsigned int 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  cp              1    5[COMRAM] PTR unsigned char 
  2976 ;;		 -> data_config_s(32), 
  2977 ;; Return value:  Size  Location     Type
  2978 ;;                  1    0[COMRAM] PTR unsigned char 
  2979 ;; Registers used:
  2980 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2981 ;; Tracked objects:
  2982 ;;		On entry : 0/0
  2983 ;;		On exit  : 0/0
  2984 ;;		Unchanged: 0/0
  2985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2986 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2988 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2989 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2990 ;;Total ram usage:        6 bytes
  2991 ;; Hardware stack levels used: 1
  2992 ;; Hardware stack levels required when called: 1
  2993 ;; This function calls:
  2994 ;;		Nothing
  2995 ;; This function is called by:
  2996 ;;		_InicializoVariables
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text8
  3001   0018CA                     __ptext8:
  3002                           	callstack 0
  3003   0018CA                     _strncpy:
  3004                           	callstack 27
  3005   0018CA  C027  F02C         	movff	strncpy@d,strncpy@cp
  3006   0018CE  EF84  F00C         	goto	l1861
  3007   0018D2                     l1855:
  3008   0018D2  0629               	decf	strncpy@n^0,f,c
  3009   0018D4  A0D8               	btfss	status,0,c
  3010   0018D6  062A               	decf	(strncpy@n+1)^0,f,c
  3011   0018D8  2A28               	incf	strncpy@s^0,f,c
  3012   0018DA  0428               	decf	strncpy@s^0,w,c
  3013   0018DC  6E2B               	movwf	??_strncpy^0,c
  3014   0018DE  C02B  FFF6         	movff	??_strncpy,tblptrl
  3015   0018E2                     	if	1	;There is more than 1 active tblptr byte
  3016   0018E2  0E10               	movlw	high __smallconst
  3017   0018E4  6EF7               	movwf	tblptrh,c
  3018   0018E6                     	endif
  3019   0018E6                     	if	0	;tblptru may be non-zero
  3020   0018E6                     	endif
  3021   0018E6                     	if	0	;tblptru may be non-zero
  3022   0018E6                     	endif
  3023   0018E6  2A2C               	incf	strncpy@cp^0,f,c
  3024   0018E8  042C               	decf	strncpy@cp^0,w,c
  3025   0018EA  6ED9               	movwf	fsr2l,c
  3026   0018EC  6ADA               	clrf	fsr2h,c
  3027   0018EE  0008               	tblrd		*
  3028   0018F0  CFF5 FFDF          	movff	tablat,indf2
  3029   0018F4  50DF               	movf	indf2,w,c
  3030   0018F6  A4D8               	btfss	status,2,c
  3031   0018F8  EF80  F00C         	goto	u601
  3032   0018FC  EF82  F00C         	goto	u600
  3033   001900                     u601:
  3034   001900  EF84  F00C         	goto	l1861
  3035   001904                     u600:
  3036   001904  EF94  F00C         	goto	l1867
  3037   001908                     l1861:
  3038   001908  5029               	movf	strncpy@n^0,w,c
  3039   00190A  102A               	iorwf	(strncpy@n+1)^0,w,c
  3040   00190C  A4D8               	btfss	status,2,c
  3041   00190E  EF8B  F00C         	goto	u611
  3042   001912  EF8D  F00C         	goto	u610
  3043   001916                     u611:
  3044   001916  EF69  F00C         	goto	l1855
  3045   00191A                     u610:
  3046   00191A  EF94  F00C         	goto	l1867
  3047   00191E                     l1863:
  3048   00191E  502C               	movf	strncpy@cp^0,w,c
  3049   001920  6ED9               	movwf	fsr2l,c
  3050   001922  6ADA               	clrf	fsr2h,c
  3051   001924  6ADF               	clrf	indf2,c
  3052   001926  2A2C               	incf	strncpy@cp^0,f,c
  3053   001928                     l1867:
  3054   001928  0629               	decf	strncpy@n^0,f,c
  3055   00192A  A0D8               	btfss	status,0,c
  3056   00192C  062A               	decf	(strncpy@n+1)^0,f,c
  3057   00192E  2829               	incf	strncpy@n^0,w,c
  3058   001930  E106               	bnz	u621
  3059   001932  282A               	incf	(strncpy@n+1)^0,w,c
  3060   001934  A4D8               	btfss	status,2,c
  3061   001936  EF9F  F00C         	goto	u621
  3062   00193A  EFA1  F00C         	goto	u620
  3063   00193E                     u621:
  3064   00193E  EF8F  F00C         	goto	l1863
  3065   001942                     u620:
  3066   001942  0012               	return		;funcret
  3067   001944                     __end_of_strncpy:
  3068                           	callstack 0
  3069                           
  3070 ;; *************** function _InicializoPines *****************
  3071 ;; Defined at:
  3072 ;;		line 21 in file "drivers/scr/API_MRF24J40_port.c"
  3073 ;; Parameters:    Size  Location     Type
  3074 ;;		None
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;		None
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      void 
  3079 ;; Registers used:
  3080 ;;		wreg, cstack
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;Total ram usage:        0 bytes
  3091 ;; Hardware stack levels used: 1
  3092 ;; Hardware stack levels required when called: 2
  3093 ;; This function calls:
  3094 ;;		_SetCSPin
  3095 ;;		_SetResetPin
  3096 ;;		_SetWakePin
  3097 ;; This function is called by:
  3098 ;;		_MRF24J40Init
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text9
  3103   001D90                     __ptext9:
  3104                           	callstack 0
  3105   001D90                     _InicializoPines:
  3106                           	callstack 27
  3107   001D90                     
  3108                           ;drivers/scr/API_MRF24J40_port.c: 23:     SetCSPin(1);
  3109   001D90  0E01               	movlw	1
  3110   001D92  EC00  F00F         	call	_SetCSPin
  3111                           
  3112                           ;drivers/scr/API_MRF24J40_port.c: 24:     SetWakePin(1);
  3113   001D96  0E01               	movlw	1
  3114   001D98  ECE4  F00E         	call	_SetWakePin
  3115                           
  3116                           ;drivers/scr/API_MRF24J40_port.c: 25:     SetResetPin(0);
  3117   001D9C  0E00               	movlw	0
  3118   001D9E  ECEB  F00E         	call	_SetResetPin
  3119   001DA2  0012               	return		;funcret
  3120   001DA4                     __end_of_InicializoPines:
  3121                           	callstack 0
  3122                           
  3123 ;; *************** function _SetWakePin *****************
  3124 ;; Defined at:
  3125 ;;		line 45 in file "drivers/scr/API_MRF24J40_port.c"
  3126 ;; Parameters:    Size  Location     Type
  3127 ;;  estado          1    wreg     _Bool 
  3128 ;; Auto vars:     Size  Location     Type
  3129 ;;  estado          1    0[COMRAM] _Bool 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		wreg
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;Total ram usage:        1 bytes
  3144 ;; Hardware stack levels used: 1
  3145 ;; Hardware stack levels required when called: 1
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_InicializoPines
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text10
  3154   001DC8                     __ptext10:
  3155                           	callstack 0
  3156   001DC8                     _SetWakePin:
  3157                           	callstack 27
  3158                           
  3159                           ;incstack = 0
  3160                           ;SetWakePin@estado stored from wreg
  3161   001DC8  6E27               	movwf	SetWakePin@estado^0,c
  3162   001DCA                     
  3163                           ;drivers/scr/API_MRF24J40_port.c: 47:     LATCbits.LATC7 = estado;
  3164   001DCA  B027               	btfsc	SetWakePin@estado^0,0,c
  3165   001DCC  D002               	bra	u585
  3166   001DCE  9E8B               	bcf	139,7,c	;volatile
  3167   001DD0  D001               	bra	u586
  3168   001DD2                     u585:
  3169   001DD2  8E8B               	bsf	139,7,c	;volatile
  3170   001DD4                     u586:
  3171   001DD4  0012               	return		;funcret
  3172   001DD6                     __end_of_SetWakePin:
  3173                           	callstack 0
  3174                           
  3175 ;; *************** function _SetResetPin *****************
  3176 ;; Defined at:
  3177 ;;		line 56 in file "drivers/scr/API_MRF24J40_port.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  estado          1    wreg     _Bool 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  estado          1    0[COMRAM] _Bool 
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  1    wreg      void 
  3184 ;; Registers used:
  3185 ;;		wreg
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3195 ;;Total ram usage:        1 bytes
  3196 ;; Hardware stack levels used: 1
  3197 ;; Hardware stack levels required when called: 1
  3198 ;; This function calls:
  3199 ;;		Nothing
  3200 ;; This function is called by:
  3201 ;;		_InicializoPines
  3202 ;;		_MRF24J40Init
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text11
  3207   001DD6                     __ptext11:
  3208                           	callstack 0
  3209   001DD6                     _SetResetPin:
  3210                           	callstack 28
  3211                           
  3212                           ;incstack = 0
  3213                           ;SetResetPin@estado stored from wreg
  3214   001DD6  6E27               	movwf	SetResetPin@estado^0,c
  3215   001DD8                     
  3216                           ;drivers/scr/API_MRF24J40_port.c: 58:     LATDbits.LATD4 = estado;
  3217   001DD8  B027               	btfsc	SetResetPin@estado^0,0,c
  3218   001DDA  D002               	bra	u595
  3219   001DDC  988C               	bcf	140,4,c	;volatile
  3220   001DDE  D001               	bra	u596
  3221   001DE0                     u595:
  3222   001DE0  888C               	bsf	140,4,c	;volatile
  3223   001DE2                     u596:
  3224   001DE2  0012               	return		;funcret
  3225   001DE4                     __end_of_SetResetPin:
  3226                           	callstack 0
  3227                           
  3228 ;; *************** function _InicializoMRF24 *****************
  3229 ;; Defined at:
  3230 ;;		line 112 in file "drivers/scr/API_MRF24J40.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;		None
  3233 ;; Auto vars:     Size  Location     Type
  3234 ;;  delay_time_o    9   19[COMRAM] struct .
  3235 ;;  lectura         1   18[COMRAM] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  1    wreg      enum E3263
  3238 ;; Registers used:
  3239 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;Total ram usage:       12 bytes
  3250 ;; Hardware stack levels used: 1
  3251 ;; Hardware stack levels required when called: 6
  3252 ;; This function calls:
  3253 ;;		_DelayInit
  3254 ;;		_DelayRead
  3255 ;;		_DelayReset
  3256 ;;		_GetLongAddr
  3257 ;;		_GetShortAddr
  3258 ;;		_SetChannel
  3259 ;;		_SetDeviceAddress
  3260 ;;		_SetDeviceMACAddress
  3261 ;;		_SetLongAddr
  3262 ;;		_SetShortAddr
  3263 ;; This function is called by:
  3264 ;;		_MRF24J40Init
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text12
  3269   00127A                     __ptext12:
  3270                           	callstack 0
  3271   00127A                     _InicializoMRF24:
  3272                           	callstack 23
  3273   00127A                     
  3274                           ;drivers/scr/API_MRF24J40.c: 114:  uint8_t lectura;;drivers/scr/API_MRF24J40.c: 115:  de
      +                          layNoBloqueanteData_t delay_time_out;;drivers/scr/API_MRF24J40.c: 116:  DelayInit(&delay
      +                          _time_out, 200);
  3275   00127A  0E3A               	movlw	low InicializoMRF24@delay_time_out
  3276   00127C  6E27               	movwf	DelayInit@delay^0,c
  3277   00127E  6A28               	clrf	(DelayInit@delay+1)^0,c
  3278   001280  0EC8               	movlw	200
  3279   001282  6E29               	movwf	DelayInit@duration^0,c
  3280   001284  0E00               	movlw	0
  3281   001286  6E2A               	movwf	(DelayInit@duration+1)^0,c
  3282   001288  0E00               	movlw	0
  3283   00128A  6E2B               	movwf	(DelayInit@duration+2)^0,c
  3284   00128C  0E00               	movlw	0
  3285   00128E  6E2C               	movwf	(DelayInit@duration+3)^0,c
  3286   001290  EC19  F00E         	call	_DelayInit	;wreg free
  3287   001294                     
  3288                           ;drivers/scr/API_MRF24J40.c: 117:  SetShortAddr((0x2A), (0X04) | (0X02) | (0X01));
  3289   001294  0E07               	movlw	7
  3290   001296  6E29               	movwf	SetShortAddr@valor^0,c
  3291   001298  0E2A               	movlw	42
  3292   00129A  EC95  F00E         	call	_SetShortAddr
  3293   00129E                     
  3294                           ;drivers/scr/API_MRF24J40.c: 118:  DelayReset(&delay_time_out);
  3295   00129E  0E3A               	movlw	low InicializoMRF24@delay_time_out
  3296   0012A0  6E27               	movwf	DelayReset@delay^0,c
  3297   0012A2  EC82  F00E         	call	_DelayReset	;wreg free
  3298   0012A6                     l103:
  3299                           
  3300                           ;drivers/scr/API_MRF24J40.c: 122:   lectura = GetShortAddr((0x2A));
  3301   0012A6  0E2A               	movlw	42
  3302   0012A8  EC6F  F00E         	call	_GetShortAddr
  3303   0012AC  6E39               	movwf	InicializoMRF24@lectura^0,c
  3304   0012AE                     
  3305                           ;drivers/scr/API_MRF24J40.c: 123:   if(DelayRead(&delay_time_out))
  3306   0012AE  0E3A               	movlw	low InicializoMRF24@delay_time_out
  3307   0012B0  6E29               	movwf	DelayRead@delay^0,c
  3308   0012B2  6A2A               	clrf	(DelayRead@delay+1)^0,c
  3309   0012B4  ECAD  F00B         	call	_DelayRead	;wreg free
  3310   0012B8  0900               	iorlw	0
  3311   0012BA  B4D8               	btfsc	status,2,c
  3312   0012BC  EF62  F009         	goto	u701
  3313   0012C0  EF64  F009         	goto	u700
  3314   0012C4                     u701:
  3315   0012C4  EF67  F009         	goto	l1985
  3316   0012C8                     u700:
  3317   0012C8                     l1981:
  3318                           
  3319                           ;drivers/scr/API_MRF24J40.c: 124:    return TIME_OUT_OCURRED;
  3320   0012C8  0E07               	movlw	7
  3321   0012CA  EF12  F00A         	goto	l105
  3322   0012CE                     l1985:
  3323                           
  3324                           ;drivers/scr/API_MRF24J40.c: 125:  }while((0X00) != (lectura & ((0X04) | (0X02) | (0X01)
      +                          )));
  3325   0012CE  C039  F037         	movff	InicializoMRF24@lectura,??_InicializoMRF24
  3326   0012D2  0E07               	movlw	7
  3327   0012D4  1637               	andwf	??_InicializoMRF24^0,f,c
  3328   0012D6  A4D8               	btfss	status,2,c
  3329   0012D8  EF70  F009         	goto	u711
  3330   0012DC  EF72  F009         	goto	u710
  3331   0012E0                     u711:
  3332   0012E0  EF53  F009         	goto	l103
  3333   0012E4                     u710:
  3334   0012E4                     
  3335                           ;drivers/scr/API_MRF24J40.c: 126:  _delay((unsigned long)((50)*(16000000/4000.0)));;
  3336   0012E4  0E02               	movlw	2
  3337   0012E6  6E38               	movwf	(??_InicializoMRF24+1)^0,c
  3338   0012E8  0E04               	movlw	4
  3339   0012EA  6E37               	movwf	??_InicializoMRF24^0,c
  3340   0012EC  0EBA               	movlw	186
  3341   0012EE                     u1067:
  3342   0012EE  2EE8               	decfsz	wreg,f,c
  3343   0012F0  D7FE               	bra	u1067
  3344   0012F2  2E37               	decfsz	??_InicializoMRF24^0,f,c
  3345   0012F4  D7FC               	bra	u1067
  3346   0012F6  2E38               	decfsz	(??_InicializoMRF24+1)^0,f,c
  3347   0012F8  D7FA               	bra	u1067
  3348   0012FA  F000 F000          	nop2	
  3349   0012FE                     
  3350                           ;drivers/scr/API_MRF24J40.c: 127:  SetShortAddr((0x0D), (0X01));
  3351   0012FE  0E01               	movlw	1
  3352   001300  6E29               	movwf	SetShortAddr@valor^0,c
  3353   001302  0E0D               	movlw	13
  3354   001304  EC95  F00E         	call	_SetShortAddr
  3355   001308                     
  3356                           ;drivers/scr/API_MRF24J40.c: 128:  SetDeviceAddress();
  3357   001308  EC5A  F00E         	call	_SetDeviceAddress	;wreg free
  3358   00130C                     
  3359                           ;drivers/scr/API_MRF24J40.c: 129:  SetDeviceMACAddress();
  3360   00130C  EC45  F00E         	call	_SetDeviceMACAddress	;wreg free
  3361   001310                     
  3362                           ;drivers/scr/API_MRF24J40.c: 130:  SetLongAddr((0x201), (0X02) | (0X01));
  3363   001310  0E02               	movlw	2
  3364   001312  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3365   001314  0E01               	movlw	1
  3366   001316  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3367   001318  0E03               	movlw	3
  3368   00131A  6E2E               	movwf	SetLongAddr@valor^0,c
  3369   00131C  EC51  F00D         	call	_SetLongAddr	;wreg free
  3370   001320                     
  3371                           ;drivers/scr/API_MRF24J40.c: 131:  SetLongAddr((0x202), (0X80));
  3372   001320  0E02               	movlw	2
  3373   001322  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3374   001324  0E02               	movlw	2
  3375   001326  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3376   001328  0E80               	movlw	128
  3377   00132A  6E2E               	movwf	SetLongAddr@valor^0,c
  3378   00132C  EC51  F00D         	call	_SetLongAddr	;wreg free
  3379   001330                     
  3380                           ;drivers/scr/API_MRF24J40.c: 132:  SetLongAddr((0x203), (0X80) | (0X00));
  3381   001330  0E02               	movlw	2
  3382   001332  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3383   001334  0E03               	movlw	3
  3384   001336  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3385   001338  0E80               	movlw	128
  3386   00133A  6E2E               	movwf	SetLongAddr@valor^0,c
  3387   00133C  EC51  F00D         	call	_SetLongAddr	;wreg free
  3388   001340                     
  3389                           ;drivers/scr/API_MRF24J40.c: 133:  SetLongAddr((0x206), (0X80) | (0X10));
  3390   001340  0E02               	movlw	2
  3391   001342  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3392   001344  0E06               	movlw	6
  3393   001346  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3394   001348  0E90               	movlw	144
  3395   00134A  6E2E               	movwf	SetLongAddr@valor^0,c
  3396   00134C  EC51  F00D         	call	_SetLongAddr	;wreg free
  3397   001350                     
  3398                           ;drivers/scr/API_MRF24J40.c: 134:  SetLongAddr((0x207), (0X80));
  3399   001350  0E02               	movlw	2
  3400   001352  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3401   001354  0E07               	movlw	7
  3402   001356  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3403   001358  0E80               	movlw	128
  3404   00135A  6E2E               	movwf	SetLongAddr@valor^0,c
  3405   00135C  EC51  F00D         	call	_SetLongAddr	;wreg free
  3406   001360                     
  3407                           ;drivers/scr/API_MRF24J40.c: 135:  SetLongAddr((0x208), (0X10));
  3408   001360  0E02               	movlw	2
  3409   001362  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3410   001364  0E08               	movlw	8
  3411   001366  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3412   001368  0E10               	movlw	16
  3413   00136A  6E2E               	movwf	SetLongAddr@valor^0,c
  3414   00136C  EC51  F00D         	call	_SetLongAddr	;wreg free
  3415   001370                     
  3416                           ;drivers/scr/API_MRF24J40.c: 136:  SetLongAddr((0x220), (0X20) | (0X01));
  3417   001370  0E02               	movlw	2
  3418   001372  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3419   001374  0E20               	movlw	32
  3420   001376  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3421   001378  0E21               	movlw	33
  3422   00137A  6E2E               	movwf	SetLongAddr@valor^0,c
  3423   00137C  EC51  F00D         	call	_SetLongAddr	;wreg free
  3424   001380                     
  3425                           ;drivers/scr/API_MRF24J40.c: 137:  SetShortAddr((0x3A), (0X80));
  3426   001380  0E80               	movlw	128
  3427   001382  6E29               	movwf	SetShortAddr@valor^0,c
  3428   001384  0E3A               	movlw	58
  3429   001386  EC95  F00E         	call	_SetShortAddr
  3430   00138A                     
  3431                           ;drivers/scr/API_MRF24J40.c: 138:  SetShortAddr((0x3E), (0X40));
  3432   00138A  0E40               	movlw	64
  3433   00138C  6E29               	movwf	SetShortAddr@valor^0,c
  3434   00138E  0E3E               	movlw	62
  3435   001390  EC95  F00E         	call	_SetShortAddr
  3436   001394                     
  3437                           ;drivers/scr/API_MRF24J40.c: 139:  SetShortAddr((0x3F), (0X04) | (0X02));
  3438   001394  0E06               	movlw	6
  3439   001396  6E29               	movwf	SetShortAddr@valor^0,c
  3440   001398  0E3F               	movlw	63
  3441   00139A  EC95  F00E         	call	_SetShortAddr
  3442   00139E                     
  3443                           ;drivers/scr/API_MRF24J40.c: 140:  SetShortAddr((0x18), (0X80) | (0X10) | (0X08));
  3444   00139E  0E98               	movlw	152
  3445   0013A0  6E29               	movwf	SetShortAddr@valor^0,c
  3446   0013A2  0E18               	movlw	24
  3447   0013A4  EC95  F00E         	call	_SetShortAddr
  3448   0013A8                     
  3449                           ;drivers/scr/API_MRF24J40.c: 141:  SetShortAddr((0x2E), (0X80) | (0X10) | (0X04) | (0X01
      +                          ));
  3450   0013A8  0E95               	movlw	149
  3451   0013AA  6E29               	movwf	SetShortAddr@valor^0,c
  3452   0013AC  0E2E               	movlw	46
  3453   0013AE  EC95  F00E         	call	_SetShortAddr
  3454   0013B2                     
  3455                           ;drivers/scr/API_MRF24J40.c: 142:  DelayReset(&delay_time_out);
  3456   0013B2  0E3A               	movlw	low InicializoMRF24@delay_time_out
  3457   0013B4  6E27               	movwf	DelayReset@delay^0,c
  3458   0013B6  EC82  F00E         	call	_DelayReset	;wreg free
  3459   0013BA                     l2021:
  3460                           
  3461                           ;drivers/scr/API_MRF24J40.c: 146:   lectura = GetLongAddr((0x20f)) & (0XA0);
  3462   0013BA  0E02               	movlw	2
  3463   0013BC  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  3464   0013BE  0E0F               	movlw	15
  3465   0013C0  6E2C               	movwf	GetLongAddr@reg_address^0,c
  3466   0013C2  EC2F  F00D         	call	_GetLongAddr	;wreg free
  3467   0013C6  0BA0               	andlw	160
  3468   0013C8  6E39               	movwf	InicializoMRF24@lectura^0,c
  3469   0013CA                     
  3470                           ;drivers/scr/API_MRF24J40.c: 147:   if(DelayRead(&delay_time_out))
  3471   0013CA  0E3A               	movlw	low InicializoMRF24@delay_time_out
  3472   0013CC  6E29               	movwf	DelayRead@delay^0,c
  3473   0013CE  6A2A               	clrf	(DelayRead@delay+1)^0,c
  3474   0013D0  ECAD  F00B         	call	_DelayRead	;wreg free
  3475   0013D4  0900               	iorlw	0
  3476   0013D6  B4D8               	btfsc	status,2,c
  3477   0013D8  EFF0  F009         	goto	u721
  3478   0013DC  EFF2  F009         	goto	u720
  3479   0013E0                     u721:
  3480   0013E0  EFF4  F009         	goto	l2029
  3481   0013E4                     u720:
  3482   0013E4  EF64  F009         	goto	l1981
  3483   0013E8                     l2029:
  3484                           
  3485                           ;drivers/scr/API_MRF24J40.c: 149:  }while((0XA0) != lectura);
  3486   0013E8  0EA0               	movlw	160
  3487   0013EA  1839               	xorwf	InicializoMRF24@lectura^0,w,c
  3488   0013EC  A4D8               	btfss	status,2,c
  3489   0013EE  EFFB  F009         	goto	u731
  3490   0013F2  EFFD  F009         	goto	u730
  3491   0013F6                     u731:
  3492   0013F6  EFDD  F009         	goto	l2021
  3493   0013FA                     u730:
  3494   0013FA                     
  3495                           ;drivers/scr/API_MRF24J40.c: 150:  SetShortAddr((0x32), (0X80) | (0X40) | (0X20) | (0X10
      +                          )
  3496   0013FA  0EF5               	movlw	245
  3497   0013FC  6E29               	movwf	SetShortAddr@valor^0,c
  3498   0013FE  0E32               	movlw	50
  3499   001400  EC95  F00E         	call	_SetShortAddr
  3500                           
  3501                           ;drivers/scr/API_MRF24J40.c: 152:  SetShortAddr((0x12), (0X80) | (0X20) | (0X10) | (0X08
      +                          ) | (0X01));
  3502   001404  0EB9               	movlw	185
  3503   001406  6E29               	movwf	SetShortAddr@valor^0,c
  3504   001408  0E12               	movlw	18
  3505   00140A  EC95  F00E         	call	_SetShortAddr
  3506                           
  3507                           ;drivers/scr/API_MRF24J40.c: 153:  SetChannel();
  3508   00140E  ECCC  F00D         	call	_SetChannel	;wreg free
  3509                           
  3510                           ;drivers/scr/API_MRF24J40.c: 154:  SetShortAddr((0x00), (0X00));
  3511   001412  0E00               	movlw	0
  3512   001414  6E29               	movwf	SetShortAddr@valor^0,c
  3513   001416  0E00               	movlw	0
  3514   001418  EC95  F00E         	call	_SetShortAddr
  3515                           
  3516                           ;drivers/scr/API_MRF24J40.c: 155:  (void)GetShortAddr((0x31));
  3517   00141C  0E31               	movlw	49
  3518   00141E  EC6F  F00E         	call	_GetShortAddr
  3519   001422                     
  3520                           ;drivers/scr/API_MRF24J40.c: 156:  return INITIALIZATION_OK;
  3521   001422  0E00               	movlw	0
  3522   001424                     l105:
  3523   001424  0012               	return		;funcret
  3524   001426                     __end_of_InicializoMRF24:
  3525                           	callstack 0
  3526                           
  3527 ;; *************** function _SetDeviceMACAddress *****************
  3528 ;; Defined at:
  3529 ;;		line 272 in file "drivers/scr/API_MRF24J40.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  i               1    4[COMRAM] unsigned char 
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;Total ram usage:        1 bytes
  3548 ;; Hardware stack levels used: 1
  3549 ;; Hardware stack levels required when called: 4
  3550 ;; This function calls:
  3551 ;;		_SetShortAddr
  3552 ;; This function is called by:
  3553 ;;		_InicializoMRF24
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text13
  3558   001C8A                     __ptext13:
  3559                           	callstack 0
  3560   001C8A                     _SetDeviceMACAddress:
  3561                           	callstack 24
  3562   001C8A                     
  3563                           ;drivers/scr/API_MRF24J40.c: 274:  for(uint8_t i = 0; i < 8; i++) {
  3564   001C8A  6A2B               	clrf	SetDeviceMACAddress@i^0,c
  3565   001C8C                     l1923:
  3566                           
  3567                           ;drivers/scr/API_MRF24J40.c: 276:   SetShortAddr(EADR0 + i, data_config_s.my_mac[i]);
  3568   001C8C  502B               	movf	SetDeviceMACAddress@i^0,w,c
  3569   001C8E  0F0F               	addlw	low (_data_config_s+8)
  3570   001C90  6ED9               	movwf	fsr2l,c
  3571   001C92  6ADA               	clrf	fsr2h,c
  3572   001C94  50DF               	movf	indf2,w,c
  3573   001C96  6E29               	movwf	SetShortAddr@valor^0,c
  3574   001C98  502B               	movf	SetDeviceMACAddress@i^0,w,c
  3575   001C9A  0F05               	addlw	5
  3576   001C9C  EC95  F00E         	call	_SetShortAddr
  3577   001CA0                     
  3578                           ;drivers/scr/API_MRF24J40.c: 277:  }
  3579   001CA0  2A2B               	incf	SetDeviceMACAddress@i^0,f,c
  3580   001CA2  0E07               	movlw	7
  3581   001CA4  642B               	cpfsgt	SetDeviceMACAddress@i^0,c
  3582   001CA6  EF57  F00E         	goto	u651
  3583   001CAA  EF59  F00E         	goto	u650
  3584   001CAE                     u651:
  3585   001CAE  EF46  F00E         	goto	l1923
  3586   001CB2                     u650:
  3587   001CB2  0012               	return		;funcret
  3588   001CB4                     __end_of_SetDeviceMACAddress:
  3589                           	callstack 0
  3590                           
  3591 ;; *************** function _SetDeviceAddress *****************
  3592 ;; Defined at:
  3593 ;;		line 258 in file "drivers/scr/API_MRF24J40.c"
  3594 ;; Parameters:    Size  Location     Type
  3595 ;;		None
  3596 ;; Auto vars:     Size  Location     Type
  3597 ;;		None
  3598 ;; Return value:  Size  Location     Type
  3599 ;;                  1    wreg      void 
  3600 ;; Registers used:
  3601 ;;		wreg, status,2, status,0, cstack
  3602 ;; Tracked objects:
  3603 ;;		On entry : 0/0
  3604 ;;		On exit  : 0/0
  3605 ;;		Unchanged: 0/0
  3606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;Total ram usage:        0 bytes
  3612 ;; Hardware stack levels used: 1
  3613 ;; Hardware stack levels required when called: 4
  3614 ;; This function calls:
  3615 ;;		_SetShortAddr
  3616 ;; This function is called by:
  3617 ;;		_InicializoMRF24
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           	psect	text14
  3622   001CB4                     __ptext14:
  3623                           	callstack 0
  3624   001CB4                     _SetDeviceAddress:
  3625                           	callstack 24
  3626   001CB4                     
  3627                           ;drivers/scr/API_MRF24J40.c: 260:  SetShortAddr((0x04), (uint8_t) (data_config_s.my_addr
      +                          ess >> (0X08)));
  3628   001CB4  500B               	movf	(_data_config_s+4)^0,w,c
  3629   001CB6  6E29               	movwf	SetShortAddr@valor^0,c
  3630   001CB8  0E04               	movlw	4
  3631   001CBA  EC95  F00E         	call	_SetShortAddr
  3632                           
  3633                           ;drivers/scr/API_MRF24J40.c: 261:  SetShortAddr((0x03), (uint8_t) (data_config_s.my_addr
      +                          ess));
  3634   001CBE  C00A  F029         	movff	_data_config_s+3,SetShortAddr@valor
  3635   001CC2  0E03               	movlw	3
  3636   001CC4  EC95  F00E         	call	_SetShortAddr
  3637                           
  3638                           ;drivers/scr/API_MRF24J40.c: 262:  SetShortAddr((0x02), (uint8_t) (data_config_s.my_pani
      +                          d >> (0X08)));
  3639   001CC8  5009               	movf	(_data_config_s+2)^0,w,c
  3640   001CCA  6E29               	movwf	SetShortAddr@valor^0,c
  3641   001CCC  0E02               	movlw	2
  3642   001CCE  EC95  F00E         	call	_SetShortAddr
  3643                           
  3644                           ;drivers/scr/API_MRF24J40.c: 263:  SetShortAddr((0x01), (uint8_t) (data_config_s.my_pani
      +                          d));
  3645   001CD2  C008  F029         	movff	_data_config_s+1,SetShortAddr@valor
  3646   001CD6  0E01               	movlw	1
  3647   001CD8  EC95  F00E         	call	_SetShortAddr
  3648   001CDC  0012               	return		;funcret
  3649   001CDE                     __end_of_SetDeviceAddress:
  3650                           	callstack 0
  3651                           
  3652 ;; *************** function _SetChannel *****************
  3653 ;; Defined at:
  3654 ;;		line 244 in file "drivers/scr/API_MRF24J40.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;		None
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;		None
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, status,2, status,0, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;Total ram usage:        1 bytes
  3673 ;; Hardware stack levels used: 1
  3674 ;; Hardware stack levels required when called: 5
  3675 ;; This function calls:
  3676 ;;		_SetLongAddr
  3677 ;;		_SetShortAddr
  3678 ;; This function is called by:
  3679 ;;		_InicializoMRF24
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text15
  3684   001B98                     __ptext15:
  3685                           	callstack 0
  3686   001B98                     _SetChannel:
  3687                           	callstack 23
  3688   001B98                     
  3689                           ;drivers/scr/API_MRF24J40.c: 246:  SetLongAddr((0x200), data_config_s.my_channel);
  3690   001B98  0E02               	movlw	2
  3691   001B9A  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3692   001B9C  0E00               	movlw	0
  3693   001B9E  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3694   001BA0  C007  F02E         	movff	_data_config_s,SetLongAddr@valor
  3695   001BA4  EC51  F00D         	call	_SetLongAddr	;wreg free
  3696                           
  3697                           ;drivers/scr/API_MRF24J40.c: 247:  SetShortAddr((0x36), (0X04));
  3698   001BA8  0E04               	movlw	4
  3699   001BAA  6E29               	movwf	SetShortAddr@valor^0,c
  3700   001BAC  0E36               	movlw	54
  3701   001BAE  EC95  F00E         	call	_SetShortAddr
  3702                           
  3703                           ;drivers/scr/API_MRF24J40.c: 248:  SetShortAddr((0x36), (0X00));
  3704   001BB2  0E00               	movlw	0
  3705   001BB4  6E29               	movwf	SetShortAddr@valor^0,c
  3706   001BB6  0E36               	movlw	54
  3707   001BB8  EC95  F00E         	call	_SetShortAddr
  3708   001BBC                     
  3709                           ;drivers/scr/API_MRF24J40.c: 249:  _delay((unsigned long)((1)*(16000000/4000.0)));;
  3710   001BBC  0E06               	movlw	6
  3711   001BBE  6E31               	movwf	??_SetChannel^0,c
  3712   001BC0  0E30               	movlw	48
  3713   001BC2                     u1077:
  3714   001BC2  2EE8               	decfsz	wreg,f,c
  3715   001BC4  D7FE               	bra	u1077
  3716   001BC6  2E31               	decfsz	??_SetChannel^0,f,c
  3717   001BC8  D7FC               	bra	u1077
  3718   001BCA  F000 F000          	nop2	
  3719   001BCE  0012               	return		;funcret
  3720   001BD0                     __end_of_SetChannel:
  3721                           	callstack 0
  3722                           
  3723 ;; *************** function _SetShortAddr *****************
  3724 ;; Defined at:
  3725 ;;		line 168 in file "drivers/scr/API_MRF24J40.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  reg_address     1    wreg     unsigned char 
  3728 ;;  valor           1    2[COMRAM] unsigned char 
  3729 ;; Auto vars:     Size  Location     Type
  3730 ;;  reg_address     1    3[COMRAM] unsigned char 
  3731 ;; Return value:  Size  Location     Type
  3732 ;;                  1    wreg      void 
  3733 ;; Registers used:
  3734 ;;		wreg, status,2, status,0, cstack
  3735 ;; Tracked objects:
  3736 ;;		On entry : 0/0
  3737 ;;		On exit  : 0/0
  3738 ;;		Unchanged: 0/0
  3739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3740 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3741 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;Total ram usage:        2 bytes
  3745 ;; Hardware stack levels used: 1
  3746 ;; Hardware stack levels required when called: 3
  3747 ;; This function calls:
  3748 ;;		_SetCSPin
  3749 ;;		_WriteByteSPIPort
  3750 ;; This function is called by:
  3751 ;;		_InicializoMRF24
  3752 ;;		_SetChannel
  3753 ;;		_SetDeviceAddress
  3754 ;;		_SetDeviceMACAddress
  3755 ;;		_MRF24TransmitirDato
  3756 ;;		_MRF24ReciboPaquete
  3757 ;;		_MRF24BuscarDispositivos
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text16
  3762   001D2A                     __ptext16:
  3763                           	callstack 0
  3764   001D2A                     _SetShortAddr:
  3765                           	callstack 25
  3766                           
  3767                           ;incstack = 0
  3768                           ;SetShortAddr@reg_address stored from wreg
  3769   001D2A  6E2A               	movwf	SetShortAddr@reg_address^0,c
  3770   001D2C                     
  3771                           ;drivers/scr/API_MRF24J40.c: 170:  reg_address = (uint8_t) (reg_address << (0X01)) | (0x
      +                          01);
  3772   001D2C  80D8               	bsf	status,0,c
  3773   001D2E  362A               	rlcf	SetShortAddr@reg_address^0,f,c
  3774   001D30                     
  3775                           ;drivers/scr/API_MRF24J40.c: 171:  SetCSPin(0);
  3776   001D30  0E00               	movlw	0
  3777   001D32  EC00  F00F         	call	_SetCSPin
  3778   001D36                     
  3779                           ;drivers/scr/API_MRF24J40.c: 172:  WriteByteSPIPort(reg_address);
  3780   001D36  502A               	movf	SetShortAddr@reg_address^0,w,c
  3781   001D38  EC07  F00F         	call	_WriteByteSPIPort
  3782   001D3C                     
  3783                           ;drivers/scr/API_MRF24J40.c: 173:  WriteByteSPIPort(valor);
  3784   001D3C  5029               	movf	SetShortAddr@valor^0,w,c
  3785   001D3E  EC07  F00F         	call	_WriteByteSPIPort
  3786   001D42                     
  3787                           ;drivers/scr/API_MRF24J40.c: 174:  SetCSPin(1);
  3788   001D42  0E01               	movlw	1
  3789   001D44  EC00  F00F         	call	_SetCSPin
  3790   001D48  0012               	return		;funcret
  3791   001D4A                     __end_of_SetShortAddr:
  3792                           	callstack 0
  3793                           
  3794 ;; *************** function _SetLongAddr *****************
  3795 ;; Defined at:
  3796 ;;		line 208 in file "drivers/scr/API_MRF24J40.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;  reg_address     2    5[COMRAM] unsigned short 
  3799 ;;  valor           1    7[COMRAM] unsigned char 
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, status,0, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3811 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;Total ram usage:        5 bytes
  3816 ;; Hardware stack levels used: 1
  3817 ;; Hardware stack levels required when called: 4
  3818 ;; This function calls:
  3819 ;;		_SetCSPin
  3820 ;;		_Write2ByteSPIPort
  3821 ;;		_WriteByteSPIPort
  3822 ;; This function is called by:
  3823 ;;		_InicializoMRF24
  3824 ;;		_SetChannel
  3825 ;;		_MRF24TransmitirDato
  3826 ;;		_MRF24ReciboPaquete
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text17
  3831   001AA2                     __ptext17:
  3832                           	callstack 0
  3833   001AA2                     _SetLongAddr:
  3834                           	callstack 24
  3835   001AA2                     
  3836                           ;drivers/scr/API_MRF24J40.c: 210:  reg_address = (reg_address << (0X05)) | (0X8010);
  3837   001AA2  C02C  F02F         	movff	SetLongAddr@reg_address,??_SetLongAddr
  3838   001AA6  C02D  F030         	movff	SetLongAddr@reg_address+1,??_SetLongAddr+1
  3839   001AAA  0E05               	movlw	5
  3840   001AAC                     u575:
  3841   001AAC  90D8               	bcf	status,0,c
  3842   001AAE  362F               	rlcf	??_SetLongAddr^0,f,c
  3843   001AB0  3630               	rlcf	(??_SetLongAddr+1)^0,f,c
  3844   001AB2  2EE8               	decfsz	wreg,f,c
  3845   001AB4  EF56  F00D         	goto	u575
  3846   001AB8  0E10               	movlw	16
  3847   001ABA  102F               	iorwf	??_SetLongAddr^0,w,c
  3848   001ABC  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3849   001ABE  0E80               	movlw	128
  3850   001AC0  1030               	iorwf	(??_SetLongAddr+1)^0,w,c
  3851   001AC2  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3852   001AC4                     
  3853                           ;drivers/scr/API_MRF24J40.c: 211:  SetCSPin(0);
  3854   001AC4  0E00               	movlw	0
  3855   001AC6  EC00  F00F         	call	_SetCSPin
  3856   001ACA                     
  3857                           ;drivers/scr/API_MRF24J40.c: 212:  Write2ByteSPIPort(reg_address);
  3858   001ACA  C02C  F02A         	movff	SetLongAddr@reg_address,Write2ByteSPIPort@dato
  3859   001ACE  C02D  F02B         	movff	SetLongAddr@reg_address+1,Write2ByteSPIPort@dato+1
  3860   001AD2  ECF2  F00E         	call	_Write2ByteSPIPort	;wreg free
  3861   001AD6                     
  3862                           ;drivers/scr/API_MRF24J40.c: 213:  WriteByteSPIPort(valor);
  3863   001AD6  502E               	movf	SetLongAddr@valor^0,w,c
  3864   001AD8  EC07  F00F         	call	_WriteByteSPIPort
  3865   001ADC                     
  3866                           ;drivers/scr/API_MRF24J40.c: 214:  SetCSPin(1);
  3867   001ADC  0E01               	movlw	1
  3868   001ADE  EC00  F00F         	call	_SetCSPin
  3869   001AE2  0012               	return		;funcret
  3870   001AE4                     __end_of_SetLongAddr:
  3871                           	callstack 0
  3872                           
  3873 ;; *************** function _GetShortAddr *****************
  3874 ;; Defined at:
  3875 ;;		line 187 in file "drivers/scr/API_MRF24J40.c"
  3876 ;; Parameters:    Size  Location     Type
  3877 ;;  reg_address     1    wreg     unsigned char 
  3878 ;; Auto vars:     Size  Location     Type
  3879 ;;  reg_address     1    3[COMRAM] unsigned char 
  3880 ;;  leido_spi       1    2[COMRAM] unsigned char 
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      unsigned char 
  3883 ;; Registers used:
  3884 ;;		wreg, status,2, status,0, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3891 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;Total ram usage:        2 bytes
  3895 ;; Hardware stack levels used: 1
  3896 ;; Hardware stack levels required when called: 3
  3897 ;; This function calls:
  3898 ;;		_ReadByteSPIPort
  3899 ;;		_SetCSPin
  3900 ;;		_WriteByteSPIPort
  3901 ;; This function is called by:
  3902 ;;		_InicializoMRF24
  3903 ;;		_MRF24ReciboPaquete
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text18
  3908   001CDE                     __ptext18:
  3909                           	callstack 0
  3910   001CDE                     _GetShortAddr:
  3911                           	callstack 26
  3912                           
  3913                           ;incstack = 0
  3914                           ;GetShortAddr@reg_address stored from wreg
  3915   001CDE  6E2A               	movwf	GetShortAddr@reg_address^0,c
  3916   001CE0                     
  3917                           ;drivers/scr/API_MRF24J40.c: 190:  reg_address = (uint8_t) (reg_address << (0X01)) & (0x
      +                          7E);
  3918   001CE0  502A               	movf	GetShortAddr@reg_address^0,w,c
  3919   001CE2  242A               	addwf	GetShortAddr@reg_address^0,w,c
  3920   001CE4  0B7E               	andlw	126
  3921   001CE6  6E2A               	movwf	GetShortAddr@reg_address^0,c
  3922   001CE8                     
  3923                           ;drivers/scr/API_MRF24J40.c: 191:  SetCSPin(0);
  3924   001CE8  0E00               	movlw	0
  3925   001CEA  EC00  F00F         	call	_SetCSPin
  3926   001CEE                     
  3927                           ;drivers/scr/API_MRF24J40.c: 192:  WriteByteSPIPort(reg_address);
  3928   001CEE  502A               	movf	GetShortAddr@reg_address^0,w,c
  3929   001CF0  EC07  F00F         	call	_WriteByteSPIPort
  3930   001CF4                     
  3931                           ;drivers/scr/API_MRF24J40.c: 193:  leido_spi = ReadByteSPIPort();
  3932   001CF4  EC11  F00F         	call	_ReadByteSPIPort	;wreg free
  3933   001CF8  6E29               	movwf	GetShortAddr@leido_spi^0,c
  3934   001CFA                     
  3935                           ;drivers/scr/API_MRF24J40.c: 194:  SetCSPin(1);
  3936   001CFA  0E01               	movlw	1
  3937   001CFC  EC00  F00F         	call	_SetCSPin
  3938   001D00                     
  3939                           ;drivers/scr/API_MRF24J40.c: 195:  return leido_spi;
  3940   001D00  5029               	movf	GetShortAddr@leido_spi^0,w,c
  3941   001D02  0012               	return		;funcret
  3942   001D04                     __end_of_GetShortAddr:
  3943                           	callstack 0
  3944                           
  3945 ;; *************** function _WriteByteSPIPort *****************
  3946 ;; Defined at:
  3947 ;;		line 76 in file "drivers/scr/API_MRF24J40_port.c"
  3948 ;; Parameters:    Size  Location     Type
  3949 ;;  dato            1    wreg     unsigned char 
  3950 ;; Auto vars:     Size  Location     Type
  3951 ;;  dato            1    1[COMRAM] unsigned char 
  3952 ;; Return value:  Size  Location     Type
  3953 ;;                  1    wreg      void 
  3954 ;; Registers used:
  3955 ;;		wreg, status,2, cstack
  3956 ;; Tracked objects:
  3957 ;;		On entry : 0/0
  3958 ;;		On exit  : 0/0
  3959 ;;		Unchanged: 0/0
  3960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;Total ram usage:        1 bytes
  3966 ;; Hardware stack levels used: 1
  3967 ;; Hardware stack levels required when called: 2
  3968 ;; This function calls:
  3969 ;;		_SPIWriteByte
  3970 ;; This function is called by:
  3971 ;;		_SetShortAddr
  3972 ;;		_GetShortAddr
  3973 ;;		_SetLongAddr
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text19
  3978   001E0E                     __ptext19:
  3979                           	callstack 0
  3980   001E0E                     _WriteByteSPIPort:
  3981                           	callstack 25
  3982                           
  3983                           ;incstack = 0
  3984                           ;WriteByteSPIPort@dato stored from wreg
  3985   001E0E  6E28               	movwf	WriteByteSPIPort@dato^0,c
  3986   001E10                     
  3987                           ;drivers/scr/API_MRF24J40_port.c: 78:     SPIWriteByte(dato);
  3988   001E10  5028               	movf	WriteByteSPIPort@dato^0,w,c
  3989   001E12  ECA5  F00E         	call	_SPIWriteByte
  3990   001E16  0012               	return		;funcret
  3991   001E18                     __end_of_WriteByteSPIPort:
  3992                           	callstack 0
  3993                           
  3994 ;; *************** function _GetLongAddr *****************
  3995 ;; Defined at:
  3996 ;;		line 228 in file "drivers/scr/API_MRF24J40.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;  reg_address     2    5[COMRAM] unsigned short 
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;  respuesta       1    9[COMRAM] unsigned char 
  4001 ;; Return value:  Size  Location     Type
  4002 ;;                  1    wreg      unsigned char 
  4003 ;; Registers used:
  4004 ;;		wreg, status,2, status,0, cstack
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;Total ram usage:        5 bytes
  4015 ;; Hardware stack levels used: 1
  4016 ;; Hardware stack levels required when called: 4
  4017 ;; This function calls:
  4018 ;;		_ReadByteSPIPort
  4019 ;;		_SetCSPin
  4020 ;;		_Write2ByteSPIPort
  4021 ;; This function is called by:
  4022 ;;		_InicializoMRF24
  4023 ;;		_MRF24ReciboPaquete
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text20
  4028   001A5E                     __ptext20:
  4029                           	callstack 0
  4030   001A5E                     _GetLongAddr:
  4031                           	callstack 25
  4032   001A5E                     
  4033                           ;drivers/scr/API_MRF24J40.c: 230:  uint8_t respuesta;;drivers/scr/API_MRF24J40.c: 231:  
      +                          reg_address = (reg_address << (0X05)) | (0X8000);
  4034   001A5E  C02C  F02E         	movff	GetLongAddr@reg_address,??_GetLongAddr
  4035   001A62  C02D  F02F         	movff	GetLongAddr@reg_address+1,??_GetLongAddr+1
  4036   001A66  0E05               	movlw	5
  4037   001A68                     u665:
  4038   001A68  90D8               	bcf	status,0,c
  4039   001A6A  362E               	rlcf	??_GetLongAddr^0,f,c
  4040   001A6C  362F               	rlcf	(??_GetLongAddr+1)^0,f,c
  4041   001A6E  2EE8               	decfsz	wreg,f,c
  4042   001A70  EF34  F00D         	goto	u665
  4043   001A74  0E00               	movlw	0
  4044   001A76  102E               	iorwf	??_GetLongAddr^0,w,c
  4045   001A78  6E2C               	movwf	GetLongAddr@reg_address^0,c
  4046   001A7A  0E80               	movlw	128
  4047   001A7C  102F               	iorwf	(??_GetLongAddr+1)^0,w,c
  4048   001A7E  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  4049   001A80                     
  4050                           ;drivers/scr/API_MRF24J40.c: 232:  SetCSPin(0);
  4051   001A80  0E00               	movlw	0
  4052   001A82  EC00  F00F         	call	_SetCSPin
  4053   001A86                     
  4054                           ;drivers/scr/API_MRF24J40.c: 233:  Write2ByteSPIPort(reg_address);
  4055   001A86  C02C  F02A         	movff	GetLongAddr@reg_address,Write2ByteSPIPort@dato
  4056   001A8A  C02D  F02B         	movff	GetLongAddr@reg_address+1,Write2ByteSPIPort@dato+1
  4057   001A8E  ECF2  F00E         	call	_Write2ByteSPIPort	;wreg free
  4058   001A92                     
  4059                           ;drivers/scr/API_MRF24J40.c: 234:  respuesta = ReadByteSPIPort();
  4060   001A92  EC11  F00F         	call	_ReadByteSPIPort	;wreg free
  4061   001A96  6E30               	movwf	GetLongAddr@respuesta^0,c
  4062   001A98                     
  4063                           ;drivers/scr/API_MRF24J40.c: 235:  SetCSPin(1);
  4064   001A98  0E01               	movlw	1
  4065   001A9A  EC00  F00F         	call	_SetCSPin
  4066   001A9E                     
  4067                           ;drivers/scr/API_MRF24J40.c: 236:  return respuesta;
  4068   001A9E  5030               	movf	GetLongAddr@respuesta^0,w,c
  4069   001AA0  0012               	return		;funcret
  4070   001AA2                     __end_of_GetLongAddr:
  4071                           	callstack 0
  4072                           
  4073 ;; *************** function _Write2ByteSPIPort *****************
  4074 ;; Defined at:
  4075 ;;		line 87 in file "drivers/scr/API_MRF24J40_port.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  dato            2    3[COMRAM] unsigned short 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  1    wreg      void 
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4089 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;Total ram usage:        2 bytes
  4094 ;; Hardware stack levels used: 1
  4095 ;; Hardware stack levels required when called: 3
  4096 ;; This function calls:
  4097 ;;		_SPIWrite2Byte
  4098 ;; This function is called by:
  4099 ;;		_SetLongAddr
  4100 ;;		_GetLongAddr
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text21
  4105   001DE4                     __ptext21:
  4106                           	callstack 0
  4107   001DE4                     _Write2ByteSPIPort:
  4108                           	callstack 24
  4109   001DE4                     
  4110                           ;drivers/scr/API_MRF24J40_port.c: 89:     SPIWrite2Byte(dato);
  4111   001DE4  C02A  F028         	movff	Write2ByteSPIPort@dato,SPIWrite2Byte@dato
  4112   001DE8  C02B  F029         	movff	Write2ByteSPIPort@dato+1,SPIWrite2Byte@dato+1
  4113   001DEC  ECF9  F00E         	call	_SPIWrite2Byte	;wreg free
  4114   001DF0  0012               	return		;funcret
  4115   001DF2                     __end_of_Write2ByteSPIPort:
  4116                           	callstack 0
  4117                           
  4118 ;; *************** function _SPIWrite2Byte *****************
  4119 ;; Defined at:
  4120 ;;		line 63 in file "drivers/scr/API_MSPI_port.c"
  4121 ;; Parameters:    Size  Location     Type
  4122 ;;  dato            2    1[COMRAM] unsigned short 
  4123 ;; Auto vars:     Size  Location     Type
  4124 ;;		None
  4125 ;; Return value:  Size  Location     Type
  4126 ;;                  1    wreg      void 
  4127 ;; Registers used:
  4128 ;;		wreg, status,2, cstack
  4129 ;; Tracked objects:
  4130 ;;		On entry : 0/0
  4131 ;;		On exit  : 0/0
  4132 ;;		Unchanged: 0/0
  4133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;Total ram usage:        2 bytes
  4139 ;; Hardware stack levels used: 1
  4140 ;; Hardware stack levels required when called: 2
  4141 ;; This function calls:
  4142 ;;		_SPIWriteByte
  4143 ;; This function is called by:
  4144 ;;		_Write2ByteSPIPort
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text22
  4149   001DF2                     __ptext22:
  4150                           	callstack 0
  4151   001DF2                     _SPIWrite2Byte:
  4152                           	callstack 24
  4153   001DF2                     
  4154                           ;drivers/scr/API_MSPI_port.c: 65:     SPIWriteByte((uint8_t) (dato >> 8));
  4155   001DF2  5029               	movf	(SPIWrite2Byte@dato+1)^0,w,c
  4156   001DF4  ECA5  F00E         	call	_SPIWriteByte
  4157                           
  4158                           ;drivers/scr/API_MSPI_port.c: 66:     SPIWriteByte((uint8_t) dato);
  4159   001DF8  5028               	movf	SPIWrite2Byte@dato^0,w,c
  4160   001DFA  ECA5  F00E         	call	_SPIWriteByte
  4161   001DFE  0012               	return		;funcret
  4162   001E00                     __end_of_SPIWrite2Byte:
  4163                           	callstack 0
  4164                           
  4165 ;; *************** function _SPIWriteByte *****************
  4166 ;; Defined at:
  4167 ;;		line 50 in file "drivers/scr/API_MSPI_port.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  dato            1    wreg     unsigned char 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  dato            1    0[COMRAM] unsigned char 
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		wreg
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4182 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;Total ram usage:        1 bytes
  4186 ;; Hardware stack levels used: 1
  4187 ;; Hardware stack levels required when called: 1
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_WriteByteSPIPort
  4192 ;;		_SPIWrite2Byte
  4193 ;; This function uses a non-reentrant model
  4194 ;;
  4195                           
  4196                           	psect	text23
  4197   001D4A                     __ptext23:
  4198                           	callstack 0
  4199   001D4A                     _SPIWriteByte:
  4200                           	callstack 25
  4201                           
  4202                           ;incstack = 0
  4203                           ;SPIWriteByte@dato stored from wreg
  4204   001D4A  6E27               	movwf	SPIWriteByte@dato^0,c
  4205   001D4C                     
  4206                           ;drivers/scr/API_MSPI_port.c: 52:     PIR1bits.SSPIF = 0;
  4207   001D4C  969E               	bcf	158,3,c	;volatile
  4208   001D4E                     
  4209                           ;drivers/scr/API_MSPI_port.c: 53:     SSPBUF = dato;
  4210   001D4E  C027  FFC9         	movff	SPIWriteByte@dato,4041	;volatile
  4211   001D52                     l202:
  4212   001D52  A69E               	btfss	158,3,c	;volatile
  4213   001D54  EFAE  F00E         	goto	u541
  4214   001D58  EFB0  F00E         	goto	u540
  4215   001D5C                     u541:
  4216   001D5C  EFA9  F00E         	goto	l202
  4217   001D60                     u540:
  4218   001D60  0012               	return		;funcret
  4219   001D62                     __end_of_SPIWriteByte:
  4220                           	callstack 0
  4221                           
  4222 ;; *************** function _SetCSPin *****************
  4223 ;; Defined at:
  4224 ;;		line 34 in file "drivers/scr/API_MRF24J40_port.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  estado          1    wreg     _Bool 
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;  estado          1    0[COMRAM] _Bool 
  4229 ;; Return value:  Size  Location     Type
  4230 ;;                  1    wreg      void 
  4231 ;; Registers used:
  4232 ;;		wreg
  4233 ;; Tracked objects:
  4234 ;;		On entry : 0/0
  4235 ;;		On exit  : 0/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4241 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4242 ;;Total ram usage:        1 bytes
  4243 ;; Hardware stack levels used: 1
  4244 ;; Hardware stack levels required when called: 1
  4245 ;; This function calls:
  4246 ;;		Nothing
  4247 ;; This function is called by:
  4248 ;;		_InicializoPines
  4249 ;;		_SetShortAddr
  4250 ;;		_GetShortAddr
  4251 ;;		_SetLongAddr
  4252 ;;		_GetLongAddr
  4253 ;; This function uses a non-reentrant model
  4254 ;;
  4255                           
  4256                           	psect	text24
  4257   001E00                     __ptext24:
  4258                           	callstack 0
  4259   001E00                     _SetCSPin:
  4260                           	callstack 26
  4261                           
  4262                           ;incstack = 0
  4263                           ;SetCSPin@estado stored from wreg
  4264   001E00  6E27               	movwf	SetCSPin@estado^0,c
  4265   001E02                     
  4266                           ;drivers/scr/API_MRF24J40_port.c: 36:     LATCbits.LATC6 = estado;
  4267   001E02  B027               	btfsc	SetCSPin@estado^0,0,c
  4268   001E04  D002               	bra	u555
  4269   001E06  9C8B               	bcf	139,6,c	;volatile
  4270   001E08  D001               	bra	u556
  4271   001E0A                     u555:
  4272   001E0A  8C8B               	bsf	139,6,c	;volatile
  4273   001E0C                     u556:
  4274   001E0C  0012               	return		;funcret
  4275   001E0E                     __end_of_SetCSPin:
  4276                           	callstack 0
  4277                           
  4278 ;; *************** function _ReadByteSPIPort *****************
  4279 ;; Defined at:
  4280 ;;		line 98 in file "drivers/scr/API_MRF24J40_port.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;		None
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;		None
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      unsigned char 
  4287 ;; Registers used:
  4288 ;;		wreg, status,2, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;Total ram usage:        0 bytes
  4299 ;; Hardware stack levels used: 1
  4300 ;; Hardware stack levels required when called: 2
  4301 ;; This function calls:
  4302 ;;		_SPIRead
  4303 ;; This function is called by:
  4304 ;;		_GetShortAddr
  4305 ;;		_GetLongAddr
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           	psect	text25
  4310   001E22                     __ptext25:
  4311                           	callstack 0
  4312   001E22                     _ReadByteSPIPort:
  4313                           	callstack 26
  4314   001E22                     
  4315                           ;drivers/scr/API_MRF24J40_port.c: 100:     return SPIRead();
  4316   001E22  ECBD  F00E         	call	_SPIRead	;wreg free
  4317   001E26  0012               	return		;funcret
  4318   001E28                     __end_of_ReadByteSPIPort:
  4319                           	callstack 0
  4320                           
  4321 ;; *************** function _SPIRead *****************
  4322 ;; Defined at:
  4323 ;;		line 75 in file "drivers/scr/API_MSPI_port.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      unsigned char 
  4330 ;; Registers used:
  4331 ;;		wreg, status,2
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;Total ram usage:        0 bytes
  4342 ;; Hardware stack levels used: 1
  4343 ;; Hardware stack levels required when called: 1
  4344 ;; This function calls:
  4345 ;;		Nothing
  4346 ;; This function is called by:
  4347 ;;		_ReadByteSPIPort
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text26
  4352   001D7A                     __ptext26:
  4353                           	callstack 0
  4354   001D7A                     _SPIRead:
  4355                           	callstack 26
  4356   001D7A                     
  4357                           ;drivers/scr/API_MSPI_port.c: 77:     SSPCON1bits.WCOL = 0;
  4358   001D7A  9EC6               	bcf	198,7,c	;volatile
  4359                           
  4360                           ;drivers/scr/API_MSPI_port.c: 78:     SSPBUF = (0X00);
  4361   001D7C  6AC9               	clrf	201,c	;volatile
  4362   001D7E                     l211:
  4363   001D7E  A0C7               	btfss	199,0,c	;volatile
  4364   001D80  EFC4  F00E         	goto	u561
  4365   001D84  EFC6  F00E         	goto	u560
  4366   001D88                     u561:
  4367   001D88  EFBF  F00E         	goto	l211
  4368   001D8C                     u560:
  4369   001D8C                     
  4370                           ;drivers/scr/API_MSPI_port.c: 80:     return SSPBUF;
  4371   001D8C  50C9               	movf	201,w,c	;volatile
  4372   001D8E  0012               	return		;funcret
  4373   001D90                     __end_of_SPIRead:
  4374                           	callstack 0
  4375                           
  4376 ;; *************** function _DelayReset *****************
  4377 ;; Defined at:
  4378 ;;		line 68 in file "drivers/scr/API_delay.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  delay           1    0[COMRAM] PTR struct .
  4381 ;;		 -> InicializoMRF24@delay_time_out(9), 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;		None
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      void 
  4386 ;; Registers used:
  4387 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4393 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;Total ram usage:        1 bytes
  4398 ;; Hardware stack levels used: 1
  4399 ;; Hardware stack levels required when called: 1
  4400 ;; This function calls:
  4401 ;;		Nothing
  4402 ;; This function is called by:
  4403 ;;		_InicializoMRF24
  4404 ;; This function uses a non-reentrant model
  4405 ;;
  4406                           
  4407                           	psect	text27
  4408   001D04                     __ptext27:
  4409                           	callstack 0
  4410   001D04                     _DelayReset:
  4411                           	callstack 27
  4412   001D04                     
  4413                           ;drivers/scr/API_delay.c: 70:  delay->startTime = timeStamp;
  4414   001D04  5027               	movf	DelayReset@delay^0,w,c
  4415   001D06  6ED9               	movwf	fsr2l,c
  4416   001D08  6ADA               	clrf	fsr2h,c
  4417   001D0A  C001  FFDE         	movff	_timeStamp,postinc2
  4418   001D0E  C002  FFDE         	movff	_timeStamp+1,postinc2
  4419   001D12  C003  FFDE         	movff	_timeStamp+2,postinc2
  4420   001D16  C004  FFDE         	movff	_timeStamp+3,postinc2
  4421   001D1A                     
  4422                           ;drivers/scr/API_delay.c: 71:  delay->running = 1;
  4423   001D1A  5027               	movf	DelayReset@delay^0,w,c
  4424   001D1C  6ED9               	movwf	fsr2l,c
  4425   001D1E  6ADA               	clrf	fsr2h,c
  4426   001D20  0E08               	movlw	8
  4427   001D22  26D9               	addwf	fsr2l,f,c
  4428   001D24  0E01               	movlw	1
  4429   001D26  6EDF               	movwf	indf2,c
  4430   001D28  0012               	return		;funcret
  4431   001D2A                     __end_of_DelayReset:
  4432                           	callstack 0
  4433                           
  4434 ;; *************** function _MRF24IsNewMsg *****************
  4435 ;; Defined at:
  4436 ;;		line 424 in file "drivers/scr/API_MRF24J40.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;		None
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;		None
  4441 ;; Return value:  Size  Location     Type
  4442 ;;                  1    wreg      enum E3263
  4443 ;; Registers used:
  4444 ;;		wreg, status,2, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4453 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4454 ;;Total ram usage:        0 bytes
  4455 ;; Hardware stack levels used: 1
  4456 ;; Hardware stack levels required when called: 2
  4457 ;; This function calls:
  4458 ;;		_IsMRF24Interrup
  4459 ;; This function is called by:
  4460 ;;		_main
  4461 ;; This function uses a non-reentrant model
  4462 ;;
  4463                           
  4464                           	psect	text28
  4465   001BD0                     __ptext28:
  4466                           	callstack 0
  4467   001BD0                     _MRF24IsNewMsg:
  4468                           	callstack 28
  4469   001BD0                     
  4470                           ;drivers/scr/API_MRF24J40.c: 426:  if(INITIALIZATION_OK != estadoActual)
  4471   001BD0  5005               	movf	_estadoActual^0,w,c
  4472   001BD2  B4D8               	btfsc	status,2,c
  4473   001BD4  EFEE  F00D         	goto	u831
  4474   001BD8  EFF0  F00D         	goto	u830
  4475   001BDC                     u831:
  4476   001BDC  EFF3  F00D         	goto	l2183
  4477   001BE0                     u830:
  4478   001BE0                     
  4479                           ;drivers/scr/API_MRF24J40.c: 427:   return UNEXPECTED_ERROR;
  4480   001BE0  0E0A               	movlw	10
  4481   001BE2  EF01  F00E         	goto	l169
  4482   001BE6                     l2183:
  4483                           
  4484                           ;drivers/scr/API_MRF24J40.c: 429:  if(!IsMRF24Interrup())
  4485   001BE6  ECD2  F00E         	call	_IsMRF24Interrup	;wreg free
  4486   001BEA  0900               	iorlw	0
  4487   001BEC  A4D8               	btfss	status,2,c
  4488   001BEE  EFFB  F00D         	goto	u841
  4489   001BF2  EFFD  F00D         	goto	u840
  4490   001BF6                     u841:
  4491   001BF6  EF00  F00E         	goto	l2189
  4492   001BFA                     u840:
  4493   001BFA                     
  4494                           ;drivers/scr/API_MRF24J40.c: 430:   return MSG_PRESENT;
  4495   001BFA  0E03               	movlw	3
  4496   001BFC  EF01  F00E         	goto	l169
  4497   001C00                     l2189:
  4498                           
  4499                           ;drivers/scr/API_MRF24J40.c: 431:  return BUFFER_EMPTY;
  4500   001C00  0E06               	movlw	6
  4501   001C02                     l169:
  4502   001C02  0012               	return		;funcret
  4503   001C04                     __end_of_MRF24IsNewMsg:
  4504                           	callstack 0
  4505                           
  4506 ;; *************** function _IsMRF24Interrup *****************
  4507 ;; Defined at:
  4508 ;;		line 66 in file "drivers/scr/API_MRF24J40_port.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;		None
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;		None
  4513 ;; Return value:  Size  Location     Type
  4514 ;;                  1    wreg      _Bool 
  4515 ;; Registers used:
  4516 ;;		wreg
  4517 ;; Tracked objects:
  4518 ;;		On entry : 0/0
  4519 ;;		On exit  : 0/0
  4520 ;;		Unchanged: 0/0
  4521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;Total ram usage:        0 bytes
  4527 ;; Hardware stack levels used: 1
  4528 ;; Hardware stack levels required when called: 1
  4529 ;; This function calls:
  4530 ;;		Nothing
  4531 ;; This function is called by:
  4532 ;;		_MRF24IsNewMsg
  4533 ;; This function uses a non-reentrant model
  4534 ;;
  4535                           
  4536                           	psect	text29
  4537   001DA4                     __ptext29:
  4538                           	callstack 0
  4539   001DA4                     _IsMRF24Interrup:
  4540                           	callstack 28
  4541   001DA4                     
  4542                           ;drivers/scr/API_MRF24J40_port.c: 68:  return PORTBbits.RB0;
  4543   001DA4  B081               	btfsc	129,0,c	;volatile
  4544   001DA6  EFD7  F00E         	goto	u671
  4545   001DAA  EFDA  F00E         	goto	u670
  4546   001DAE                     u671:
  4547   001DAE  0E01               	movlw	1
  4548   001DB0  EFDB  F00E         	goto	u676
  4549   001DB4                     u670:
  4550   001DB4  0E00               	movlw	0
  4551   001DB6                     u676:
  4552   001DB6  0012               	return		;funcret
  4553   001DB8                     __end_of_IsMRF24Interrup:
  4554                           	callstack 0
  4555                           
  4556 ;; *************** function _MRF24GetDataIn *****************
  4557 ;; Defined at:
  4558 ;;		line 477 in file "drivers/scr/API_MRF24J40.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  2    0[COMRAM] PTR struct .
  4565 ;; Registers used:
  4566 ;;		wreg, status,2, status,0
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;Total ram usage:        2 bytes
  4577 ;; Hardware stack levels used: 1
  4578 ;; Hardware stack levels required when called: 1
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_main
  4583 ;; This function uses a non-reentrant model
  4584 ;;
  4585                           
  4586                           	psect	text30
  4587   001E18                     __ptext30:
  4588                           	callstack 0
  4589   001E18                     _MRF24GetDataIn:
  4590                           	callstack 29
  4591   001E18                     
  4592                           ;drivers/scr/API_MRF24J40.c: 479:  return &data_in_s;
  4593   001E18  0E20               	movlw	low _data_in_s
  4594   001E1A  6E27               	movwf	?_MRF24GetDataIn^0,c
  4595   001E1C  0E01               	movlw	high _data_in_s
  4596   001E1E  6E28               	movwf	(?_MRF24GetDataIn+1)^0,c
  4597   001E20  0012               	return		;funcret
  4598   001E22                     __end_of_MRF24GetDataIn:
  4599                           	callstack 0
  4600                           
  4601 ;; *************** function _DebounceFSMUpdate *****************
  4602 ;; Defined at:
  4603 ;;		line 34 in file "drivers/scr/API_debounce.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  antirrebote_    2   16[COMRAM] PTR struct .
  4606 ;;		 -> main@boton1(11), 
  4607 ;;  estado_pin      1   18[COMRAM] _Bool 
  4608 ;; Auto vars:     Size  Location     Type
  4609 ;;		None
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      enum E2763
  4612 ;; Registers used:
  4613 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4619 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;Total ram usage:        5 bytes
  4624 ;; Hardware stack levels used: 1
  4625 ;; Hardware stack levels required when called: 3
  4626 ;; This function calls:
  4627 ;;		_DebounceFSMInit
  4628 ;;		_DelayRead
  4629 ;; This function is called by:
  4630 ;;		_main
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text31
  4635   001426                     __ptext31:
  4636                           	callstack 0
  4637   001426                     _DebounceFSMUpdate:
  4638                           	callstack 27
  4639   001426                     
  4640                           ;drivers/scr/API_debounce.c: 36:  switch(antirrebote_boton_n->estadoActual) {
  4641   001426  EF9B  F00A         	goto	l2271
  4642   00142A                     l2219:
  4643                           
  4644                           ;drivers/scr/API_debounce.c: 40:    if(!estado_pin)
  4645   00142A  5039               	movf	DebounceFSMUpdate@estado_pin^0,w,c
  4646   00142C  A4D8               	btfss	status,2,c
  4647   00142E  EF1B  F00A         	goto	u871
  4648   001432  EF1D  F00A         	goto	u870
  4649   001436                     u871:
  4650   001436  EFBE  F00A         	goto	l2273
  4651   00143A                     u870:
  4652   00143A                     
  4653                           ;drivers/scr/API_debounce.c: 41:     antirrebote_boton_n->estadoActual = BUTTON_FALLING;
  4654   00143A  EE20 F001          	lfsr	2,1
  4655   00143E  5037               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4656   001440  26D9               	addwf	fsr2l,f,c
  4657   001442  5038               	movf	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4658   001444  22DA               	addwfc	fsr2h,f,c
  4659   001446  0E01               	movlw	1
  4660   001448  6EDF               	movwf	indf2,c
  4661   00144A  EFBE  F00A         	goto	l2273
  4662   00144E                     l2223:
  4663                           
  4664                           ;drivers/scr/API_debounce.c: 46:    if(DelayRead(&antirrebote_boton_n->delay_anti_rebote
      +                          )) {
  4665   00144E  0E02               	movlw	2
  4666   001450  2437               	addwf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4667   001452  6E29               	movwf	DelayRead@delay^0,c
  4668   001454  0E00               	movlw	0
  4669   001456  2038               	addwfc	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4670   001458  6E2A               	movwf	(DelayRead@delay+1)^0,c
  4671   00145A  ECAD  F00B         	call	_DelayRead	;wreg free
  4672   00145E  0900               	iorlw	0
  4673   001460  B4D8               	btfsc	status,2,c
  4674   001462  EF35  F00A         	goto	u881
  4675   001466  EF37  F00A         	goto	u880
  4676   00146A                     u881:
  4677   00146A  EFBE  F00A         	goto	l2273
  4678   00146E                     u880:
  4679   00146E                     
  4680                           ;drivers/scr/API_debounce.c: 48:     if(!estado_pin) {
  4681   00146E  5039               	movf	DebounceFSMUpdate@estado_pin^0,w,c
  4682   001470  A4D8               	btfss	status,2,c
  4683   001472  EF3D  F00A         	goto	u891
  4684   001476  EF3F  F00A         	goto	u890
  4685   00147A                     u891:
  4686   00147A  EF4A  F00A         	goto	l2235
  4687   00147E                     u890:
  4688   00147E                     
  4689                           ;drivers/scr/API_debounce.c: 50:      antirrebote_boton_n->estadoActual = BUTTON_DOWN;
  4690   00147E  EE20 F001          	lfsr	2,1
  4691   001482  5037               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4692   001484  26D9               	addwf	fsr2l,f,c
  4693   001486  5038               	movf	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4694   001488  22DA               	addwfc	fsr2h,f,c
  4695   00148A  0E02               	movlw	2
  4696   00148C  6EDF               	movwf	indf2,c
  4697   00148E                     
  4698                           ;drivers/scr/API_debounce.c: 51:      return PRESIONO_BOTON;
  4699   00148E  0E01               	movlw	1
  4700   001490  EFBF  F00A         	goto	l253
  4701   001494                     l2235:
  4702                           
  4703                           ;drivers/scr/API_debounce.c: 54:      antirrebote_boton_n->estadoActual = BUTTON_UP;
  4704   001494  EE20 F001          	lfsr	2,1
  4705   001498  5037               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4706   00149A  26D9               	addwf	fsr2l,f,c
  4707   00149C  5038               	movf	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4708   00149E  22DA               	addwfc	fsr2h,f,c
  4709   0014A0  6ADF               	clrf	indf2,c
  4710   0014A2                     l2237:
  4711                           
  4712                           ;drivers/scr/API_debounce.c: 55:      return RUIDO;
  4713   0014A2  0E04               	movlw	4
  4714   0014A4  EFBF  F00A         	goto	l253
  4715   0014A8                     l2241:
  4716                           
  4717                           ;drivers/scr/API_debounce.c: 62:    if(DelayRead(&antirrebote_boton_n->delay_anti_rebote
      +                          )) {
  4718   0014A8  0E02               	movlw	2
  4719   0014AA  2437               	addwf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4720   0014AC  6E29               	movwf	DelayRead@delay^0,c
  4721   0014AE  0E00               	movlw	0
  4722   0014B0  2038               	addwfc	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4723   0014B2  6E2A               	movwf	(DelayRead@delay+1)^0,c
  4724   0014B4  ECAD  F00B         	call	_DelayRead	;wreg free
  4725   0014B8  0900               	iorlw	0
  4726   0014BA  B4D8               	btfsc	status,2,c
  4727   0014BC  EF62  F00A         	goto	u901
  4728   0014C0  EF64  F00A         	goto	u900
  4729   0014C4                     u901:
  4730   0014C4  EFBE  F00A         	goto	l2273
  4731   0014C8                     u900:
  4732   0014C8                     
  4733                           ;drivers/scr/API_debounce.c: 64:     if(estado_pin) {
  4734   0014C8  5039               	movf	DebounceFSMUpdate@estado_pin^0,w,c
  4735   0014CA  B4D8               	btfsc	status,2,c
  4736   0014CC  EF6A  F00A         	goto	u911
  4737   0014D0  EF6C  F00A         	goto	u910
  4738   0014D4                     u911:
  4739   0014D4  EF76  F00A         	goto	l2253
  4740   0014D8                     u910:
  4741   0014D8                     
  4742                           ;drivers/scr/API_debounce.c: 66:      antirrebote_boton_n->estadoActual = BUTTON_UP;
  4743   0014D8  EE20 F001          	lfsr	2,1
  4744   0014DC  5037               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4745   0014DE  26D9               	addwf	fsr2l,f,c
  4746   0014E0  5038               	movf	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4747   0014E2  22DA               	addwfc	fsr2h,f,c
  4748   0014E4  6ADF               	clrf	indf2,c
  4749   0014E6                     
  4750                           ;drivers/scr/API_debounce.c: 67:      return SUELTO_BOTON;
  4751   0014E6  0E02               	movlw	2
  4752   0014E8  EFBF  F00A         	goto	l253
  4753   0014EC                     l2253:
  4754                           
  4755                           ;drivers/scr/API_debounce.c: 70:      antirrebote_boton_n->estadoActual = BUTTON_DOWN;
  4756   0014EC  EE20 F001          	lfsr	2,1
  4757   0014F0  5037               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4758   0014F2  26D9               	addwf	fsr2l,f,c
  4759   0014F4  5038               	movf	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4760   0014F6  22DA               	addwfc	fsr2h,f,c
  4761   0014F8  0E02               	movlw	2
  4762   0014FA  6EDF               	movwf	indf2,c
  4763   0014FC  EF51  F00A         	goto	l2237
  4764   001500                     l2259:
  4765                           
  4766                           ;drivers/scr/API_debounce.c: 78:    if(estado_pin)
  4767   001500  5039               	movf	DebounceFSMUpdate@estado_pin^0,w,c
  4768   001502  B4D8               	btfsc	status,2,c
  4769   001504  EF86  F00A         	goto	u921
  4770   001508  EF88  F00A         	goto	u920
  4771   00150C                     u921:
  4772   00150C  EFBE  F00A         	goto	l2273
  4773   001510                     u920:
  4774   001510                     
  4775                           ;drivers/scr/API_debounce.c: 79:     antirrebote_boton_n->estadoActual = BUTTON_RAISING;
  4776   001510  EE20 F001          	lfsr	2,1
  4777   001514  5037               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4778   001516  26D9               	addwf	fsr2l,f,c
  4779   001518  5038               	movf	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4780   00151A  22DA               	addwfc	fsr2h,f,c
  4781   00151C  0E03               	movlw	3
  4782   00151E  6EDF               	movwf	indf2,c
  4783   001520  EFBE  F00A         	goto	l2273
  4784   001524                     l2263:
  4785                           
  4786                           ;drivers/scr/API_debounce.c: 84:    DebounceFSMInit(antirrebote_boton_n);
  4787   001524  C037  F02D         	movff	DebounceFSMUpdate@antirrebote_boton_n,DebounceFSMInit@antirrebote_boton_n
  4788   001528  C038  F02E         	movff	DebounceFSMUpdate@antirrebote_boton_n+1,DebounceFSMInit@antirrebote_boton_n+1
  4789   00152C  ECAF  F00D         	call	_DebounceFSMInit	;wreg free
  4790   001530                     
  4791                           ;drivers/scr/API_debounce.c: 85:    return ERROR_ANTI_REBOTE;
  4792   001530  0E00               	movlw	0
  4793   001532  EFBF  F00A         	goto	l253
  4794   001536                     l2271:
  4795   001536  EE20 F001          	lfsr	2,1
  4796   00153A  5037               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4797   00153C  26D9               	addwf	fsr2l,f,c
  4798   00153E  5038               	movf	(DebounceFSMUpdate@antirrebote_boton_n+1)^0,w,c
  4799   001540  22DA               	addwfc	fsr2h,f,c
  4800   001542  50DF               	movf	indf2,w,c
  4801   001544  6E3A               	movwf	??_DebounceFSMUpdate^0,c
  4802   001546  6A3B               	clrf	(??_DebounceFSMUpdate+1)^0,c
  4803                           
  4804                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4805                           ; Switch size 1, requested type "simple"
  4806                           ; Number of cases is 1, Range of values is 0 to 0
  4807                           ; switch strategies available:
  4808                           ; Name         Instructions Cycles
  4809                           ; simple_byte            4     3 (average)
  4810                           ;	Chosen strategy is simple_byte
  4811   001548  503B               	movf	(??_DebounceFSMUpdate+1)^0,w,c
  4812   00154A  0A00               	xorlw	0	; case 0
  4813   00154C  B4D8               	btfsc	status,2,c
  4814   00154E  EFAB  F00A         	goto	l2447
  4815   001552  EF92  F00A         	goto	l2263
  4816   001556                     l2447:
  4817                           
  4818                           ; Switch size 1, requested type "simple"
  4819                           ; Number of cases is 4, Range of values is 0 to 3
  4820                           ; switch strategies available:
  4821                           ; Name         Instructions Cycles
  4822                           ; simple_byte           13     7 (average)
  4823                           ;	Chosen strategy is simple_byte
  4824   001556  503A               	movf	??_DebounceFSMUpdate^0,w,c
  4825   001558  0A00               	xorlw	0	; case 0
  4826   00155A  B4D8               	btfsc	status,2,c
  4827   00155C  EF15  F00A         	goto	l2219
  4828   001560  0A01               	xorlw	1	; case 1
  4829   001562  B4D8               	btfsc	status,2,c
  4830   001564  EF27  F00A         	goto	l2223
  4831   001568  0A03               	xorlw	3	; case 2
  4832   00156A  B4D8               	btfsc	status,2,c
  4833   00156C  EF80  F00A         	goto	l2259
  4834   001570  0A01               	xorlw	1	; case 3
  4835   001572  B4D8               	btfsc	status,2,c
  4836   001574  EF54  F00A         	goto	l2241
  4837   001578  EF92  F00A         	goto	l2263
  4838   00157C                     l2273:
  4839                           
  4840                           ;drivers/scr/API_debounce.c: 87:  return BOTON_SIN_CAMBIOS;
  4841   00157C  0E03               	movlw	3
  4842   00157E                     l253:
  4843   00157E  0012               	return		;funcret
  4844   001580                     __end_of_DebounceFSMUpdate:
  4845                           	callstack 0
  4846                           
  4847 ;; *************** function _DelayRead *****************
  4848 ;; Defined at:
  4849 ;;		line 34 in file "drivers/scr/API_delay.c"
  4850 ;; Parameters:    Size  Location     Type
  4851 ;;  delay           2    2[COMRAM] PTR struct .
  4852 ;;		 -> main@delay_parpadeo(9), main@boton1(11), InicializoMRF24@delay_time_out(9), 
  4853 ;; Auto vars:     Size  Location     Type
  4854 ;;		None
  4855 ;; Return value:  Size  Location     Type
  4856 ;;                  1    wreg      _Bool 
  4857 ;; Registers used:
  4858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4859 ;; Tracked objects:
  4860 ;;		On entry : 0/0
  4861 ;;		On exit  : 0/0
  4862 ;;		Unchanged: 0/0
  4863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4866 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4867 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4868 ;;Total ram usage:       14 bytes
  4869 ;; Hardware stack levels used: 1
  4870 ;; Hardware stack levels required when called: 2
  4871 ;; This function calls:
  4872 ;;		_DelayIsRunning
  4873 ;; This function is called by:
  4874 ;;		_InicializoMRF24
  4875 ;;		_DebounceFSMUpdate
  4876 ;;		_main
  4877 ;; This function uses a non-reentrant model
  4878 ;;
  4879                           
  4880                           	psect	text32
  4881   00175A                     __ptext32:
  4882                           	callstack 0
  4883   00175A                     _DelayRead:
  4884                           	callstack 26
  4885   00175A                     
  4886                           ;drivers/scr/API_delay.c: 36:  if(DelayIsRunning(delay) == 0) {
  4887   00175A  C029  F027         	movff	DelayRead@delay,DelayIsRunning@delay
  4888   00175E  C02A  F028         	movff	DelayRead@delay+1,DelayIsRunning@delay+1
  4889   001762  ECDC  F00E         	call	_DelayIsRunning	;wreg free
  4890   001766  0900               	iorlw	0
  4891   001768  A4D8               	btfss	status,2,c
  4892   00176A  EFB9  F00B         	goto	u631
  4893   00176E  EFBB  F00B         	goto	u630
  4894   001772                     u631:
  4895   001772  EFD1  F00B         	goto	l1901
  4896   001776                     u630:
  4897   001776                     
  4898                           ;drivers/scr/API_delay.c: 38:   delay->startTime = timeStamp;
  4899   001776  C029  FFD9         	movff	DelayRead@delay,fsr2l
  4900   00177A  C02A  FFDA         	movff	DelayRead@delay+1,fsr2h
  4901   00177E  C001  FFDE         	movff	_timeStamp,postinc2
  4902   001782  C002  FFDE         	movff	_timeStamp+1,postinc2
  4903   001786  C003  FFDE         	movff	_timeStamp+2,postinc2
  4904   00178A  C004  FFDE         	movff	_timeStamp+3,postinc2
  4905   00178E                     
  4906                           ;drivers/scr/API_delay.c: 39:   delay->running = 1;
  4907   00178E  EE20 F008          	lfsr	2,8
  4908   001792  5029               	movf	DelayRead@delay^0,w,c
  4909   001794  26D9               	addwf	fsr2l,f,c
  4910   001796  502A               	movf	(DelayRead@delay+1)^0,w,c
  4911   001798  22DA               	addwfc	fsr2h,f,c
  4912   00179A  0E01               	movlw	1
  4913   00179C  6EDF               	movwf	indf2,c
  4914                           
  4915                           ;drivers/scr/API_delay.c: 40:  } else {
  4916   00179E  EF08  F00C         	goto	l1909
  4917   0017A2                     l1901:
  4918                           
  4919                           ;drivers/scr/API_delay.c: 42:   if((timeStamp - delay->startTime) >= delay->duration) {
  4920   0017A2  EE20 F004          	lfsr	2,4
  4921   0017A6  5029               	movf	DelayRead@delay^0,w,c
  4922   0017A8  26D9               	addwf	fsr2l,f,c
  4923   0017AA  502A               	movf	(DelayRead@delay+1)^0,w,c
  4924   0017AC  22DA               	addwfc	fsr2h,f,c
  4925   0017AE  C029  FFE1         	movff	DelayRead@delay,fsr1l
  4926   0017B2  C02A  FFE2         	movff	DelayRead@delay+1,fsr1h
  4927   0017B6  CFE6 F02F          	movff	postinc1,??_DelayRead+4
  4928   0017BA  CFE6 F030          	movff	postinc1,??_DelayRead+5
  4929   0017BE  CFE6 F031          	movff	postinc1,??_DelayRead+6
  4930   0017C2  CFE6 F032          	movff	postinc1,??_DelayRead+7
  4931   0017C6  502F               	movf	(??_DelayRead+4)^0,w,c
  4932   0017C8  5C01               	subwf	_timeStamp^0,w,c
  4933   0017CA  6E33               	movwf	(??_DelayRead+8)^0,c
  4934   0017CC  5030               	movf	(??_DelayRead+5)^0,w,c
  4935   0017CE  5802               	subwfb	(_timeStamp+1)^0,w,c
  4936   0017D0  6E34               	movwf	(??_DelayRead+9)^0,c
  4937   0017D2  5031               	movf	(??_DelayRead+6)^0,w,c
  4938   0017D4  5803               	subwfb	(_timeStamp+2)^0,w,c
  4939   0017D6  6E35               	movwf	(??_DelayRead+10)^0,c
  4940   0017D8  5032               	movf	(??_DelayRead+7)^0,w,c
  4941   0017DA  5804               	subwfb	(_timeStamp+3)^0,w,c
  4942   0017DC  6E36               	movwf	(??_DelayRead+11)^0,c
  4943   0017DE  50DE               	movf	postinc2,w,c
  4944   0017E0  5C33               	subwf	(??_DelayRead+8)^0,w,c
  4945   0017E2  50DE               	movf	postinc2,w,c
  4946   0017E4  5834               	subwfb	(??_DelayRead+9)^0,w,c
  4947   0017E6  50DE               	movf	postinc2,w,c
  4948   0017E8  5835               	subwfb	(??_DelayRead+10)^0,w,c
  4949   0017EA  50DE               	movf	postinc2,w,c
  4950   0017EC  5836               	subwfb	(??_DelayRead+11)^0,w,c
  4951   0017EE  A0D8               	btfss	status,0,c
  4952   0017F0  EFFC  F00B         	goto	u641
  4953   0017F4  EFFE  F00B         	goto	u640
  4954   0017F8                     u641:
  4955   0017F8  EF08  F00C         	goto	l1909
  4956   0017FC                     u640:
  4957   0017FC                     
  4958                           ;drivers/scr/API_delay.c: 44:    delay->running = 0;
  4959   0017FC  EE20 F008          	lfsr	2,8
  4960   001800  5029               	movf	DelayRead@delay^0,w,c
  4961   001802  26D9               	addwf	fsr2l,f,c
  4962   001804  502A               	movf	(DelayRead@delay+1)^0,w,c
  4963   001806  22DA               	addwfc	fsr2h,f,c
  4964   001808  6ADF               	clrf	indf2,c
  4965   00180A                     
  4966                           ;drivers/scr/API_delay.c: 45:    return 1;
  4967   00180A  0E01               	movlw	1
  4968   00180C  EF09  F00C         	goto	l227
  4969   001810                     l1909:
  4970                           
  4971                           ;drivers/scr/API_delay.c: 48:  return 0;
  4972   001810  0E00               	movlw	0
  4973   001812                     l227:
  4974   001812  0012               	return		;funcret
  4975   001814                     __end_of_DelayRead:
  4976                           	callstack 0
  4977                           
  4978 ;; *************** function _DelayIsRunning *****************
  4979 ;; Defined at:
  4980 ;;		line 83 in file "drivers/scr/API_delay.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  delay           2    0[COMRAM] PTR struct .
  4983 ;;		 -> main@delay_parpadeo(9), main@boton1(11), InicializoMRF24@delay_time_out(9), 
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;		None
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      _Bool 
  4988 ;; Registers used:
  4989 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;Total ram usage:        2 bytes
  5000 ;; Hardware stack levels used: 1
  5001 ;; Hardware stack levels required when called: 1
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_DelayRead
  5006 ;; This function uses a non-reentrant model
  5007 ;;
  5008                           
  5009                           	psect	text33
  5010   001DB8                     __ptext33:
  5011                           	callstack 0
  5012   001DB8                     _DelayIsRunning:
  5013                           	callstack 26
  5014   001DB8                     
  5015                           ;drivers/scr/API_delay.c: 85:  return delay->running;
  5016   001DB8  EE20 F008          	lfsr	2,8
  5017   001DBC  5027               	movf	DelayIsRunning@delay^0,w,c
  5018   001DBE  26D9               	addwf	fsr2l,f,c
  5019   001DC0  5028               	movf	(DelayIsRunning@delay+1)^0,w,c
  5020   001DC2  22DA               	addwfc	fsr2h,f,c
  5021   001DC4  50DF               	movf	indf2,w,c
  5022   001DC6  0012               	return		;funcret
  5023   001DC8                     __end_of_DelayIsRunning:
  5024                           	callstack 0
  5025                           
  5026 ;; *************** function _DebounceFSMInit *****************
  5027 ;; Defined at:
  5028 ;;		line 19 in file "drivers/scr/API_debounce.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  antirrebote_    2    6[COMRAM] PTR struct .
  5031 ;;		 -> main@boton1(11), 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;		None
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  1    wreg      void 
  5036 ;; Registers used:
  5037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;Total ram usage:        2 bytes
  5048 ;; Hardware stack levels used: 1
  5049 ;; Hardware stack levels required when called: 2
  5050 ;; This function calls:
  5051 ;;		_DelayInit
  5052 ;; This function is called by:
  5053 ;;		_DebounceFSMUpdate
  5054 ;;		_main
  5055 ;; This function uses a non-reentrant model
  5056 ;;
  5057                           
  5058                           	psect	text34
  5059   001B5E                     __ptext34:
  5060                           	callstack 0
  5061   001B5E                     _DebounceFSMInit:
  5062                           	callstack 27
  5063   001B5E                     
  5064                           ;drivers/scr/API_debounce.c: 21:  antirrebote_boton_n->estadoActual = BUTTON_UP;
  5065   001B5E  EE20 F001          	lfsr	2,1
  5066   001B62  502D               	movf	DebounceFSMInit@antirrebote_boton_n^0,w,c
  5067   001B64  26D9               	addwf	fsr2l,f,c
  5068   001B66  502E               	movf	(DebounceFSMInit@antirrebote_boton_n+1)^0,w,c
  5069   001B68  22DA               	addwfc	fsr2h,f,c
  5070   001B6A  6ADF               	clrf	indf2,c
  5071   001B6C                     
  5072                           ;drivers/scr/API_debounce.c: 22:  DelayInit(&antirrebote_boton_n->delay_anti_rebote, 40)
      +                          ;
  5073   001B6C  0E02               	movlw	2
  5074   001B6E  242D               	addwf	DebounceFSMInit@antirrebote_boton_n^0,w,c
  5075   001B70  6E27               	movwf	DelayInit@delay^0,c
  5076   001B72  0E00               	movlw	0
  5077   001B74  202E               	addwfc	(DebounceFSMInit@antirrebote_boton_n+1)^0,w,c
  5078   001B76  6E28               	movwf	(DelayInit@delay+1)^0,c
  5079   001B78  0E28               	movlw	40
  5080   001B7A  6E29               	movwf	DelayInit@duration^0,c
  5081   001B7C  0E00               	movlw	0
  5082   001B7E  6E2A               	movwf	(DelayInit@duration+1)^0,c
  5083   001B80  0E00               	movlw	0
  5084   001B82  6E2B               	movwf	(DelayInit@duration+2)^0,c
  5085   001B84  0E00               	movlw	0
  5086   001B86  6E2C               	movwf	(DelayInit@duration+3)^0,c
  5087   001B88  EC19  F00E         	call	_DelayInit	;wreg free
  5088   001B8C                     
  5089                           ;drivers/scr/API_debounce.c: 23:  antirrebote_boton_n->tecla_fue_presionada = 0;
  5090   001B8C  C02D  FFD9         	movff	DebounceFSMInit@antirrebote_boton_n,fsr2l
  5091   001B90  C02E  FFDA         	movff	DebounceFSMInit@antirrebote_boton_n+1,fsr2h
  5092   001B94  6ADF               	clrf	indf2,c
  5093   001B96  0012               	return		;funcret
  5094   001B98                     __end_of_DebounceFSMInit:
  5095                           	callstack 0
  5096                           
  5097 ;; *************** function _DelayInit *****************
  5098 ;; Defined at:
  5099 ;;		line 22 in file "drivers/scr/API_delay.c"
  5100 ;; Parameters:    Size  Location     Type
  5101 ;;  delay           2    0[COMRAM] PTR struct .
  5102 ;;		 -> main@delay_parpadeo(9), main@boton1(11), InicializoMRF24@delay_time_out(9), 
  5103 ;;  duration        4    2[COMRAM] unsigned long 
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;		None
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      void 
  5108 ;; Registers used:
  5109 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5115 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5118 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5119 ;;Total ram usage:        6 bytes
  5120 ;; Hardware stack levels used: 1
  5121 ;; Hardware stack levels required when called: 1
  5122 ;; This function calls:
  5123 ;;		Nothing
  5124 ;; This function is called by:
  5125 ;;		_InicializoMRF24
  5126 ;;		_DebounceFSMInit
  5127 ;;		_main
  5128 ;; This function uses a non-reentrant model
  5129 ;;
  5130                           
  5131                           	psect	text35
  5132   001C32                     __ptext35:
  5133                           	callstack 0
  5134   001C32                     _DelayInit:
  5135                           	callstack 27
  5136   001C32                     
  5137                           ;drivers/scr/API_delay.c: 24:  delay->duration = duration;
  5138   001C32  EE20 F004          	lfsr	2,4
  5139   001C36  5027               	movf	DelayInit@delay^0,w,c
  5140   001C38  26D9               	addwf	fsr2l,f,c
  5141   001C3A  5028               	movf	(DelayInit@delay+1)^0,w,c
  5142   001C3C  22DA               	addwfc	fsr2h,f,c
  5143   001C3E  C029  FFDE         	movff	DelayInit@duration,postinc2
  5144   001C42  C02A  FFDE         	movff	DelayInit@duration+1,postinc2
  5145   001C46  C02B  FFDE         	movff	DelayInit@duration+2,postinc2
  5146   001C4A  C02C  FFDE         	movff	DelayInit@duration+3,postinc2
  5147                           
  5148                           ;drivers/scr/API_delay.c: 25:  delay->running = 0;
  5149   001C4E  EE20 F008          	lfsr	2,8
  5150   001C52  5027               	movf	DelayInit@delay^0,w,c
  5151   001C54  26D9               	addwf	fsr2l,f,c
  5152   001C56  5028               	movf	(DelayInit@delay+1)^0,w,c
  5153   001C58  22DA               	addwfc	fsr2h,f,c
  5154   001C5A  6ADF               	clrf	indf2,c
  5155   001C5C  0012               	return		;funcret
  5156   001C5E                     __end_of_DelayInit:
  5157                           	callstack 0
  5158                           
  5159 ;; *************** function _BoardInit *****************
  5160 ;; Defined at:
  5161 ;;		line 21 in file "hardware_config.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;		None
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;		None
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, cstack
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5178 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5179 ;;Total ram usage:        0 bytes
  5180 ;; Hardware stack levels used: 1
  5181 ;; Hardware stack levels required when called: 2
  5182 ;; This function calls:
  5183 ;;		_SPIInit
  5184 ;; This function is called by:
  5185 ;;		_main
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text36
  5190   0019AA                     __ptext36:
  5191                           	callstack 0
  5192   0019AA                     _BoardInit:
  5193                           	callstack 28
  5194   0019AA                     
  5195                           ;hardware_config.c: 23:     PORTA = 0;
  5196   0019AA  6A80               	clrf	128,c	;volatile
  5197                           
  5198                           ;hardware_config.c: 24:     PORTB = 0;
  5199   0019AC  6A81               	clrf	129,c	;volatile
  5200                           
  5201                           ;hardware_config.c: 25:     PORTC = 0;
  5202   0019AE  6A82               	clrf	130,c	;volatile
  5203                           
  5204                           ;hardware_config.c: 26:     PORTD = 0;
  5205   0019B0  6A83               	clrf	131,c	;volatile
  5206                           
  5207                           ;hardware_config.c: 27:     PORTE = 0;
  5208   0019B2  6A84               	clrf	132,c	;volatile
  5209                           
  5210                           ;hardware_config.c: 30:     TRISBbits.TRISB6 = 1;
  5211   0019B4  8C93               	bsf	147,6,c	;volatile
  5212                           
  5213                           ;hardware_config.c: 31:     TRISBbits.TRISB7 = 1;
  5214   0019B6  8E93               	bsf	147,7,c	;volatile
  5215                           
  5216                           ;hardware_config.c: 32:     TRISEbits.TRISE2 = 0;
  5217   0019B8  9496               	bcf	150,2,c	;volatile
  5218                           
  5219                           ;hardware_config.c: 33:     TRISEbits.TRISE0 = 0;
  5220   0019BA  9096               	bcf	150,0,c	;volatile
  5221                           
  5222                           ;hardware_config.c: 34:     TRISEbits.TRISE1 = 0;
  5223   0019BC  9296               	bcf	150,1,c	;volatile
  5224                           
  5225                           ;hardware_config.c: 35:     TRISCbits.TRISC2 = 1;
  5226   0019BE  8494               	bsf	148,2,c	;volatile
  5227                           
  5228                           ;hardware_config.c: 36:     LATEbits.LATE2 = 1;
  5229   0019C0  848D               	bsf	141,2,c	;volatile
  5230                           
  5231                           ;hardware_config.c: 37:     LATEbits.LATE0 = 1;
  5232   0019C2  808D               	bsf	141,0,c	;volatile
  5233                           
  5234                           ;hardware_config.c: 38:     LATEbits.LATE1 = 1;
  5235   0019C4  828D               	bsf	141,1,c	;volatile
  5236                           
  5237                           ;hardware_config.c: 39:     TRISBbits.TRISB0 = 1;
  5238   0019C6  8093               	bsf	147,0,c	;volatile
  5239                           
  5240                           ;hardware_config.c: 40:     TRISCbits.TRISC6 = 0;
  5241   0019C8  9C94               	bcf	148,6,c	;volatile
  5242                           
  5243                           ;hardware_config.c: 41:     TRISCbits.TRISC7 = 0;
  5244   0019CA  9E94               	bcf	148,7,c	;volatile
  5245                           
  5246                           ;hardware_config.c: 42:     TRISDbits.TRISD4 = 0;
  5247   0019CC  9895               	bcf	149,4,c	;volatile
  5248                           
  5249                           ;hardware_config.c: 45:     IPEN = 0;
  5250   0019CE  9ED0               	bcf	4048,7,c	;volatile
  5251                           
  5252                           ;hardware_config.c: 46:  GIE = 1;
  5253   0019D0  8EF2               	bsf	4082,7,c	;volatile
  5254                           
  5255                           ;hardware_config.c: 47:  PEIE = 1;
  5256   0019D2  8CF2               	bsf	4082,6,c	;volatile
  5257                           
  5258                           ;hardware_config.c: 48:     INT0E = 0;
  5259   0019D4  98F2               	bcf	4082,4,c	;volatile
  5260                           
  5261                           ;hardware_config.c: 49:  RBIE = 0;
  5262   0019D6  96F2               	bcf	4082,3,c	;volatile
  5263                           
  5264                           ;hardware_config.c: 50:  T0IE = 0;
  5265   0019D8  9AF2               	bcf	4082,5,c	;volatile
  5266                           
  5267                           ;hardware_config.c: 51:  TMR1IE = 1;
  5268   0019DA  809D               	bsf	3997,0,c	;volatile
  5269                           
  5270                           ;hardware_config.c: 52:  TMR2IE = 0;
  5271   0019DC  929D               	bcf	3997,1,c	;volatile
  5272                           
  5273                           ;hardware_config.c: 53:  CCP1IE = 0;
  5274   0019DE  949D               	bcf	3997,2,c	;volatile
  5275                           
  5276                           ;hardware_config.c: 54:  CCP2IE = 0;
  5277   0019E0  90A0               	bcf	4000,0,c	;volatile
  5278                           
  5279                           ;hardware_config.c: 55:  EEIE = 0;
  5280   0019E2  98A0               	bcf	4000,4,c	;volatile
  5281                           
  5282                           ;hardware_config.c: 56:  SSPIE = 0;
  5283   0019E4  969D               	bcf	3997,3,c	;volatile
  5284                           
  5285                           ;hardware_config.c: 57:  BCLIE = 0;
  5286   0019E6  96A0               	bcf	4000,3,c	;volatile
  5287                           
  5288                           ;hardware_config.c: 58:  ADIE = 0;
  5289   0019E8  9C9D               	bcf	3997,6,c	;volatile
  5290                           
  5291                           ;hardware_config.c: 59:  RBIE = 0;
  5292   0019EA  96F2               	bcf	4082,3,c	;volatile
  5293                           
  5294                           ;hardware_config.c: 60:  RCIE = 0;
  5295   0019EC  9A9D               	bcf	3997,5,c	;volatile
  5296   0019EE                     
  5297                           ;hardware_config.c: 61:     OSCCON = 0b01110010;
  5298   0019EE  0E72               	movlw	114
  5299   0019F0  6ED3               	movwf	211,c	;volatile
  5300                           
  5301                           ;hardware_config.c: 62:     OSCTUNE = 0b11011111;
  5302   0019F2  0EDF               	movlw	223
  5303   0019F4  6E9B               	movwf	155,c	;volatile
  5304   0019F6                     
  5305                           ;hardware_config.c: 63:     RBPU = 1;
  5306   0019F6  8EF1               	bsf	4081,7,c	;volatile
  5307   0019F8                     
  5308                           ;hardware_config.c: 66:     T1RD16 = 0;
  5309   0019F8  9ECD               	bcf	4045,7,c	;volatile
  5310   0019FA                     
  5311                           ;hardware_config.c: 67:  T1CKPS0 = 1;
  5312   0019FA  88CD               	bsf	4045,4,c	;volatile
  5313   0019FC                     
  5314                           ;hardware_config.c: 68:  T1CKPS1 = 1;
  5315   0019FC  8ACD               	bsf	4045,5,c	;volatile
  5316   0019FE                     
  5317                           ;hardware_config.c: 69:  T1SYNC = 0;
  5318   0019FE  94CD               	bcf	4045,2,c	;volatile
  5319   001A00                     
  5320                           ;hardware_config.c: 70:  T1OSCEN = 0;
  5321   001A00  96CD               	bcf	4045,3,c	;volatile
  5322   001A02                     
  5323                           ;hardware_config.c: 71:  TMR1CS = 0;
  5324   001A02  92CD               	bcf	4045,1,c	;volatile
  5325   001A04                     
  5326                           ;hardware_config.c: 72:  TMR1ON = 1;
  5327   001A04  80CD               	bsf	4045,0,c	;volatile
  5328   001A06                     
  5329                           ;hardware_config.c: 75:     SPIInit();
  5330   001A06  ECB1  F00E         	call	_SPIInit	;wreg free
  5331   001A0A  0012               	return		;funcret
  5332   001A0C                     __end_of_BoardInit:
  5333                           	callstack 0
  5334                           
  5335 ;; *************** function _SPIInit *****************
  5336 ;; Defined at:
  5337 ;;		line 30 in file "drivers/scr/API_MSPI_port.c"
  5338 ;; Parameters:    Size  Location     Type
  5339 ;;		None
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;		None
  5342 ;; Return value:  Size  Location     Type
  5343 ;;                  1    wreg      void 
  5344 ;; Registers used:
  5345 ;;		wreg, status,2
  5346 ;; Tracked objects:
  5347 ;;		On entry : 0/0
  5348 ;;		On exit  : 0/0
  5349 ;;		Unchanged: 0/0
  5350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;Total ram usage:        0 bytes
  5356 ;; Hardware stack levels used: 1
  5357 ;; Hardware stack levels required when called: 1
  5358 ;; This function calls:
  5359 ;;		Nothing
  5360 ;; This function is called by:
  5361 ;;		_BoardInit
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text37
  5366   001D62                     __ptext37:
  5367                           	callstack 0
  5368   001D62                     _SPIInit:
  5369                           	callstack 28
  5370   001D62                     
  5371                           ;drivers/scr/API_MSPI_port.c: 32:     TRISCbits.TRISC3 = 0;
  5372   001D62  9694               	bcf	148,3,c	;volatile
  5373                           
  5374                           ;drivers/scr/API_MSPI_port.c: 33:     TRISCbits.TRISC5 = 0;
  5375   001D64  9A94               	bcf	148,5,c	;volatile
  5376                           
  5377                           ;drivers/scr/API_MSPI_port.c: 34:     TRISCbits.TRISC4 = 1;
  5378   001D66  8894               	bsf	148,4,c	;volatile
  5379                           
  5380                           ;drivers/scr/API_MSPI_port.c: 35:     SSPSTATbits.SMP = 1;
  5381   001D68  8EC7               	bsf	199,7,c	;volatile
  5382                           
  5383                           ;drivers/scr/API_MSPI_port.c: 36:  SSPSTATbits.CKE = 1;
  5384   001D6A  8CC7               	bsf	199,6,c	;volatile
  5385   001D6C                     
  5386                           ;drivers/scr/API_MSPI_port.c: 37:     SSPCON1 = 0X00 | 0X01;
  5387   001D6C  0E01               	movlw	1
  5388   001D6E  6EC6               	movwf	198,c	;volatile
  5389   001D70                     
  5390                           ;drivers/scr/API_MSPI_port.c: 38:  SSPCON1bits.WCOL = 1;
  5391   001D70  8EC6               	bsf	198,7,c	;volatile
  5392   001D72                     
  5393                           ;drivers/scr/API_MSPI_port.c: 39:  SSPCON1bits.SSPOV = 0;
  5394   001D72  9CC6               	bcf	198,6,c	;volatile
  5395   001D74                     
  5396                           ;drivers/scr/API_MSPI_port.c: 40:  SSPCON1bits.SSPEN = 1;
  5397   001D74  8AC6               	bsf	198,5,c	;volatile
  5398   001D76                     
  5399                           ;drivers/scr/API_MSPI_port.c: 41:  SSPCON1bits.CKP = 0;
  5400   001D76  98C6               	bcf	198,4,c	;volatile
  5401   001D78  0012               	return		;funcret
  5402   001D7A                     __end_of_SPIInit:
  5403                           	callstack 0
  5404                           
  5405 ;; *************** function _isr *****************
  5406 ;; Defined at:
  5407 ;;		line 5 in file "drivers/inc/interrupciones.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;		None
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;		None
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  1    wreg      void 
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5425 ;;Total ram usage:        0 bytes
  5426 ;; Hardware stack levels used: 1
  5427 ;; This function calls:
  5428 ;;		Nothing
  5429 ;; This function is called by:
  5430 ;;		Interrupt level 2
  5431 ;; This function uses a non-reentrant model
  5432 ;;
  5433                           
  5434                           	psect	intcode
  5435   000008                     __pintcode:
  5436                           	callstack 0
  5437   000008                     _isr:
  5438                           	callstack 23
  5439                           
  5440                           ;incstack = 0
  5441   000008  8246               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5442   00000A                     
  5443                           ;drivers/inc/interrupciones.c: 7:  if(TMR1IE && TMR1IF) {
  5444   00000A  A09D               	btfss	3997,0,c	;volatile
  5445   00000C  EF0A  F000         	goto	i2u102_41
  5446   000010  EF0C  F000         	goto	i2u102_40
  5447   000014                     i2u102_41:
  5448   000014  EF1E  F000         	goto	i2l405
  5449   000018                     i2u102_40:
  5450   000018  A09E               	btfss	3998,0,c	;volatile
  5451   00001A  EF11  F000         	goto	i2u103_41
  5452   00001E  EF13  F000         	goto	i2u103_40
  5453   000022                     i2u103_41:
  5454   000022  EF1E  F000         	goto	i2l405
  5455   000026                     i2u103_40:
  5456   000026                     
  5457                           ;drivers/inc/interrupciones.c: 9:   TMR1IF = 0;
  5458   000026  909E               	bcf	3998,0,c	;volatile
  5459   000028                     
  5460                           ;drivers/inc/interrupciones.c: 10:         TMR1L = 0XF7;
  5461   000028  0EF7               	movlw	247
  5462   00002A  6ECE               	movwf	206,c	;volatile
  5463                           
  5464                           ;drivers/inc/interrupciones.c: 11:   TMR1H = 0XFD;
  5465   00002C  0EFD               	movlw	253
  5466   00002E  6ECF               	movwf	207,c	;volatile
  5467   000030                     
  5468                           ;drivers/inc/interrupciones.c: 12:   timeStamp++;
  5469   000030  0E01               	movlw	1
  5470   000032  2601               	addwf	_timeStamp^0,f,c
  5471   000034  0E00               	movlw	0
  5472   000036  2202               	addwfc	(_timeStamp+1)^0,f,c
  5473   000038  2203               	addwfc	(_timeStamp+2)^0,f,c
  5474   00003A  2204               	addwfc	(_timeStamp+3)^0,f,c
  5475   00003C                     i2l405:
  5476   00003C  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5477   00003E  0011               	retfie		f
  5478   000040                     __end_of_isr:
  5479                           	callstack 0
  5480                           
  5481                           	psect	rparam
  5482   000001                     ___rparam_used  equ	1
  5483   000000                     ___param_bank   equ	0
  5484   000000                     __Lparam        equ	__Lrparam
  5485   000000                     __Hparam        equ	__Hrparam
  5486                           
  5487                           	psect	temp
  5488   000046                     btemp:
  5489                           	callstack 0
  5490   000046                     	ds	1
  5491   000046                     int$flags       set	btemp
  5492   000047                     wtemp8          set	btemp+1
  5493   000047                     ttemp5          set	btemp+1
  5494   00004A                     ttemp6          set	btemp+4
  5495   00004E                     ttemp7          set	btemp+8
  5496                           
  5497                           	psect	idloc
  5498                           
  5499                           ;Config register IDLOC0 @ 0x200000
  5500                           ;	unspecified, using default values
  5501   200000                     	org	2097152
  5502   200000  FF                 	db	255
  5503                           
  5504                           ;Config register IDLOC1 @ 0x200001
  5505                           ;	unspecified, using default values
  5506   200001                     	org	2097153
  5507   200001  FF                 	db	255
  5508                           
  5509                           ;Config register IDLOC2 @ 0x200002
  5510                           ;	unspecified, using default values
  5511   200002                     	org	2097154
  5512   200002  FF                 	db	255
  5513                           
  5514                           ;Config register IDLOC3 @ 0x200003
  5515                           ;	unspecified, using default values
  5516   200003                     	org	2097155
  5517   200003  FF                 	db	255
  5518                           
  5519                           ;Config register IDLOC4 @ 0x200004
  5520                           ;	unspecified, using default values
  5521   200004                     	org	2097156
  5522   200004  FF                 	db	255
  5523                           
  5524                           ;Config register IDLOC5 @ 0x200005
  5525                           ;	unspecified, using default values
  5526   200005                     	org	2097157
  5527   200005  FF                 	db	255
  5528                           
  5529                           ;Config register IDLOC6 @ 0x200006
  5530                           ;	unspecified, using default values
  5531   200006                     	org	2097158
  5532   200006  FF                 	db	255
  5533                           
  5534                           ;Config register IDLOC7 @ 0x200007
  5535                           ;	unspecified, using default values
  5536   200007                     	org	2097159
  5537   200007  FF                 	db	255
  5538                           
  5539                           	psect	config
  5540                           
  5541                           ; Padding undefined space
  5542   300000                     	org	3145728
  5543   300000  FF                 	db	255
  5544                           
  5545                           ;Config register CONFIG1H @ 0x300001
  5546                           ;	Oscillator Selection bits
  5547                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  5548                           ;	Fail-Safe Clock Monitor Enable bit
  5549                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  5550                           ;	Internal/External Oscillator Switchover bit
  5551                           ;	IESO = OFF, Oscillator Switchover mode disabled
  5552   300001                     	org	3145729
  5553   300001  08                 	db	8
  5554                           
  5555                           ;Config register CONFIG2L @ 0x300002
  5556                           ;	Power-up Timer Enable bit
  5557                           ;	PWRT = 0x1, unprogrammed default
  5558                           ;	Brown-out Reset Enable bits
  5559                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  5560                           ;	Brown Out Reset Voltage bits
  5561                           ;	BORV = 22, VBOR set to 2.2 V nominal
  5562   300002                     	org	3145730
  5563   300002  11                 	db	17
  5564                           
  5565                           ;Config register CONFIG2H @ 0x300003
  5566                           ;	Watchdog Timer Enable bit
  5567                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  5568                           ;	Watchdog Timer Postscale Select bits
  5569                           ;	WDTPS = 8192, 1:8192
  5570   300003                     	org	3145731
  5571   300003  1A                 	db	26
  5572                           
  5573                           ; Padding undefined space
  5574   300004                     	org	3145732
  5575   300004  FF                 	db	255
  5576                           
  5577                           ;Config register CONFIG3H @ 0x300005
  5578                           ;	CCP2 MUX bit
  5579                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  5580                           ;	PORTB A/D Enable bit
  5581                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  5582                           ;	Low-Power Timer1 Oscillator Enable bit
  5583                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  5584                           ;	HFINTOSC Fast Start-up
  5585                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
  5586                           ;	MCLR Pin Enable bit
  5587                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  5588   300005                     	org	3145733
  5589   300005  01                 	db	1
  5590                           
  5591                           ;Config register CONFIG4L @ 0x300006
  5592                           ;	Stack Full/Underflow Reset Enable bit
  5593                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  5594                           ;	Single-Supply ICSP Enable bit
  5595                           ;	LVP = OFF, Single-Supply ICSP disabled
  5596                           ;	Extended Instruction Set Enable bit
  5597                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  5598                           ;	Background Debugger Enable bit
  5599                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  5600   300006                     	org	3145734
  5601   300006  80                 	db	128
  5602                           
  5603                           ; Padding undefined space
  5604   300007                     	org	3145735
  5605   300007  FF                 	db	255
  5606                           
  5607                           ;Config register CONFIG5L @ 0x300008
  5608                           ;	Code Protection Block 0
  5609                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  5610                           ;	Code Protection Block 1
  5611                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  5612                           ;	Code Protection Block 2
  5613                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  5614                           ;	Code Protection Block 3
  5615                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  5616   300008                     	org	3145736
  5617   300008  0F                 	db	15
  5618                           
  5619                           ;Config register CONFIG5H @ 0x300009
  5620                           ;	Boot Block Code Protection bit
  5621                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  5622                           ;	Data EEPROM Code Protection bit
  5623                           ;	CPD = OFF, Data EEPROM not code-protected
  5624   300009                     	org	3145737
  5625   300009  C0                 	db	192
  5626                           
  5627                           ;Config register CONFIG6L @ 0x30000A
  5628                           ;	Write Protection Block 0
  5629                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  5630                           ;	Write Protection Block 1
  5631                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  5632                           ;	Write Protection Block 2
  5633                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  5634                           ;	Write Protection Block 3
  5635                           ;	WRT3 = OFF, Block 3 (00C000h-00FFFFh) not write-protected
  5636   30000A                     	org	3145738
  5637   30000A  0F                 	db	15
  5638                           
  5639                           ;Config register CONFIG6H @ 0x30000B
  5640                           ;	Configuration Register Write Protection bit
  5641                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  5642                           ;	Boot Block Write Protection bit
  5643                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  5644                           ;	Data EEPROM Write Protection bit
  5645                           ;	WRTD = OFF, Data EEPROM not write-protected
  5646   30000B                     	org	3145739
  5647   30000B  E0                 	db	224
  5648                           
  5649                           ;Config register CONFIG7L @ 0x30000C
  5650                           ;	unspecified, using default values
  5651                           ;	Table Read Protection Block 0
  5652                           ;	EBTR0 = 0x1, unprogrammed default
  5653                           ;	Table Read Protection Block 1
  5654                           ;	EBTR1 = 0x1, unprogrammed default
  5655                           ;	Table Read Protection Block 2
  5656                           ;	EBTR2 = 0x1, unprogrammed default
  5657                           ;	Table Read Protection Block 3
  5658                           ;	EBTR3 = 0x1, unprogrammed default
  5659   30000C                     	org	3145740
  5660   30000C  0F                 	db	15
  5661                           
  5662                           ;Config register CONFIG7H @ 0x30000D
  5663                           ;	Boot Block Table Read Protection bit
  5664                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  5665   30000D                     	org	3145741
  5666   30000D  40                 	db	64
  5667                           tosu	equ	0xFFF
  5668                           tosh	equ	0xFFE
  5669                           tosl	equ	0xFFD
  5670                           stkptr	equ	0xFFC
  5671                           pclatu	equ	0xFFB
  5672                           pclath	equ	0xFFA
  5673                           pcl	equ	0xFF9
  5674                           tblptru	equ	0xFF8
  5675                           tblptrh	equ	0xFF7
  5676                           tblptrl	equ	0xFF6
  5677                           tablat	equ	0xFF5
  5678                           prodh	equ	0xFF4
  5679                           prodl	equ	0xFF3
  5680                           indf0	equ	0xFEF
  5681                           postinc0	equ	0xFEE
  5682                           postdec0	equ	0xFED
  5683                           preinc0	equ	0xFEC
  5684                           plusw0	equ	0xFEB
  5685                           fsr0h	equ	0xFEA
  5686                           fsr0l	equ	0xFE9
  5687                           wreg	equ	0xFE8
  5688                           indf1	equ	0xFE7
  5689                           postinc1	equ	0xFE6
  5690                           postdec1	equ	0xFE5
  5691                           preinc1	equ	0xFE4
  5692                           plusw1	equ	0xFE3
  5693                           fsr1h	equ	0xFE2
  5694                           fsr1l	equ	0xFE1
  5695                           bsr	equ	0xFE0
  5696                           indf2	equ	0xFDF
  5697                           postinc2	equ	0xFDE
  5698                           postdec2	equ	0xFDD
  5699                           preinc2	equ	0xFDC
  5700                           plusw2	equ	0xFDB
  5701                           fsr2h	equ	0xFDA
  5702                           fsr2l	equ	0xFD9
  5703                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    24
    Data        43
    BSS         282
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      69
    BANK0           160    147     147
    BANK1           256     91     236
    BANK2           256      0     142
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DebounceFSMInit@antirrebote_boton_n	PTR struct . size(2) Largest target is 11
		 -> main@boton1(BANK1[11]), 

    DebounceFSMUpdate@antirrebote_boton_n	PTR struct . size(2) Largest target is 11
		 -> main@boton1(BANK1[11]), 

    DelayInit@delay	PTR struct . size(2) Largest target is 11
		 -> InicializoMRF24@delay_time_out(COMRAM[9]), main@boton1(BANK1[11]), main@delay_parpadeo(BANK1[9]), 

    DelayIsRunning@delay	PTR struct . size(2) Largest target is 11
		 -> InicializoMRF24@delay_time_out(COMRAM[9]), main@boton1(BANK1[11]), main@delay_parpadeo(BANK1[9]), 

    DelayRead@delay	PTR struct . size(2) Largest target is 11
		 -> InicializoMRF24@delay_time_out(COMRAM[9]), main@boton1(BANK1[11]), main@delay_parpadeo(BANK1[9]), 

    DelayReset@delay	PTR struct . size(1) Largest target is 9
		 -> InicializoMRF24@delay_time_out(COMRAM[9]), 

    main@mrf24_data_in	PTR struct . size(2) Largest target is 70
		 -> data_in_s(BANK1[70]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 71
		 -> envio@buuf(BANK0[43]), envio@data_out_s(BANK0[71]), 

    memcpy@d1	PTR void  size(1) Largest target is 71
		 -> envio@buuf(BANK0[43]), envio@data_out_s(BANK0[71]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 43
		 -> envio@buuf(BANK0[43]), envio@data_config_s(BANK0[32]), 

    memcpy@s1	PTR const void  size(1) Largest target is 43
		 -> envio@buuf(BANK0[43]), envio@data_config_s(BANK0[32]), 

    MRF24TransmitirDato@p_info_out_s	PTR struct . size(1) Largest target is 71
		 -> envio@data_out_s(BANK0[71]), 

    sp__memcpy	PTR void  size(1) Largest target is 71
		 -> envio@buuf(BANK0[43]), envio@data_out_s(BANK0[71]), 

    sp__MRF24GetConfig	PTR struct . size(1) Largest target is 32
		 -> data_config_s(COMRAM[32]), 

    sp__MRF24GetDataIn	PTR struct . size(2) Largest target is 70
		 -> data_in_s(BANK1[70]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 32
		 -> data_config_s(COMRAM[32]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 43
		 -> envio@buuf(BANK0[43]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 43
		 -> envio@buuf(BANK0[43]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 32
		 -> data_config_s(COMRAM[32]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 32
		 -> data_config_s(COMRAM[32]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 16
		 -> default_mac_address(CODE[8]), default_security_key(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_MRF24J40Init
    _envio->_MRF24TransmitirDato
    _MRF24TransmitirDato->_SetLongAddr
    _MRF24ReciboPaquete->_GetLongAddr
    _MRF24ReciboPaquete->_SetLongAddr
    _MRF24J40Init->_InicializoMRF24
    _InicializoVariables->_strncpy
    _InicializoPines->_SetCSPin
    _InicializoPines->_SetResetPin
    _InicializoPines->_SetWakePin
    _InicializoMRF24->_DelayRead
    _SetDeviceMACAddress->_SetShortAddr
    _SetDeviceAddress->_SetShortAddr
    _SetChannel->_SetLongAddr
    _SetShortAddr->_WriteByteSPIPort
    _SetLongAddr->_Write2ByteSPIPort
    _GetShortAddr->_WriteByteSPIPort
    _WriteByteSPIPort->_SPIWriteByte
    _GetLongAddr->_Write2ByteSPIPort
    _Write2ByteSPIPort->_SPIWrite2Byte
    _SPIWrite2Byte->_SPIWriteByte
    _DebounceFSMUpdate->_DelayRead
    _DelayRead->_DelayIsRunning
    _DebounceFSMInit->_DelayInit

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_envio

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                95    95      0    6465
                                             29 COMRAM     2     2      0
                                              0 BANK1     91    91      0
                          _BoardInit
                    _DebounceFSMInit
                  _DebounceFSMUpdate
                          _DelayInit
                          _DelayRead
                     _MRF24GetDataIn
                      _MRF24IsNewMsg
                       _MRF24J40Init
                 _MRF24ReciboPaquete
                              _envio
 ---------------------------------------------------------------------------------
 (1) _envio                                              147   147      0    1800
                                              0 BANK0    147   147      0
                _MRF24TransmitirDato
                             _memcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               3     1      2      91
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _memcpy                                               7     3      4     149
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _MRF24TransmitirDato                                  8     7      1    1186
                                             10 COMRAM     8     7      1
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (1) _MRF24ReciboPaquete                                   8     8      0     972
                                             10 COMRAM     8     8      0
                        _GetLongAddr
                       _GetShortAddr
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (1) _MRF24J40Init                                         1     1      0    2528
                                             28 COMRAM     1     1      0
                    _InicializoMRF24
                    _InicializoPines
                _InicializoVariables
                        _SetResetPin
 ---------------------------------------------------------------------------------
 (2) _InicializoVariables                                  0     0      0     147
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              6     2      4     147
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _InicializoPines                                      0     0      0      87
                           _SetCSPin
                        _SetResetPin
                         _SetWakePin
 ---------------------------------------------------------------------------------
 (3) _SetWakePin                                           1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SetResetPin                                          1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InicializoMRF24                                     12    12      0    2265
                                             16 COMRAM    12    12      0
                          _DelayInit
                          _DelayRead
                         _DelayReset
                        _GetLongAddr
                       _GetShortAddr
                         _SetChannel
                   _SetDeviceAddress
                _SetDeviceMACAddress
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (3) _SetDeviceMACAddress                                  1     1      0     279
                                              4 COMRAM     1     1      0
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (3) _SetDeviceAddress                                     0     0      0     189
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (3) _SetChannel                                           1     1      0     487
                                             10 COMRAM     1     1      0
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (3) _SetShortAddr                                         2     1      1     189
                                              2 COMRAM     2     1      1
                           _SetCSPin
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (3) _SetLongAddr                                          5     2      3     298
                                              5 COMRAM     5     2      3
                           _SetCSPin
                  _Write2ByteSPIPort
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (2) _GetShortAddr                                         2     2      0     171
                                              2 COMRAM     2     2      0
                    _ReadByteSPIPort
                           _SetCSPin
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (4) _WriteByteSPIPort                                     1     1      0      58
                                              1 COMRAM     1     1      0
                       _SPIWriteByte
 ---------------------------------------------------------------------------------
 (2) _GetLongAddr                                          5     3      2     200
                                              5 COMRAM     5     3      2
                    _ReadByteSPIPort
                           _SetCSPin
                  _Write2ByteSPIPort
 ---------------------------------------------------------------------------------
 (4) _Write2ByteSPIPort                                    2     0      2      98
                                              3 COMRAM     2     0      2
                      _SPIWrite2Byte
 ---------------------------------------------------------------------------------
 (5) _SPIWrite2Byte                                        2     0      2      74
                                              1 COMRAM     2     0      2
                       _SPIWriteByte
 ---------------------------------------------------------------------------------
 (5) _SPIWriteByte                                         1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _SetCSPin                                             1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ReadByteSPIPort                                      0     0      0       0
                            _SPIRead
 ---------------------------------------------------------------------------------
 (4) _SPIRead                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DelayReset                                           1     0      1      46
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _MRF24IsNewMsg                                        0     0      0       0
                    _IsMRF24Interrup
 ---------------------------------------------------------------------------------
 (2) _IsMRF24Interrup                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MRF24GetDataIn                                       2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _DebounceFSMUpdate                                    5     2      3     610
                                             16 COMRAM     5     2      3
                    _DebounceFSMInit
                          _DelayRead
 ---------------------------------------------------------------------------------
 (3) _DelayRead                                           14    12      2     160
                                              2 COMRAM    14    12      2
                     _DelayIsRunning
 ---------------------------------------------------------------------------------
 (4) _DelayIsRunning                                       2     0      2      23
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _DebounceFSMInit                                      2     0      2     140
                                              6 COMRAM     2     0      2
                          _DelayInit
 ---------------------------------------------------------------------------------
 (3) _DelayInit                                            6     0      6      72
                                              0 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 (1) _BoardInit                                            0     0      0       0
                            _SPIInit
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BoardInit
     _SPIInit
   _DebounceFSMInit
     _DelayInit
   _DebounceFSMUpdate
     _DebounceFSMInit
     _DelayRead
       _DelayIsRunning
   _DelayInit
   _DelayRead
   _MRF24GetDataIn
   _MRF24IsNewMsg
     _IsMRF24Interrup
   _MRF24J40Init
     _InicializoMRF24
       _DelayInit
       _DelayRead
       _DelayReset
       _GetLongAddr
         _ReadByteSPIPort
           _SPIRead
         _SetCSPin
         _Write2ByteSPIPort
           _SPIWrite2Byte
             _SPIWriteByte
       _GetShortAddr
         _ReadByteSPIPort
         _SetCSPin
         _WriteByteSPIPort
           _SPIWriteByte
       _SetChannel
         _SetLongAddr
           _SetCSPin
           _Write2ByteSPIPort
           _WriteByteSPIPort
         _SetShortAddr
           _SetCSPin
           _WriteByteSPIPort
       _SetDeviceAddress
         _SetShortAddr
       _SetDeviceMACAddress
         _SetShortAddr
       _SetLongAddr
       _SetShortAddr
     _InicializoPines
       _SetCSPin
       _SetResetPin
       _SetWakePin
     _InicializoVariables
       _strncpy
     _SetResetPin
   _MRF24ReciboPaquete
     _GetLongAddr
     _GetShortAddr
     _SetLongAddr
     _SetShortAddr
   _envio
     _MRF24TransmitirDato
       _SetLongAddr
       _SetShortAddr
     _memcpy
     _strlen

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3935      0       0      0.0%
BITBANK14          256      0       0      0.0%
BANK14             256      0       0      0.0%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0     142     55.5%
BITBANK1           256      0       0      0.0%
BANK1              256     91     236     92.2%
BITBANK0           160      0       0      0.0%
BANK0              160    147     147     91.9%
BITBIGSFRh          98      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     31      69     73.4%
BITBIGSFRll         32      0       0      0.0%
BITBIGSFRlh         27      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     600      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Aug 07 14:46:58 2025

                         _SSPSTATbits 0FC7                                    l21 1DA2  
                                  l30 1DE2                                    l24 1E0C  
                                  l33 1DB6                                    l42 1E26  
                                  l27 1DD4                                    l36 1E16  
                                  l39 1DF0                       _IsMRF24Interrup 1DA4  
                       ?_MRF24J40Init 0027                                   l100 19A8  
                                 l103 12A6                                   l112 1D48  
                                 l121 1AA0                                   l105 1424  
                                 l202 1D52                                   l211 1D7E  
                                 l115 1D02                                   l124 1BCE  
                                 l132 1CB2                                   l221 1C5C  
                                 l205 1D60                                   l214 1D8E  
                                 l118 1AE2                                   l127 1CDC  
                                 l135 1B5C                                   l208 1DFE  
                                 l160 108A                                   l233 1D28  
                                 l314 18C8                                   l243 1B96  
                                 l227 1812                                   l236 1DC6  
                                 l180 1E20                                   l253 157E  
                                 l157 1278                                   l174 1758  
                                 l169 1C02                                   l199 1D78  
                                 l296 15CA                                   l389 1A0A  
                                 _GIE 7F97                                   u600 1904  
                                 u601 1900                                   u610 191A  
                                 u611 1916                                   u540 1D60  
                                 u700 12C8                                   u620 1942  
                                 u541 1D5C                                   u701 12C4  
                                 u621 193E                                   u630 1776  
                                 u710 12E4                                   u631 1772  
                                 u711 12E0                                   u640 17FC  
                                 u560 1D8C                                   u720 13E4  
                                 u800 125E                                   u641 17F8  
                                 u561 1D88                                   u721 13E0  
                                 u801 125A                                   u650 1CB2  
                                 u730 13FA                                   u810 1C24  
                                 u555 1E0A                                   u651 1CAE  
                                 u731 13F6                                   u811 1C20  
                                 u900 14C8                                   u556 1E0C  
                                 u740 102A                                   u820 1B22  
                                 u901 14C4                                   u741 1026  
                                 u821 1B1E                                   u910 14D8  
                                 u670 1DB4                                   u830 1BE0  
                                 u750 104A                                   u911 14D4  
                                 u671 1DAE                                   u831 1BDC  
                                 u575 1AAC                                   u751 1046  
                                 u920 1510                                   u840 1BFA  
                                 u680 1956                                   u760 1068  
                                 u921 150C                                   u841 1BF6  
                                 u665 1A68                                   u585 1DD2  
                                 u681 1952                                   u761 1064  
                                 u586 1DD4                                   u690 1968  
                                 u850 1686                                   u770 1086  
                                 u595 1DE0                                   u691 1964  
                                 u851 1682                                   u771 1082  
                                 u931 181E                                   u676 1DB6  
                                 u596 1DE2                                   u860 1742  
                                 u780 1108                                   u861 173E  
                                 u781 1104                                   u941 1830  
                                 u870 143A                                   u790 11AE  
                                 u871 1436                                   u791 11AA  
                                 u951 1878                                   u880 146E  
                                 u881 146A                                   u890 147E  
                                 u970 15F0                                   u891 147A  
                                 u971 15EA                                   u980 162C  
                                 u981 1628                                   u990 1650  
                                 u991 164C                                   u976 15F2  
                                 _isr 0008                                   wreg 0FE8  
                 __end_of_GetLongAddr 1AA2                                  l1101 1942  
                                l2001 1340                                  l2011 138A  
                                l2003 1350                                  l2021 13BA  
                                l2013 1394                                  l2005 1360  
                                l2101 11DA                                  l2031 13FA  
                                l2023 13CA                                  l2015 139E  
                                l2007 1370                                  l2111 1224  
                                l2103 1200                                  l2033 1422  
                                l2017 13A8                                  l2009 1380  
                                l2201 16EA                                  l2113 1226  
                                l2105 1202                                  l2041 102E  
                                l2131 1D74                                  l2123 1D62  
                                l2019 13B2                                  l2203 16F0  
                                l2115 125E                                  l2107 1208  
                                l1091 1C30                                  l2133 1D76  
                                l2125 1D6C                                  l2301 1A06  
                                l2141 1B8C                                  l2221 143A  
                                l2213 1E18                                  l2029 13E8  
                                l2205 170E                                  l2117 126C  
                                l2109 1222                                  l2061 10BA  
                                l2053 108C                                  l2045 104E  
                                l2037 101A                                  l1085 1B22  
                                l2127 1D70                                  l2223 144E  
                                l2207 1710                                  l2119 126E  
                                l2071 10EE                                  l2063 10C8  
                                l2055 109C                                  l2143 1C04  
                                l2311 184A                                  l2129 1D72  
                                l2137 1B5E                                  l2241 14A8  
                                l2225 146E                                  l2217 1426  
                                l2209 1742                                  l2081 112C  
                                l2073 10F0                                  l2065 10CA  
                                l2057 109E                                  l2049 106C  
                                l2161 1B08                                  l2153 1AE4  
                                l2145 1C0C                                  l2321 186E  
                                l2313 1852                                  l2305 1814  
                                l2139 1B6C                                  l2243 14C8  
                                l2227 147E                                  l2235 1494  
                                l2219 142A                                  l2171 1B44  
                                l2163 1B24                                  l2091 1190  
                                l2083 114E                                  l2075 1108  
                                l2067 10D8                                  l2059 10B8  
                                l2155 1AF0                                  l2147 1C0E  
                                l2331 18BC                                  l2323 1880  
                                l2315 1856                                  l2307 1838  
                                l2261 1510                                  l2245 14D8  
                                l2253 14EC                                  l2237 14A2  
                                l2229 148E                                  l2173 1B56  
                                l2165 1B28                                  l2093 1192  
                                l2085 1150                                  l2077 1116  
                                l2069 10DA                                  l2157 1AFA  
                                l2149 1C24                                  l2333 18C0  
                                l2325 188E                                  l2317 185E  
                                l2309 1842                                  l2263 1524  
                                l2247 14E6                                  l2271 1536  
                                l2183 1BE6                                  l2167 1B2C  
                                l2095 11AE                                  l2087 1168  
                                l2079 112A                                  l2159 1AFC  
                                l2327 18A4                                  l2319 1866  
                                l2351 1590                                  l2281 19AA  
                                l2265 1530                                  l2273 157C  
                                l2185 1BFA                                  l2177 1BD0  
                                l2169 1B3E                                  l2193 1676  
                                l2097 11C0                                  l2089 116A  
                                l2329 18AA                                  l2361 15D0  
                                l2353 1594                                  l2291 19FC  
                                l2283 19EE                                  l2259 1500  
                                l2179 1BE0                                  l1803 1DE4  
                                l2099 11D8                                  l2371 1630  
                                l2355 15B0                                  l2347 1580  
                                l2293 19FE                                  l2285 19F6  
                                l1901 17A2                                  l2189 1C00  
                                l1813 1E22                                  l1821 1D36  
                                l2197 168A                                  l2373 1634  
                                l2445 160A                                  l2365 15D8  
                                l2357 15BA                                  l2349 158C  
                                l2295 1A00                                  l2287 19F8  
                                l1903 17FC                                  l2447 1556  
                                l1807 1D7A                                  l1831 1AC4  
                                l1823 1D3C                                  l2199 16E2  
                                l2375 1650                                  l2367 1618  
                                l2359 15C2                                  l2297 1A02  
                                l2289 19FA                                  l1841 1DB8  
                                l1905 180A                                  l1809 1D8C  
                                l1833 1ACA                                  l1825 1D42  
                                l1817 1D2C                                  l1913 1CB4  
                                l2369 162C                                  l2299 1A04  
                                l1931 1A80                                  l1835 1AD6  
                                l1819 1D30                                  l1923 1C8C  
                                l1909 1810                                  l1933 1A86  
                                l1837 1ADC                                  l1829 1AA2  
                                l1925 1CA0                                  l1917 1C8A  
                                l1845 1DCA                                  l1861 1908  
                                l1853 18CA                                  l1791 1DF2  
                                l1935 1A92                                  l1943 1B98  
                                l1927 1CA2                                  l1863 191E  
                                l1855 18D2                                  l1953 1DA4  
                                l1873 1D04                                  l1937 1A98  
                                l1929 1A5E                                  l1881 1CE0  
                                l1945 1BBC                                  l1849 1DD8  
                                l1865 1926                                  l1857 18D8  
                                l1961 1968                                  l1875 1D1A  
                                l1795 1E02                                  l1787 1D4C  
                                l1939 1A9E                                  l1891 1D00  
                                l1883 1CE8                                  l1867 1928  
                                l1963 1990                                  l1869 1C32  
                                l1789 1D4E                                  l1885 1CEE  
                                l1981 12C8                                  l1973 127A  
                                l1949 1D90                                  l1965 1994  
                                l1957 1944                                  l1895 175A  
                                l1799 1E10                                  l1887 1CF4  
                                l1879 1CE0                                  l1991 1308  
                                l1975 1294                                  l1967 1998  
                                l1959 1956                                  l1897 1776  
                                l1889 1CFA                                  l1993 130C  
                                l1985 12CE                                  l1977 129E  
                                l1969 19A0                                  l1899 178E  
                                l1995 1310                                  l1987 12E4  
                                l1979 12AE                                  l1997 1320  
                                l1989 12FE                                  l1999 1330  
                                _ADIE 7CEE                                  ?_isr 0027  
                                _EEIE 7D04                                  _T0IE 7F95  
                                u1000 1662                                  u1001 165A  
                                u1018 1664                                  u1047 1B32  
                                u1057 1B4A                                  u1067 12EE  
                                u1077 1BC2                                  _IPEN 7E87  
                                _PEIE 7F96                                  _RBIE 7F93  
                                _RCIE 7CED                                  _RBPU 7F8F  
                        _SPIWriteByte 1D4A                                  _main 1580  
                     __end_of_SPIInit 1D7A                       __end_of_SPIRead 1D90  
                                fsr1h 0FE2                                  fsr2h 0FDA  
                                indf2 0FDF                                  fsr1l 0FE1  
                                fsr2l 0FD9                                  btemp 0046  
                       _MRF24IsNewMsg 1BD0                            _DelayReset 1D04  
             GetShortAddr@reg_address 002A                                  start 0040  
                   DelayInit@duration 0029                          ___param_bank 0000  
                   ??_ReadByteSPIPort 0027                                 ??_isr 0027  
                      ??_MRF24J40Init 0043           __end_of_InicializoVariables 19AA  
                       _SPIWrite2Byte 1DF2                                 ?_main 0027  
                               _BCLIE 7D03                                 _INT0E 7F94  
                               i2l405 003C                  SetDeviceMACAddress@i 002B  
                      _MRF24GetDataIn 1E18                                 _TMR1H 0FCF  
                               _TMR1L 0FCE                                 _PORTA 0F80  
                               _PORTB 0F81                                 _PORTC 0F82  
                               _PORTD 0F83                                 _PORTE 0F84  
                               _SSPIE 7CEB                  __end_of_GetShortAddr 1D04  
                     _InicializoMRF24 127A                       _InicializoPines 1D90  
             SetShortAddr@reg_address 002A                                 _envio 1814  
                               tablat 0FF5                                 plusw1 0FE3  
                               plusw2 0FDB                        ?_MRF24IsNewMsg 0027  
                               ttemp5 0047                                 ttemp6 004A  
                               ttemp7 004E                                 status 0FD8  
                               wtemp8 0047                       __end_of_strncpy 1944  
             __end_of_IsMRF24Interrup 1DB8                   _SetDeviceMACAddress 1C8A  
                     __initialization 1A0C                          __end_of_main 1676  
DebounceFSMUpdate@antirrebote_boton_n 0037                    envio@data_config_s 008C  
                      ?_SPIWrite2Byte 0028                      __end_of_SetCSPin 1E0E  
                     envio@data_out_s 00AC                           _GetLongAddr 1A5E  
                       ??_SetLongAddr 002F                __end_of_MRF24GetDataIn 1E22  
                              ??_main 0044                         __activetblptr 0002  
                       ??_SetResetPin 0027                  ?_SetDeviceMACAddress 0027  
                          _SetChannel 1B98         InicializoMRF24@delay_time_out 003A  
                   ?_SetDeviceAddress 0027                                _CCP1IE 7CEA  
                              _CCP2IE 7D00                                ?_envio 0027  
                           ??_SPIInit 0027                             ??_SPIRead 0027  
                  ??_SetDeviceAddress 002B                                _T1RD16 7E6F  
                              _T1SYNC 7E6A                                i2l2391 0030  
                              i2l2383 000A                                i2l2385 0018  
                              i2l2387 0026                                i2l2389 0028  
                          _SetWakePin 1DC8                                _OSCCON 0FD3  
                              _TMR1IE 7CE8                                _TMR1IF 7CF0  
                              _TMR1CS 7E69                                _TMR2IE 7CE9  
                              _TMR1ON 7E68          __end_of_default_security_key 1011  
                              _SSPBUF 0FC9                           ?_DelayReset 0027  
                 DelayIsRunning@delay 0027               __end_of_InicializoMRF24 1426  
                              _memcpy 1AE4                                clear_0 1A32  
                              clear_1 1A3E                                clear_2 1A4A  
                              isa$std 0001                       ?_MRF24GetDataIn 0027  
                      SetCSPin@estado 0027               __end_of_InicializoPines 1DA4  
                              _strlen 1C04                   MRF24ReciboPaquete@i 0038  
               ??_SetDeviceMACAddress 002B                          __mediumconst 0000  
                              tblptrh 0FF7                                tblptrl 0FF6  
                              tblptru 0FF8                   __end_of_SetLongAddr 1AE4  
                  _MRF24ReciboPaquete 1676                      ??_DelayIsRunning 0029  
                           ??_strncpy 002B                       ??_MRF24IsNewMsg 0027  
                 __end_of_SetResetPin 1DE4                 GetShortAddr@leido_spi 0029  
                   __end_of_DelayInit 1C5E                     __end_of_DelayRead 1814  
                __end_of_MRF24J40Init 1B5E                            __accesstop 0060  
             __end_of__initialization 1A50                   ?_MRF24ReciboPaquete 0027  
         __end_of_MRF24TransmitirDato 127A                     __end_of_BoardInit 1A0C  
                      DelayInit@delay 0027                         ___rparam_used 0001  
                      DelayRead@delay 0029                      SetWakePin@estado 0027  
                    ?_IsMRF24Interrup 0027                         ?_SetShortAddr 0029  
                      __pcstackCOMRAM 0027                          __pidataBANK1 1C5E  
                     ??_SPIWrite2Byte 002A                    _long_mac_address_e 0006  
                       __end_of_envio 18CA                  ??_MRF24ReciboPaquete 0031  
                      main@data_out_s 0166                           ?_SetChannel 0027  
                             ??_envio 0039                            __pbssBANK1 0100  
                          __pbssBANK2 0200                           ?_SetWakePin 0027  
                           ?_SetCSPin 0027                       _ReadByteSPIPort 1E22  
              InicializoMRF24@lectura 0039                            _data_out_s 0247  
                        _GetShortAddr 1CDE                        ??_SetShortAddr 002A  
                    ?_InicializoMRF24 0027                               ?_memcpy 0027  
                         _SetLongAddr 1AA2                               _T1CKPS0 7E6C  
                             _T1CKPS1 7E6D                               ?_strlen 0027  
                    ?_InicializoPines 0027                  _default_security_key 1001  
                             _T1OSCEN 7E6B                           _SetResetPin 1DD6  
                             _OSCTUNE 0F9B                               _SSPCON1 0FC6  
                             _SPIInit 1D62                               _SPIRead 1D7A  
                          ??_SetCSPin 0027                     SetShortAddr@valor 0029  
                             __Hparam 0000                               __Lparam 0000  
                   ??_DebounceFSMInit 002F                          __psmallconst 1000  
                             __pcinit 1A0C                          ?_GetLongAddr 002C  
                             __ramtop 1000                               __ptext0 1580  
                             __ptext1 1814                               __ptext2 1C04  
                             __ptext3 1AE4                               __ptext4 101A  
                             __ptext5 1676                               __ptext6 1B24  
                             __ptext7 1944                               __ptext8 18CA  
                             __ptext9 1D90                      _WriteByteSPIPort 1E0E  
             __end_of_ReadByteSPIPort 1E28                               _strncpy 18CA  
                end_of_initialization 1A50                               memcpy@d 002C  
                             memcpy@n 0029                               memcpy@s 002D  
                       __Lmediumconst 0000                          ??_DelayReset 0028  
                    ??_MRF24GetDataIn 0029                   _default_mac_address 1011  
                             postdec1 0FE5                               postdec2 0FDD  
                             postinc0 0FEE                               postinc1 0FE6  
                             postinc2 0FDE                               strlen@a 0029  
                             strlen@s 0027                          _MRF24J40Init 1B24  
                           _PORTBbits 0F81                             _PORTCbits 0F82  
                  __end_of_DelayReset 1D2A                  WriteByteSPIPort@dato 0028  
                           _TRISBbits 0F93                             _TRISCbits 0F94  
                           _TRISDbits 0F95                             _TRISEbits 0F96  
                __end_of_SetShortAddr 1D4A                 Write2ByteSPIPort@dato 002A  
                GetLongAddr@respuesta 0030                            main@boton1 01B6  
                           _DelayInit 1C32                             _DelayRead 175A  
                           _BoardInit 19AA                     _Write2ByteSPIPort 1DE4  
         __end_of_SetDeviceMACAddress 1CB4                         _data_config_s 0007  
                          envio@F3354 0200                            envio@F3356 0100  
                          envio@F3358 01C1                    ?_Write2ByteSPIPort 002A  
                      __end_of_memcpy 1B24                        __end_of_strlen 1C32  
                        ??_SetChannel 0031                   start_initialization 1A0C  
                 ??_Write2ByteSPIPort 002C                           __end_of_isr 0040  
                    ?_ReadByteSPIPort 0027                         ?_SPIWriteByte 0027  
                        ??_SetWakePin 0027                 __end_of_MRF24IsNewMsg 1C04  
                          ?_DelayInit 0027                            ?_DelayRead 0029  
                          ?_BoardInit 0027             __end_of_Write2ByteSPIPort 1DF2  
                  __end_of_SetChannel 1BD0                          _estadoActual 0005  
                         __pdataBANK1 01C1                 __end_of_SPIWrite2Byte 1E00  
                            ??_memcpy 002B                          ?_SetLongAddr 002C  
                            ??_strlen 0029                    __end_of_SetWakePin 1DD6  
                   _DebounceFSMUpdate 1426                          ?_SetResetPin 0027  
                         __pbssCOMRAM 0001                    ?_DebounceFSMUpdate 0037  
                       __pcstackBANK0 0060                         __pcstackBANK1 0166  
                     DelayReset@delay 0027                              ?_SPIInit 0027  
                            ?_SPIRead 0027                        ??_SPIWriteByte 0027  
                 ??_DebounceFSMUpdate 003A                      SPIWriteByte@dato 0027  
                     _DebounceFSMInit 1B5E                             _data_in_s 0120  
                    _SetDeviceAddress 1CB4                   _InicializoVariables 1944  
            __end_of_WriteByteSPIPort 1E18                             __pintcode 0008  
           __end_of_DebounceFSMUpdate 1580                     SetResetPin@estado 0027  
                         __smallconst 1000                  ?_InicializoVariables 0027  
                            ?_strncpy 0027                      SetLongAddr@valor 002E  
                            _LATCbits 0F8B                              _LATDbits 0F8C  
                            _LATEbits 0F8D                           ??_DelayInit 002D  
                         ??_DelayRead 002B                              i2u102_40 0018  
                            i2u102_41 0014                              i2u103_40 0026  
                            i2u103_41 0022                           ??_BoardInit 0027  
                            _PIR1bits 0F9E                          _SetShortAddr 1D2A  
                           _timeStamp 0001                    main@delay_parpadeo 01AD  
               ??_InicializoVariables 002D                     ??_IsMRF24Interrup 0027  
             __end_of_DebounceFSMInit 1B98                             copy_data0 1A20  
                           envio@buuf 0060                             envio@size 008B  
                            _SetCSPin 1E00                              __Hrparam 0000  
                           memcpy@tmp 002B                              __Lrparam 0000  
                __end_of_SPIWriteByte 1D62                              __ptext10 1DC8  
                            __ptext11 1DD6                              __ptext20 1A5E  
                            __ptext12 127A                              __ptext21 1DE4  
                            __ptext13 1C8A                              __ptext30 1E18  
                            __ptext22 1DF2                              __ptext14 1CB4  
                            __ptext31 1426                              __ptext23 1D4A  
                            __ptext15 1B98                              __ptext32 175A  
                            __ptext24 1E00                              __ptext16 1D2A  
                            __ptext33 1DB8                              __ptext25 1E22  
                            __ptext17 1AA2                              __ptext34 1B5E  
                            __ptext26 1D7A                              __ptext18 1CDE  
                 _MRF24TransmitirDato 101A                              __ptext35 1C32  
                            __ptext27 1D04                              __ptext19 1E0E  
                            __ptext36 19AA                              __ptext28 1BD0  
                            __ptext37 1D62                              __ptext29 1DA4  
                   ??_InicializoMRF24 0037                        _DelayIsRunning 1DB8  
                   ??_InicializoPines 0028                         ?_GetShortAddr 0027  
                ?_MRF24TransmitirDato 0031                              isa$xinst 0000  
                            int$flags 0046    DebounceFSMInit@antirrebote_boton_n 002D  
         __end_of_default_mac_address 1019              __end_of_SetDeviceAddress 1CDE  
                            memcpy@d1 0027                              memcpy@s1 0028  
               MRF24ReciboPaquete@add 0036                      ?_DebounceFSMInit 002D  
                            intlevel2 0000                __end_of_DelayIsRunning 1DC8  
                MRF24TransmitirDato@i 0037       MRF24TransmitirDato@p_info_out_s 0031  
                      ??_GetShortAddr 0029                             strncpy@cp 002C  
               ??_MRF24TransmitirDato 0032                     ?_WriteByteSPIPort 0027  
          __end_of_MRF24ReciboPaquete 175A                         ??_GetLongAddr 002E  
                  ??_WriteByteSPIPort 0028                GetLongAddr@reg_address 002C  
                            strncpy@d 0027                              strncpy@n 0029  
                            strncpy@s 0028                           _SSPCON1bits 0FC6  
         DebounceFSMUpdate@estado_pin 0039                     SPIWrite2Byte@dato 0028  
              SetLongAddr@reg_address 002C                       ?_DelayIsRunning 0027  
          MRF24TransmitirDato@pos_mem 0038  
