

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Jul 26 01:56:36 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	18F46K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1,group=2
    14                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1,group=2
    15                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1,group=2
    17                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    53                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    54                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    56   000000                     
    57                           ; Version 2.20
    58                           ; Generated 05/05/2020 GMT
    59                           ; 
    60                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F46K20 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91   000FE0                     bsr             equ	4064
    92   000FE9                     fsr0            equ	4073
    93   000FEA                     fsr0h           equ	4074
    94   000FE9                     fsr0l           equ	4073
    95   000FE1                     fsr1            equ	4065
    96   000FE2                     fsr1h           equ	4066
    97   000FE1                     fsr1l           equ	4065
    98   000FD9                     fsr2            equ	4057
    99   000FDA                     fsr2h           equ	4058
   100   000FD9                     fsr2l           equ	4057
   101   000FEF                     indf0           equ	4079
   102   000FE7                     indf1           equ	4071
   103   000FDF                     indf2           equ	4063
   104   000FF2                     intcon          equ	4082
   105   000000                     nvmcon          equ	0
   106   000FF9                     pcl             equ	4089
   107   000FFA                     pclath          equ	4090
   108   000FFB                     pclatu          equ	4091
   109   000FEB                     plusw0          equ	4075
   110   000FE3                     plusw1          equ	4067
   111   000FDB                     plusw2          equ	4059
   112   000FED                     postdec0        equ	4077
   113   000FE5                     postdec1        equ	4069
   114   000FDD                     postdec2        equ	4061
   115   000FEE                     postinc0        equ	4078
   116   000FE6                     postinc1        equ	4070
   117   000FDE                     postinc2        equ	4062
   118   000FEC                     preinc0         equ	4076
   119   000FE4                     preinc1         equ	4068
   120   000FDC                     preinc2         equ	4060
   121   000FF3                     prod            equ	4083
   122   000FF4                     prodh           equ	4084
   123   000FF3                     prodl           equ	4083
   124   000FD8                     status          equ	4056
   125   000FF5                     tablat          equ	4085
   126   000FF6                     tblptr          equ	4086
   127   000FF7                     tblptrh         equ	4087
   128   000FF6                     tblptrl         equ	4086
   129   000FF8                     tblptru         equ	4088
   130   000FFD                     tosl            equ	4093
   131   000FE8                     wreg            equ	4072
   132   000F77                     SSPMSK          equ	3959	;# 
   133   000F78                     SLRCON          equ	3960	;# 
   134   000F79                     CM2CON1         equ	3961	;# 
   135   000F7A                     CM2CON0         equ	3962	;# 
   136   000F7B                     CM1CON0         equ	3963	;# 
   137   000F7C                     WPUB            equ	3964	;# 
   138   000F7D                     IOCB            equ	3965	;# 
   139   000F7E                     ANSEL           equ	3966	;# 
   140   000F7F                     ANSELH          equ	3967	;# 
   141   000F80                     PORTA           equ	3968	;# 
   142   000F81                     PORTB           equ	3969	;# 
   143   000F82                     PORTC           equ	3970	;# 
   144   000F83                     PORTD           equ	3971	;# 
   145   000F84                     PORTE           equ	3972	;# 
   146   000F89                     LATA            equ	3977	;# 
   147   000F8A                     LATB            equ	3978	;# 
   148   000F8B                     LATC            equ	3979	;# 
   149   000F8C                     LATD            equ	3980	;# 
   150   000F8D                     LATE            equ	3981	;# 
   151   000F92                     TRISA           equ	3986	;# 
   152   000F92                     DDRA            equ	3986	;# 
   153   000F93                     TRISB           equ	3987	;# 
   154   000F93                     DDRB            equ	3987	;# 
   155   000F94                     TRISC           equ	3988	;# 
   156   000F94                     DDRC            equ	3988	;# 
   157   000F95                     TRISD           equ	3989	;# 
   158   000F95                     DDRD            equ	3989	;# 
   159   000F96                     TRISE           equ	3990	;# 
   160   000F96                     DDRE            equ	3990	;# 
   161   000F9B                     OSCTUNE         equ	3995	;# 
   162   000F9D                     PIE1            equ	3997	;# 
   163   000F9E                     PIR1            equ	3998	;# 
   164   000F9F                     IPR1            equ	3999	;# 
   165   000FA0                     PIE2            equ	4000	;# 
   166   000FA1                     PIR2            equ	4001	;# 
   167   000FA2                     IPR2            equ	4002	;# 
   168   000FA6                     EECON1          equ	4006	;# 
   169   000FA7                     EECON2          equ	4007	;# 
   170   000FA8                     EEDATA          equ	4008	;# 
   171   000FA9                     EEADR           equ	4009	;# 
   172   000FAA                     EEADRH          equ	4010	;# 
   173   000FAB                     RCSTA           equ	4011	;# 
   174   000FAB                     RCSTA1          equ	4011	;# 
   175   000FAC                     TXSTA           equ	4012	;# 
   176   000FAC                     TXSTA1          equ	4012	;# 
   177   000FAD                     TXREG           equ	4013	;# 
   178   000FAD                     TXREG1          equ	4013	;# 
   179   000FAE                     RCREG           equ	4014	;# 
   180   000FAE                     RCREG1          equ	4014	;# 
   181   000FAF                     SPBRG           equ	4015	;# 
   182   000FAF                     SPBRG1          equ	4015	;# 
   183   000FB0                     SPBRGH          equ	4016	;# 
   184   000FB1                     T3CON           equ	4017	;# 
   185   000FB2                     TMR3            equ	4018	;# 
   186   000FB2                     TMR3L           equ	4018	;# 
   187   000FB3                     TMR3H           equ	4019	;# 
   188   000FB4                     CVRCON2         equ	4020	;# 
   189   000FB5                     CVRCON          equ	4021	;# 
   190   000FB6                     ECCP1AS         equ	4022	;# 
   191   000FB7                     PWM1CON         equ	4023	;# 
   192   000FB8                     BAUDCON         equ	4024	;# 
   193   000FB8                     BAUDCTL         equ	4024	;# 
   194   000FB9                     PSTRCON         equ	4025	;# 
   195   000FBA                     CCP2CON         equ	4026	;# 
   196   000FBB                     CCPR2           equ	4027	;# 
   197   000FBB                     CCPR2L          equ	4027	;# 
   198   000FBC                     CCPR2H          equ	4028	;# 
   199   000FBD                     CCP1CON         equ	4029	;# 
   200   000FBE                     CCPR1           equ	4030	;# 
   201   000FBE                     CCPR1L          equ	4030	;# 
   202   000FBF                     CCPR1H          equ	4031	;# 
   203   000FC0                     ADCON2          equ	4032	;# 
   204   000FC1                     ADCON1          equ	4033	;# 
   205   000FC2                     ADCON0          equ	4034	;# 
   206   000FC3                     ADRES           equ	4035	;# 
   207   000FC3                     ADRESL          equ	4035	;# 
   208   000FC4                     ADRESH          equ	4036	;# 
   209   000FC5                     SSPCON2         equ	4037	;# 
   210   000FC6                     SSPCON1         equ	4038	;# 
   211   000FC7                     SSPSTAT         equ	4039	;# 
   212   000FC8                     SSPADD          equ	4040	;# 
   213   000FC9                     SSPBUF          equ	4041	;# 
   214   000FCA                     T2CON           equ	4042	;# 
   215   000FCB                     PR2             equ	4043	;# 
   216   000FCB                     MEMCON          equ	4043	;# 
   217   000FCC                     TMR2            equ	4044	;# 
   218   000FCD                     T1CON           equ	4045	;# 
   219   000FCE                     TMR1            equ	4046	;# 
   220   000FCE                     TMR1L           equ	4046	;# 
   221   000FCF                     TMR1H           equ	4047	;# 
   222   000FD0                     RCON            equ	4048	;# 
   223   000FD1                     WDTCON          equ	4049	;# 
   224   000FD2                     HLVDCON         equ	4050	;# 
   225   000FD2                     LVDCON          equ	4050	;# 
   226   000FD3                     OSCCON          equ	4051	;# 
   227   000FD5                     T0CON           equ	4053	;# 
   228   000FD6                     TMR0            equ	4054	;# 
   229   000FD6                     TMR0L           equ	4054	;# 
   230   000FD7                     TMR0H           equ	4055	;# 
   231   000FD8                     STATUS          equ	4056	;# 
   232   000FD9                     FSR2            equ	4057	;# 
   233   000FD9                     FSR2L           equ	4057	;# 
   234   000FDA                     FSR2H           equ	4058	;# 
   235   000FDB                     PLUSW2          equ	4059	;# 
   236   000FDC                     PREINC2         equ	4060	;# 
   237   000FDD                     POSTDEC2        equ	4061	;# 
   238   000FDE                     POSTINC2        equ	4062	;# 
   239   000FDF                     INDF2           equ	4063	;# 
   240   000FE0                     BSR             equ	4064	;# 
   241   000FE1                     FSR1            equ	4065	;# 
   242   000FE1                     FSR1L           equ	4065	;# 
   243   000FE2                     FSR1H           equ	4066	;# 
   244   000FE3                     PLUSW1          equ	4067	;# 
   245   000FE4                     PREINC1         equ	4068	;# 
   246   000FE5                     POSTDEC1        equ	4069	;# 
   247   000FE6                     POSTINC1        equ	4070	;# 
   248   000FE7                     INDF1           equ	4071	;# 
   249   000FE8                     WREG            equ	4072	;# 
   250   000FE9                     FSR0            equ	4073	;# 
   251   000FE9                     FSR0L           equ	4073	;# 
   252   000FEA                     FSR0H           equ	4074	;# 
   253   000FEB                     PLUSW0          equ	4075	;# 
   254   000FEC                     PREINC0         equ	4076	;# 
   255   000FED                     POSTDEC0        equ	4077	;# 
   256   000FEE                     POSTINC0        equ	4078	;# 
   257   000FEF                     INDF0           equ	4079	;# 
   258   000FF0                     INTCON3         equ	4080	;# 
   259   000FF1                     INTCON2         equ	4081	;# 
   260   000FF2                     INTCON          equ	4082	;# 
   261   000FF3                     PROD            equ	4083	;# 
   262   000FF3                     PRODL           equ	4083	;# 
   263   000FF4                     PRODH           equ	4084	;# 
   264   000FF5                     TABLAT          equ	4085	;# 
   265   000FF6                     TBLPTR          equ	4086	;# 
   266   000FF6                     TBLPTRL         equ	4086	;# 
   267   000FF7                     TBLPTRH         equ	4087	;# 
   268   000FF8                     TBLPTRU         equ	4088	;# 
   269   000FF9                     PCLAT           equ	4089	;# 
   270   000FF9                     PC              equ	4089	;# 
   271   000FF9                     PCL             equ	4089	;# 
   272   000FFA                     PCLATH          equ	4090	;# 
   273   000FFB                     PCLATU          equ	4091	;# 
   274   000FFC                     STKPTR          equ	4092	;# 
   275   000FFD                     TOS             equ	4093	;# 
   276   000FFD                     TOSL            equ	4093	;# 
   277   000FFE                     TOSH            equ	4094	;# 
   278   000FFF                     TOSU            equ	4095	;# 
   279   000F77                     SSPMSK          equ	3959	;# 
   280   000F78                     SLRCON          equ	3960	;# 
   281   000F79                     CM2CON1         equ	3961	;# 
   282   000F7A                     CM2CON0         equ	3962	;# 
   283   000F7B                     CM1CON0         equ	3963	;# 
   284   000F7C                     WPUB            equ	3964	;# 
   285   000F7D                     IOCB            equ	3965	;# 
   286   000F7E                     ANSEL           equ	3966	;# 
   287   000F7F                     ANSELH          equ	3967	;# 
   288   000F80                     PORTA           equ	3968	;# 
   289   000F81                     PORTB           equ	3969	;# 
   290   000F82                     PORTC           equ	3970	;# 
   291   000F83                     PORTD           equ	3971	;# 
   292   000F84                     PORTE           equ	3972	;# 
   293   000F89                     LATA            equ	3977	;# 
   294   000F8A                     LATB            equ	3978	;# 
   295   000F8B                     LATC            equ	3979	;# 
   296   000F8C                     LATD            equ	3980	;# 
   297   000F8D                     LATE            equ	3981	;# 
   298   000F92                     TRISA           equ	3986	;# 
   299   000F92                     DDRA            equ	3986	;# 
   300   000F93                     TRISB           equ	3987	;# 
   301   000F93                     DDRB            equ	3987	;# 
   302   000F94                     TRISC           equ	3988	;# 
   303   000F94                     DDRC            equ	3988	;# 
   304   000F95                     TRISD           equ	3989	;# 
   305   000F95                     DDRD            equ	3989	;# 
   306   000F96                     TRISE           equ	3990	;# 
   307   000F96                     DDRE            equ	3990	;# 
   308   000F9B                     OSCTUNE         equ	3995	;# 
   309   000F9D                     PIE1            equ	3997	;# 
   310   000F9E                     PIR1            equ	3998	;# 
   311   000F9F                     IPR1            equ	3999	;# 
   312   000FA0                     PIE2            equ	4000	;# 
   313   000FA1                     PIR2            equ	4001	;# 
   314   000FA2                     IPR2            equ	4002	;# 
   315   000FA6                     EECON1          equ	4006	;# 
   316   000FA7                     EECON2          equ	4007	;# 
   317   000FA8                     EEDATA          equ	4008	;# 
   318   000FA9                     EEADR           equ	4009	;# 
   319   000FAA                     EEADRH          equ	4010	;# 
   320   000FAB                     RCSTA           equ	4011	;# 
   321   000FAB                     RCSTA1          equ	4011	;# 
   322   000FAC                     TXSTA           equ	4012	;# 
   323   000FAC                     TXSTA1          equ	4012	;# 
   324   000FAD                     TXREG           equ	4013	;# 
   325   000FAD                     TXREG1          equ	4013	;# 
   326   000FAE                     RCREG           equ	4014	;# 
   327   000FAE                     RCREG1          equ	4014	;# 
   328   000FAF                     SPBRG           equ	4015	;# 
   329   000FAF                     SPBRG1          equ	4015	;# 
   330   000FB0                     SPBRGH          equ	4016	;# 
   331   000FB1                     T3CON           equ	4017	;# 
   332   000FB2                     TMR3            equ	4018	;# 
   333   000FB2                     TMR3L           equ	4018	;# 
   334   000FB3                     TMR3H           equ	4019	;# 
   335   000FB4                     CVRCON2         equ	4020	;# 
   336   000FB5                     CVRCON          equ	4021	;# 
   337   000FB6                     ECCP1AS         equ	4022	;# 
   338   000FB7                     PWM1CON         equ	4023	;# 
   339   000FB8                     BAUDCON         equ	4024	;# 
   340   000FB8                     BAUDCTL         equ	4024	;# 
   341   000FB9                     PSTRCON         equ	4025	;# 
   342   000FBA                     CCP2CON         equ	4026	;# 
   343   000FBB                     CCPR2           equ	4027	;# 
   344   000FBB                     CCPR2L          equ	4027	;# 
   345   000FBC                     CCPR2H          equ	4028	;# 
   346   000FBD                     CCP1CON         equ	4029	;# 
   347   000FBE                     CCPR1           equ	4030	;# 
   348   000FBE                     CCPR1L          equ	4030	;# 
   349   000FBF                     CCPR1H          equ	4031	;# 
   350   000FC0                     ADCON2          equ	4032	;# 
   351   000FC1                     ADCON1          equ	4033	;# 
   352   000FC2                     ADCON0          equ	4034	;# 
   353   000FC3                     ADRES           equ	4035	;# 
   354   000FC3                     ADRESL          equ	4035	;# 
   355   000FC4                     ADRESH          equ	4036	;# 
   356   000FC5                     SSPCON2         equ	4037	;# 
   357   000FC6                     SSPCON1         equ	4038	;# 
   358   000FC7                     SSPSTAT         equ	4039	;# 
   359   000FC8                     SSPADD          equ	4040	;# 
   360   000FC9                     SSPBUF          equ	4041	;# 
   361   000FCA                     T2CON           equ	4042	;# 
   362   000FCB                     PR2             equ	4043	;# 
   363   000FCB                     MEMCON          equ	4043	;# 
   364   000FCC                     TMR2            equ	4044	;# 
   365   000FCD                     T1CON           equ	4045	;# 
   366   000FCE                     TMR1            equ	4046	;# 
   367   000FCE                     TMR1L           equ	4046	;# 
   368   000FCF                     TMR1H           equ	4047	;# 
   369   000FD0                     RCON            equ	4048	;# 
   370   000FD1                     WDTCON          equ	4049	;# 
   371   000FD2                     HLVDCON         equ	4050	;# 
   372   000FD2                     LVDCON          equ	4050	;# 
   373   000FD3                     OSCCON          equ	4051	;# 
   374   000FD5                     T0CON           equ	4053	;# 
   375   000FD6                     TMR0            equ	4054	;# 
   376   000FD6                     TMR0L           equ	4054	;# 
   377   000FD7                     TMR0H           equ	4055	;# 
   378   000FD8                     STATUS          equ	4056	;# 
   379   000FD9                     FSR2            equ	4057	;# 
   380   000FD9                     FSR2L           equ	4057	;# 
   381   000FDA                     FSR2H           equ	4058	;# 
   382   000FDB                     PLUSW2          equ	4059	;# 
   383   000FDC                     PREINC2         equ	4060	;# 
   384   000FDD                     POSTDEC2        equ	4061	;# 
   385   000FDE                     POSTINC2        equ	4062	;# 
   386   000FDF                     INDF2           equ	4063	;# 
   387   000FE0                     BSR             equ	4064	;# 
   388   000FE1                     FSR1            equ	4065	;# 
   389   000FE1                     FSR1L           equ	4065	;# 
   390   000FE2                     FSR1H           equ	4066	;# 
   391   000FE3                     PLUSW1          equ	4067	;# 
   392   000FE4                     PREINC1         equ	4068	;# 
   393   000FE5                     POSTDEC1        equ	4069	;# 
   394   000FE6                     POSTINC1        equ	4070	;# 
   395   000FE7                     INDF1           equ	4071	;# 
   396   000FE8                     WREG            equ	4072	;# 
   397   000FE9                     FSR0            equ	4073	;# 
   398   000FE9                     FSR0L           equ	4073	;# 
   399   000FEA                     FSR0H           equ	4074	;# 
   400   000FEB                     PLUSW0          equ	4075	;# 
   401   000FEC                     PREINC0         equ	4076	;# 
   402   000FED                     POSTDEC0        equ	4077	;# 
   403   000FEE                     POSTINC0        equ	4078	;# 
   404   000FEF                     INDF0           equ	4079	;# 
   405   000FF0                     INTCON3         equ	4080	;# 
   406   000FF1                     INTCON2         equ	4081	;# 
   407   000FF2                     INTCON          equ	4082	;# 
   408   000FF3                     PROD            equ	4083	;# 
   409   000FF3                     PRODL           equ	4083	;# 
   410   000FF4                     PRODH           equ	4084	;# 
   411   000FF5                     TABLAT          equ	4085	;# 
   412   000FF6                     TBLPTR          equ	4086	;# 
   413   000FF6                     TBLPTRL         equ	4086	;# 
   414   000FF7                     TBLPTRH         equ	4087	;# 
   415   000FF8                     TBLPTRU         equ	4088	;# 
   416   000FF9                     PCLAT           equ	4089	;# 
   417   000FF9                     PC              equ	4089	;# 
   418   000FF9                     PCL             equ	4089	;# 
   419   000FFA                     PCLATH          equ	4090	;# 
   420   000FFB                     PCLATU          equ	4091	;# 
   421   000FFC                     STKPTR          equ	4092	;# 
   422   000FFD                     TOS             equ	4093	;# 
   423   000FFD                     TOSL            equ	4093	;# 
   424   000FFE                     TOSH            equ	4094	;# 
   425   000FFF                     TOSU            equ	4095	;# 
   426   000F77                     SSPMSK          equ	3959	;# 
   427   000F78                     SLRCON          equ	3960	;# 
   428   000F79                     CM2CON1         equ	3961	;# 
   429   000F7A                     CM2CON0         equ	3962	;# 
   430   000F7B                     CM1CON0         equ	3963	;# 
   431   000F7C                     WPUB            equ	3964	;# 
   432   000F7D                     IOCB            equ	3965	;# 
   433   000F7E                     ANSEL           equ	3966	;# 
   434   000F7F                     ANSELH          equ	3967	;# 
   435   000F80                     PORTA           equ	3968	;# 
   436   000F81                     PORTB           equ	3969	;# 
   437   000F82                     PORTC           equ	3970	;# 
   438   000F83                     PORTD           equ	3971	;# 
   439   000F84                     PORTE           equ	3972	;# 
   440   000F89                     LATA            equ	3977	;# 
   441   000F8A                     LATB            equ	3978	;# 
   442   000F8B                     LATC            equ	3979	;# 
   443   000F8C                     LATD            equ	3980	;# 
   444   000F8D                     LATE            equ	3981	;# 
   445   000F92                     TRISA           equ	3986	;# 
   446   000F92                     DDRA            equ	3986	;# 
   447   000F93                     TRISB           equ	3987	;# 
   448   000F93                     DDRB            equ	3987	;# 
   449   000F94                     TRISC           equ	3988	;# 
   450   000F94                     DDRC            equ	3988	;# 
   451   000F95                     TRISD           equ	3989	;# 
   452   000F95                     DDRD            equ	3989	;# 
   453   000F96                     TRISE           equ	3990	;# 
   454   000F96                     DDRE            equ	3990	;# 
   455   000F9B                     OSCTUNE         equ	3995	;# 
   456   000F9D                     PIE1            equ	3997	;# 
   457   000F9E                     PIR1            equ	3998	;# 
   458   000F9F                     IPR1            equ	3999	;# 
   459   000FA0                     PIE2            equ	4000	;# 
   460   000FA1                     PIR2            equ	4001	;# 
   461   000FA2                     IPR2            equ	4002	;# 
   462   000FA6                     EECON1          equ	4006	;# 
   463   000FA7                     EECON2          equ	4007	;# 
   464   000FA8                     EEDATA          equ	4008	;# 
   465   000FA9                     EEADR           equ	4009	;# 
   466   000FAA                     EEADRH          equ	4010	;# 
   467   000FAB                     RCSTA           equ	4011	;# 
   468   000FAB                     RCSTA1          equ	4011	;# 
   469   000FAC                     TXSTA           equ	4012	;# 
   470   000FAC                     TXSTA1          equ	4012	;# 
   471   000FAD                     TXREG           equ	4013	;# 
   472   000FAD                     TXREG1          equ	4013	;# 
   473   000FAE                     RCREG           equ	4014	;# 
   474   000FAE                     RCREG1          equ	4014	;# 
   475   000FAF                     SPBRG           equ	4015	;# 
   476   000FAF                     SPBRG1          equ	4015	;# 
   477   000FB0                     SPBRGH          equ	4016	;# 
   478   000FB1                     T3CON           equ	4017	;# 
   479   000FB2                     TMR3            equ	4018	;# 
   480   000FB2                     TMR3L           equ	4018	;# 
   481   000FB3                     TMR3H           equ	4019	;# 
   482   000FB4                     CVRCON2         equ	4020	;# 
   483   000FB5                     CVRCON          equ	4021	;# 
   484   000FB6                     ECCP1AS         equ	4022	;# 
   485   000FB7                     PWM1CON         equ	4023	;# 
   486   000FB8                     BAUDCON         equ	4024	;# 
   487   000FB8                     BAUDCTL         equ	4024	;# 
   488   000FB9                     PSTRCON         equ	4025	;# 
   489   000FBA                     CCP2CON         equ	4026	;# 
   490   000FBB                     CCPR2           equ	4027	;# 
   491   000FBB                     CCPR2L          equ	4027	;# 
   492   000FBC                     CCPR2H          equ	4028	;# 
   493   000FBD                     CCP1CON         equ	4029	;# 
   494   000FBE                     CCPR1           equ	4030	;# 
   495   000FBE                     CCPR1L          equ	4030	;# 
   496   000FBF                     CCPR1H          equ	4031	;# 
   497   000FC0                     ADCON2          equ	4032	;# 
   498   000FC1                     ADCON1          equ	4033	;# 
   499   000FC2                     ADCON0          equ	4034	;# 
   500   000FC3                     ADRES           equ	4035	;# 
   501   000FC3                     ADRESL          equ	4035	;# 
   502   000FC4                     ADRESH          equ	4036	;# 
   503   000FC5                     SSPCON2         equ	4037	;# 
   504   000FC6                     SSPCON1         equ	4038	;# 
   505   000FC7                     SSPSTAT         equ	4039	;# 
   506   000FC8                     SSPADD          equ	4040	;# 
   507   000FC9                     SSPBUF          equ	4041	;# 
   508   000FCA                     T2CON           equ	4042	;# 
   509   000FCB                     PR2             equ	4043	;# 
   510   000FCB                     MEMCON          equ	4043	;# 
   511   000FCC                     TMR2            equ	4044	;# 
   512   000FCD                     T1CON           equ	4045	;# 
   513   000FCE                     TMR1            equ	4046	;# 
   514   000FCE                     TMR1L           equ	4046	;# 
   515   000FCF                     TMR1H           equ	4047	;# 
   516   000FD0                     RCON            equ	4048	;# 
   517   000FD1                     WDTCON          equ	4049	;# 
   518   000FD2                     HLVDCON         equ	4050	;# 
   519   000FD2                     LVDCON          equ	4050	;# 
   520   000FD3                     OSCCON          equ	4051	;# 
   521   000FD5                     T0CON           equ	4053	;# 
   522   000FD6                     TMR0            equ	4054	;# 
   523   000FD6                     TMR0L           equ	4054	;# 
   524   000FD7                     TMR0H           equ	4055	;# 
   525   000FD8                     STATUS          equ	4056	;# 
   526   000FD9                     FSR2            equ	4057	;# 
   527   000FD9                     FSR2L           equ	4057	;# 
   528   000FDA                     FSR2H           equ	4058	;# 
   529   000FDB                     PLUSW2          equ	4059	;# 
   530   000FDC                     PREINC2         equ	4060	;# 
   531   000FDD                     POSTDEC2        equ	4061	;# 
   532   000FDE                     POSTINC2        equ	4062	;# 
   533   000FDF                     INDF2           equ	4063	;# 
   534   000FE0                     BSR             equ	4064	;# 
   535   000FE1                     FSR1            equ	4065	;# 
   536   000FE1                     FSR1L           equ	4065	;# 
   537   000FE2                     FSR1H           equ	4066	;# 
   538   000FE3                     PLUSW1          equ	4067	;# 
   539   000FE4                     PREINC1         equ	4068	;# 
   540   000FE5                     POSTDEC1        equ	4069	;# 
   541   000FE6                     POSTINC1        equ	4070	;# 
   542   000FE7                     INDF1           equ	4071	;# 
   543   000FE8                     WREG            equ	4072	;# 
   544   000FE9                     FSR0            equ	4073	;# 
   545   000FE9                     FSR0L           equ	4073	;# 
   546   000FEA                     FSR0H           equ	4074	;# 
   547   000FEB                     PLUSW0          equ	4075	;# 
   548   000FEC                     PREINC0         equ	4076	;# 
   549   000FED                     POSTDEC0        equ	4077	;# 
   550   000FEE                     POSTINC0        equ	4078	;# 
   551   000FEF                     INDF0           equ	4079	;# 
   552   000FF0                     INTCON3         equ	4080	;# 
   553   000FF1                     INTCON2         equ	4081	;# 
   554   000FF2                     INTCON          equ	4082	;# 
   555   000FF3                     PROD            equ	4083	;# 
   556   000FF3                     PRODL           equ	4083	;# 
   557   000FF4                     PRODH           equ	4084	;# 
   558   000FF5                     TABLAT          equ	4085	;# 
   559   000FF6                     TBLPTR          equ	4086	;# 
   560   000FF6                     TBLPTRL         equ	4086	;# 
   561   000FF7                     TBLPTRH         equ	4087	;# 
   562   000FF8                     TBLPTRU         equ	4088	;# 
   563   000FF9                     PCLAT           equ	4089	;# 
   564   000FF9                     PC              equ	4089	;# 
   565   000FF9                     PCL             equ	4089	;# 
   566   000FFA                     PCLATH          equ	4090	;# 
   567   000FFB                     PCLATU          equ	4091	;# 
   568   000FFC                     STKPTR          equ	4092	;# 
   569   000FFD                     TOS             equ	4093	;# 
   570   000FFD                     TOSL            equ	4093	;# 
   571   000FFE                     TOSH            equ	4094	;# 
   572   000FFF                     TOSU            equ	4095	;# 
   573   000F77                     SSPMSK          equ	3959	;# 
   574   000F78                     SLRCON          equ	3960	;# 
   575   000F79                     CM2CON1         equ	3961	;# 
   576   000F7A                     CM2CON0         equ	3962	;# 
   577   000F7B                     CM1CON0         equ	3963	;# 
   578   000F7C                     WPUB            equ	3964	;# 
   579   000F7D                     IOCB            equ	3965	;# 
   580   000F7E                     ANSEL           equ	3966	;# 
   581   000F7F                     ANSELH          equ	3967	;# 
   582   000F80                     PORTA           equ	3968	;# 
   583   000F81                     PORTB           equ	3969	;# 
   584   000F82                     PORTC           equ	3970	;# 
   585   000F83                     PORTD           equ	3971	;# 
   586   000F84                     PORTE           equ	3972	;# 
   587   000F89                     LATA            equ	3977	;# 
   588   000F8A                     LATB            equ	3978	;# 
   589   000F8B                     LATC            equ	3979	;# 
   590   000F8C                     LATD            equ	3980	;# 
   591   000F8D                     LATE            equ	3981	;# 
   592   000F92                     TRISA           equ	3986	;# 
   593   000F92                     DDRA            equ	3986	;# 
   594   000F93                     TRISB           equ	3987	;# 
   595   000F93                     DDRB            equ	3987	;# 
   596   000F94                     TRISC           equ	3988	;# 
   597   000F94                     DDRC            equ	3988	;# 
   598   000F95                     TRISD           equ	3989	;# 
   599   000F95                     DDRD            equ	3989	;# 
   600   000F96                     TRISE           equ	3990	;# 
   601   000F96                     DDRE            equ	3990	;# 
   602   000F9B                     OSCTUNE         equ	3995	;# 
   603   000F9D                     PIE1            equ	3997	;# 
   604   000F9E                     PIR1            equ	3998	;# 
   605   000F9F                     IPR1            equ	3999	;# 
   606   000FA0                     PIE2            equ	4000	;# 
   607   000FA1                     PIR2            equ	4001	;# 
   608   000FA2                     IPR2            equ	4002	;# 
   609   000FA6                     EECON1          equ	4006	;# 
   610   000FA7                     EECON2          equ	4007	;# 
   611   000FA8                     EEDATA          equ	4008	;# 
   612   000FA9                     EEADR           equ	4009	;# 
   613   000FAA                     EEADRH          equ	4010	;# 
   614   000FAB                     RCSTA           equ	4011	;# 
   615   000FAB                     RCSTA1          equ	4011	;# 
   616   000FAC                     TXSTA           equ	4012	;# 
   617   000FAC                     TXSTA1          equ	4012	;# 
   618   000FAD                     TXREG           equ	4013	;# 
   619   000FAD                     TXREG1          equ	4013	;# 
   620   000FAE                     RCREG           equ	4014	;# 
   621   000FAE                     RCREG1          equ	4014	;# 
   622   000FAF                     SPBRG           equ	4015	;# 
   623   000FAF                     SPBRG1          equ	4015	;# 
   624   000FB0                     SPBRGH          equ	4016	;# 
   625   000FB1                     T3CON           equ	4017	;# 
   626   000FB2                     TMR3            equ	4018	;# 
   627   000FB2                     TMR3L           equ	4018	;# 
   628   000FB3                     TMR3H           equ	4019	;# 
   629   000FB4                     CVRCON2         equ	4020	;# 
   630   000FB5                     CVRCON          equ	4021	;# 
   631   000FB6                     ECCP1AS         equ	4022	;# 
   632   000FB7                     PWM1CON         equ	4023	;# 
   633   000FB8                     BAUDCON         equ	4024	;# 
   634   000FB8                     BAUDCTL         equ	4024	;# 
   635   000FB9                     PSTRCON         equ	4025	;# 
   636   000FBA                     CCP2CON         equ	4026	;# 
   637   000FBB                     CCPR2           equ	4027	;# 
   638   000FBB                     CCPR2L          equ	4027	;# 
   639   000FBC                     CCPR2H          equ	4028	;# 
   640   000FBD                     CCP1CON         equ	4029	;# 
   641   000FBE                     CCPR1           equ	4030	;# 
   642   000FBE                     CCPR1L          equ	4030	;# 
   643   000FBF                     CCPR1H          equ	4031	;# 
   644   000FC0                     ADCON2          equ	4032	;# 
   645   000FC1                     ADCON1          equ	4033	;# 
   646   000FC2                     ADCON0          equ	4034	;# 
   647   000FC3                     ADRES           equ	4035	;# 
   648   000FC3                     ADRESL          equ	4035	;# 
   649   000FC4                     ADRESH          equ	4036	;# 
   650   000FC5                     SSPCON2         equ	4037	;# 
   651   000FC6                     SSPCON1         equ	4038	;# 
   652   000FC7                     SSPSTAT         equ	4039	;# 
   653   000FC8                     SSPADD          equ	4040	;# 
   654   000FC9                     SSPBUF          equ	4041	;# 
   655   000FCA                     T2CON           equ	4042	;# 
   656   000FCB                     PR2             equ	4043	;# 
   657   000FCB                     MEMCON          equ	4043	;# 
   658   000FCC                     TMR2            equ	4044	;# 
   659   000FCD                     T1CON           equ	4045	;# 
   660   000FCE                     TMR1            equ	4046	;# 
   661   000FCE                     TMR1L           equ	4046	;# 
   662   000FCF                     TMR1H           equ	4047	;# 
   663   000FD0                     RCON            equ	4048	;# 
   664   000FD1                     WDTCON          equ	4049	;# 
   665   000FD2                     HLVDCON         equ	4050	;# 
   666   000FD2                     LVDCON          equ	4050	;# 
   667   000FD3                     OSCCON          equ	4051	;# 
   668   000FD5                     T0CON           equ	4053	;# 
   669   000FD6                     TMR0            equ	4054	;# 
   670   000FD6                     TMR0L           equ	4054	;# 
   671   000FD7                     TMR0H           equ	4055	;# 
   672   000FD8                     STATUS          equ	4056	;# 
   673   000FD9                     FSR2            equ	4057	;# 
   674   000FD9                     FSR2L           equ	4057	;# 
   675   000FDA                     FSR2H           equ	4058	;# 
   676   000FDB                     PLUSW2          equ	4059	;# 
   677   000FDC                     PREINC2         equ	4060	;# 
   678   000FDD                     POSTDEC2        equ	4061	;# 
   679   000FDE                     POSTINC2        equ	4062	;# 
   680   000FDF                     INDF2           equ	4063	;# 
   681   000FE0                     BSR             equ	4064	;# 
   682   000FE1                     FSR1            equ	4065	;# 
   683   000FE1                     FSR1L           equ	4065	;# 
   684   000FE2                     FSR1H           equ	4066	;# 
   685   000FE3                     PLUSW1          equ	4067	;# 
   686   000FE4                     PREINC1         equ	4068	;# 
   687   000FE5                     POSTDEC1        equ	4069	;# 
   688   000FE6                     POSTINC1        equ	4070	;# 
   689   000FE7                     INDF1           equ	4071	;# 
   690   000FE8                     WREG            equ	4072	;# 
   691   000FE9                     FSR0            equ	4073	;# 
   692   000FE9                     FSR0L           equ	4073	;# 
   693   000FEA                     FSR0H           equ	4074	;# 
   694   000FEB                     PLUSW0          equ	4075	;# 
   695   000FEC                     PREINC0         equ	4076	;# 
   696   000FED                     POSTDEC0        equ	4077	;# 
   697   000FEE                     POSTINC0        equ	4078	;# 
   698   000FEF                     INDF0           equ	4079	;# 
   699   000FF0                     INTCON3         equ	4080	;# 
   700   000FF1                     INTCON2         equ	4081	;# 
   701   000FF2                     INTCON          equ	4082	;# 
   702   000FF3                     PROD            equ	4083	;# 
   703   000FF3                     PRODL           equ	4083	;# 
   704   000FF4                     PRODH           equ	4084	;# 
   705   000FF5                     TABLAT          equ	4085	;# 
   706   000FF6                     TBLPTR          equ	4086	;# 
   707   000FF6                     TBLPTRL         equ	4086	;# 
   708   000FF7                     TBLPTRH         equ	4087	;# 
   709   000FF8                     TBLPTRU         equ	4088	;# 
   710   000FF9                     PCLAT           equ	4089	;# 
   711   000FF9                     PC              equ	4089	;# 
   712   000FF9                     PCL             equ	4089	;# 
   713   000FFA                     PCLATH          equ	4090	;# 
   714   000FFB                     PCLATU          equ	4091	;# 
   715   000FFC                     STKPTR          equ	4092	;# 
   716   000FFD                     TOS             equ	4093	;# 
   717   000FFD                     TOSL            equ	4093	;# 
   718   000FFE                     TOSH            equ	4094	;# 
   719   000FFF                     TOSU            equ	4095	;# 
   720   000F77                     SSPMSK          equ	3959	;# 
   721   000F78                     SLRCON          equ	3960	;# 
   722   000F79                     CM2CON1         equ	3961	;# 
   723   000F7A                     CM2CON0         equ	3962	;# 
   724   000F7B                     CM1CON0         equ	3963	;# 
   725   000F7C                     WPUB            equ	3964	;# 
   726   000F7D                     IOCB            equ	3965	;# 
   727   000F7E                     ANSEL           equ	3966	;# 
   728   000F7F                     ANSELH          equ	3967	;# 
   729   000F80                     PORTA           equ	3968	;# 
   730   000F81                     PORTB           equ	3969	;# 
   731   000F82                     PORTC           equ	3970	;# 
   732   000F83                     PORTD           equ	3971	;# 
   733   000F84                     PORTE           equ	3972	;# 
   734   000F89                     LATA            equ	3977	;# 
   735   000F8A                     LATB            equ	3978	;# 
   736   000F8B                     LATC            equ	3979	;# 
   737   000F8C                     LATD            equ	3980	;# 
   738   000F8D                     LATE            equ	3981	;# 
   739   000F92                     TRISA           equ	3986	;# 
   740   000F92                     DDRA            equ	3986	;# 
   741   000F93                     TRISB           equ	3987	;# 
   742   000F93                     DDRB            equ	3987	;# 
   743   000F94                     TRISC           equ	3988	;# 
   744   000F94                     DDRC            equ	3988	;# 
   745   000F95                     TRISD           equ	3989	;# 
   746   000F95                     DDRD            equ	3989	;# 
   747   000F96                     TRISE           equ	3990	;# 
   748   000F96                     DDRE            equ	3990	;# 
   749   000F9B                     OSCTUNE         equ	3995	;# 
   750   000F9D                     PIE1            equ	3997	;# 
   751   000F9E                     PIR1            equ	3998	;# 
   752   000F9F                     IPR1            equ	3999	;# 
   753   000FA0                     PIE2            equ	4000	;# 
   754   000FA1                     PIR2            equ	4001	;# 
   755   000FA2                     IPR2            equ	4002	;# 
   756   000FA6                     EECON1          equ	4006	;# 
   757   000FA7                     EECON2          equ	4007	;# 
   758   000FA8                     EEDATA          equ	4008	;# 
   759   000FA9                     EEADR           equ	4009	;# 
   760   000FAA                     EEADRH          equ	4010	;# 
   761   000FAB                     RCSTA           equ	4011	;# 
   762   000FAB                     RCSTA1          equ	4011	;# 
   763   000FAC                     TXSTA           equ	4012	;# 
   764   000FAC                     TXSTA1          equ	4012	;# 
   765   000FAD                     TXREG           equ	4013	;# 
   766   000FAD                     TXREG1          equ	4013	;# 
   767   000FAE                     RCREG           equ	4014	;# 
   768   000FAE                     RCREG1          equ	4014	;# 
   769   000FAF                     SPBRG           equ	4015	;# 
   770   000FAF                     SPBRG1          equ	4015	;# 
   771   000FB0                     SPBRGH          equ	4016	;# 
   772   000FB1                     T3CON           equ	4017	;# 
   773   000FB2                     TMR3            equ	4018	;# 
   774   000FB2                     TMR3L           equ	4018	;# 
   775   000FB3                     TMR3H           equ	4019	;# 
   776   000FB4                     CVRCON2         equ	4020	;# 
   777   000FB5                     CVRCON          equ	4021	;# 
   778   000FB6                     ECCP1AS         equ	4022	;# 
   779   000FB7                     PWM1CON         equ	4023	;# 
   780   000FB8                     BAUDCON         equ	4024	;# 
   781   000FB8                     BAUDCTL         equ	4024	;# 
   782   000FB9                     PSTRCON         equ	4025	;# 
   783   000FBA                     CCP2CON         equ	4026	;# 
   784   000FBB                     CCPR2           equ	4027	;# 
   785   000FBB                     CCPR2L          equ	4027	;# 
   786   000FBC                     CCPR2H          equ	4028	;# 
   787   000FBD                     CCP1CON         equ	4029	;# 
   788   000FBE                     CCPR1           equ	4030	;# 
   789   000FBE                     CCPR1L          equ	4030	;# 
   790   000FBF                     CCPR1H          equ	4031	;# 
   791   000FC0                     ADCON2          equ	4032	;# 
   792   000FC1                     ADCON1          equ	4033	;# 
   793   000FC2                     ADCON0          equ	4034	;# 
   794   000FC3                     ADRES           equ	4035	;# 
   795   000FC3                     ADRESL          equ	4035	;# 
   796   000FC4                     ADRESH          equ	4036	;# 
   797   000FC5                     SSPCON2         equ	4037	;# 
   798   000FC6                     SSPCON1         equ	4038	;# 
   799   000FC7                     SSPSTAT         equ	4039	;# 
   800   000FC8                     SSPADD          equ	4040	;# 
   801   000FC9                     SSPBUF          equ	4041	;# 
   802   000FCA                     T2CON           equ	4042	;# 
   803   000FCB                     PR2             equ	4043	;# 
   804   000FCB                     MEMCON          equ	4043	;# 
   805   000FCC                     TMR2            equ	4044	;# 
   806   000FCD                     T1CON           equ	4045	;# 
   807   000FCE                     TMR1            equ	4046	;# 
   808   000FCE                     TMR1L           equ	4046	;# 
   809   000FCF                     TMR1H           equ	4047	;# 
   810   000FD0                     RCON            equ	4048	;# 
   811   000FD1                     WDTCON          equ	4049	;# 
   812   000FD2                     HLVDCON         equ	4050	;# 
   813   000FD2                     LVDCON          equ	4050	;# 
   814   000FD3                     OSCCON          equ	4051	;# 
   815   000FD5                     T0CON           equ	4053	;# 
   816   000FD6                     TMR0            equ	4054	;# 
   817   000FD6                     TMR0L           equ	4054	;# 
   818   000FD7                     TMR0H           equ	4055	;# 
   819   000FD8                     STATUS          equ	4056	;# 
   820   000FD9                     FSR2            equ	4057	;# 
   821   000FD9                     FSR2L           equ	4057	;# 
   822   000FDA                     FSR2H           equ	4058	;# 
   823   000FDB                     PLUSW2          equ	4059	;# 
   824   000FDC                     PREINC2         equ	4060	;# 
   825   000FDD                     POSTDEC2        equ	4061	;# 
   826   000FDE                     POSTINC2        equ	4062	;# 
   827   000FDF                     INDF2           equ	4063	;# 
   828   000FE0                     BSR             equ	4064	;# 
   829   000FE1                     FSR1            equ	4065	;# 
   830   000FE1                     FSR1L           equ	4065	;# 
   831   000FE2                     FSR1H           equ	4066	;# 
   832   000FE3                     PLUSW1          equ	4067	;# 
   833   000FE4                     PREINC1         equ	4068	;# 
   834   000FE5                     POSTDEC1        equ	4069	;# 
   835   000FE6                     POSTINC1        equ	4070	;# 
   836   000FE7                     INDF1           equ	4071	;# 
   837   000FE8                     WREG            equ	4072	;# 
   838   000FE9                     FSR0            equ	4073	;# 
   839   000FE9                     FSR0L           equ	4073	;# 
   840   000FEA                     FSR0H           equ	4074	;# 
   841   000FEB                     PLUSW0          equ	4075	;# 
   842   000FEC                     PREINC0         equ	4076	;# 
   843   000FED                     POSTDEC0        equ	4077	;# 
   844   000FEE                     POSTINC0        equ	4078	;# 
   845   000FEF                     INDF0           equ	4079	;# 
   846   000FF0                     INTCON3         equ	4080	;# 
   847   000FF1                     INTCON2         equ	4081	;# 
   848   000FF2                     INTCON          equ	4082	;# 
   849   000FF3                     PROD            equ	4083	;# 
   850   000FF3                     PRODL           equ	4083	;# 
   851   000FF4                     PRODH           equ	4084	;# 
   852   000FF5                     TABLAT          equ	4085	;# 
   853   000FF6                     TBLPTR          equ	4086	;# 
   854   000FF6                     TBLPTRL         equ	4086	;# 
   855   000FF7                     TBLPTRH         equ	4087	;# 
   856   000FF8                     TBLPTRU         equ	4088	;# 
   857   000FF9                     PCLAT           equ	4089	;# 
   858   000FF9                     PC              equ	4089	;# 
   859   000FF9                     PCL             equ	4089	;# 
   860   000FFA                     PCLATH          equ	4090	;# 
   861   000FFB                     PCLATU          equ	4091	;# 
   862   000FFC                     STKPTR          equ	4092	;# 
   863   000FFD                     TOS             equ	4093	;# 
   864   000FFD                     TOSL            equ	4093	;# 
   865   000FFE                     TOSH            equ	4094	;# 
   866   000FFF                     TOSU            equ	4095	;# 
   867   000F77                     SSPMSK          equ	3959	;# 
   868   000F78                     SLRCON          equ	3960	;# 
   869   000F79                     CM2CON1         equ	3961	;# 
   870   000F7A                     CM2CON0         equ	3962	;# 
   871   000F7B                     CM1CON0         equ	3963	;# 
   872   000F7C                     WPUB            equ	3964	;# 
   873   000F7D                     IOCB            equ	3965	;# 
   874   000F7E                     ANSEL           equ	3966	;# 
   875   000F7F                     ANSELH          equ	3967	;# 
   876   000F80                     PORTA           equ	3968	;# 
   877   000F81                     PORTB           equ	3969	;# 
   878   000F82                     PORTC           equ	3970	;# 
   879   000F83                     PORTD           equ	3971	;# 
   880   000F84                     PORTE           equ	3972	;# 
   881   000F89                     LATA            equ	3977	;# 
   882   000F8A                     LATB            equ	3978	;# 
   883   000F8B                     LATC            equ	3979	;# 
   884   000F8C                     LATD            equ	3980	;# 
   885   000F8D                     LATE            equ	3981	;# 
   886   000F92                     TRISA           equ	3986	;# 
   887   000F92                     DDRA            equ	3986	;# 
   888   000F93                     TRISB           equ	3987	;# 
   889   000F93                     DDRB            equ	3987	;# 
   890   000F94                     TRISC           equ	3988	;# 
   891   000F94                     DDRC            equ	3988	;# 
   892   000F95                     TRISD           equ	3989	;# 
   893   000F95                     DDRD            equ	3989	;# 
   894   000F96                     TRISE           equ	3990	;# 
   895   000F96                     DDRE            equ	3990	;# 
   896   000F9B                     OSCTUNE         equ	3995	;# 
   897   000F9D                     PIE1            equ	3997	;# 
   898   000F9E                     PIR1            equ	3998	;# 
   899   000F9F                     IPR1            equ	3999	;# 
   900   000FA0                     PIE2            equ	4000	;# 
   901   000FA1                     PIR2            equ	4001	;# 
   902   000FA2                     IPR2            equ	4002	;# 
   903   000FA6                     EECON1          equ	4006	;# 
   904   000FA7                     EECON2          equ	4007	;# 
   905   000FA8                     EEDATA          equ	4008	;# 
   906   000FA9                     EEADR           equ	4009	;# 
   907   000FAA                     EEADRH          equ	4010	;# 
   908   000FAB                     RCSTA           equ	4011	;# 
   909   000FAB                     RCSTA1          equ	4011	;# 
   910   000FAC                     TXSTA           equ	4012	;# 
   911   000FAC                     TXSTA1          equ	4012	;# 
   912   000FAD                     TXREG           equ	4013	;# 
   913   000FAD                     TXREG1          equ	4013	;# 
   914   000FAE                     RCREG           equ	4014	;# 
   915   000FAE                     RCREG1          equ	4014	;# 
   916   000FAF                     SPBRG           equ	4015	;# 
   917   000FAF                     SPBRG1          equ	4015	;# 
   918   000FB0                     SPBRGH          equ	4016	;# 
   919   000FB1                     T3CON           equ	4017	;# 
   920   000FB2                     TMR3            equ	4018	;# 
   921   000FB2                     TMR3L           equ	4018	;# 
   922   000FB3                     TMR3H           equ	4019	;# 
   923   000FB4                     CVRCON2         equ	4020	;# 
   924   000FB5                     CVRCON          equ	4021	;# 
   925   000FB6                     ECCP1AS         equ	4022	;# 
   926   000FB7                     PWM1CON         equ	4023	;# 
   927   000FB8                     BAUDCON         equ	4024	;# 
   928   000FB8                     BAUDCTL         equ	4024	;# 
   929   000FB9                     PSTRCON         equ	4025	;# 
   930   000FBA                     CCP2CON         equ	4026	;# 
   931   000FBB                     CCPR2           equ	4027	;# 
   932   000FBB                     CCPR2L          equ	4027	;# 
   933   000FBC                     CCPR2H          equ	4028	;# 
   934   000FBD                     CCP1CON         equ	4029	;# 
   935   000FBE                     CCPR1           equ	4030	;# 
   936   000FBE                     CCPR1L          equ	4030	;# 
   937   000FBF                     CCPR1H          equ	4031	;# 
   938   000FC0                     ADCON2          equ	4032	;# 
   939   000FC1                     ADCON1          equ	4033	;# 
   940   000FC2                     ADCON0          equ	4034	;# 
   941   000FC3                     ADRES           equ	4035	;# 
   942   000FC3                     ADRESL          equ	4035	;# 
   943   000FC4                     ADRESH          equ	4036	;# 
   944   000FC5                     SSPCON2         equ	4037	;# 
   945   000FC6                     SSPCON1         equ	4038	;# 
   946   000FC7                     SSPSTAT         equ	4039	;# 
   947   000FC8                     SSPADD          equ	4040	;# 
   948   000FC9                     SSPBUF          equ	4041	;# 
   949   000FCA                     T2CON           equ	4042	;# 
   950   000FCB                     PR2             equ	4043	;# 
   951   000FCB                     MEMCON          equ	4043	;# 
   952   000FCC                     TMR2            equ	4044	;# 
   953   000FCD                     T1CON           equ	4045	;# 
   954   000FCE                     TMR1            equ	4046	;# 
   955   000FCE                     TMR1L           equ	4046	;# 
   956   000FCF                     TMR1H           equ	4047	;# 
   957   000FD0                     RCON            equ	4048	;# 
   958   000FD1                     WDTCON          equ	4049	;# 
   959   000FD2                     HLVDCON         equ	4050	;# 
   960   000FD2                     LVDCON          equ	4050	;# 
   961   000FD3                     OSCCON          equ	4051	;# 
   962   000FD5                     T0CON           equ	4053	;# 
   963   000FD6                     TMR0            equ	4054	;# 
   964   000FD6                     TMR0L           equ	4054	;# 
   965   000FD7                     TMR0H           equ	4055	;# 
   966   000FD8                     STATUS          equ	4056	;# 
   967   000FD9                     FSR2            equ	4057	;# 
   968   000FD9                     FSR2L           equ	4057	;# 
   969   000FDA                     FSR2H           equ	4058	;# 
   970   000FDB                     PLUSW2          equ	4059	;# 
   971   000FDC                     PREINC2         equ	4060	;# 
   972   000FDD                     POSTDEC2        equ	4061	;# 
   973   000FDE                     POSTINC2        equ	4062	;# 
   974   000FDF                     INDF2           equ	4063	;# 
   975   000FE0                     BSR             equ	4064	;# 
   976   000FE1                     FSR1            equ	4065	;# 
   977   000FE1                     FSR1L           equ	4065	;# 
   978   000FE2                     FSR1H           equ	4066	;# 
   979   000FE3                     PLUSW1          equ	4067	;# 
   980   000FE4                     PREINC1         equ	4068	;# 
   981   000FE5                     POSTDEC1        equ	4069	;# 
   982   000FE6                     POSTINC1        equ	4070	;# 
   983   000FE7                     INDF1           equ	4071	;# 
   984   000FE8                     WREG            equ	4072	;# 
   985   000FE9                     FSR0            equ	4073	;# 
   986   000FE9                     FSR0L           equ	4073	;# 
   987   000FEA                     FSR0H           equ	4074	;# 
   988   000FEB                     PLUSW0          equ	4075	;# 
   989   000FEC                     PREINC0         equ	4076	;# 
   990   000FED                     POSTDEC0        equ	4077	;# 
   991   000FEE                     POSTINC0        equ	4078	;# 
   992   000FEF                     INDF0           equ	4079	;# 
   993   000FF0                     INTCON3         equ	4080	;# 
   994   000FF1                     INTCON2         equ	4081	;# 
   995   000FF2                     INTCON          equ	4082	;# 
   996   000FF3                     PROD            equ	4083	;# 
   997   000FF3                     PRODL           equ	4083	;# 
   998   000FF4                     PRODH           equ	4084	;# 
   999   000FF5                     TABLAT          equ	4085	;# 
  1000   000FF6                     TBLPTR          equ	4086	;# 
  1001   000FF6                     TBLPTRL         equ	4086	;# 
  1002   000FF7                     TBLPTRH         equ	4087	;# 
  1003   000FF8                     TBLPTRU         equ	4088	;# 
  1004   000FF9                     PCLAT           equ	4089	;# 
  1005   000FF9                     PC              equ	4089	;# 
  1006   000FF9                     PCL             equ	4089	;# 
  1007   000FFA                     PCLATH          equ	4090	;# 
  1008   000FFB                     PCLATU          equ	4091	;# 
  1009   000FFC                     STKPTR          equ	4092	;# 
  1010   000FFD                     TOS             equ	4093	;# 
  1011   000FFD                     TOSL            equ	4093	;# 
  1012   000FFE                     TOSH            equ	4094	;# 
  1013   000FFF                     TOSU            equ	4095	;# 
  1014   000F77                     SSPMSK          equ	3959	;# 
  1015   000F78                     SLRCON          equ	3960	;# 
  1016   000F79                     CM2CON1         equ	3961	;# 
  1017   000F7A                     CM2CON0         equ	3962	;# 
  1018   000F7B                     CM1CON0         equ	3963	;# 
  1019   000F7C                     WPUB            equ	3964	;# 
  1020   000F7D                     IOCB            equ	3965	;# 
  1021   000F7E                     ANSEL           equ	3966	;# 
  1022   000F7F                     ANSELH          equ	3967	;# 
  1023   000F80                     PORTA           equ	3968	;# 
  1024   000F81                     PORTB           equ	3969	;# 
  1025   000F82                     PORTC           equ	3970	;# 
  1026   000F83                     PORTD           equ	3971	;# 
  1027   000F84                     PORTE           equ	3972	;# 
  1028   000F89                     LATA            equ	3977	;# 
  1029   000F8A                     LATB            equ	3978	;# 
  1030   000F8B                     LATC            equ	3979	;# 
  1031   000F8C                     LATD            equ	3980	;# 
  1032   000F8D                     LATE            equ	3981	;# 
  1033   000F92                     TRISA           equ	3986	;# 
  1034   000F92                     DDRA            equ	3986	;# 
  1035   000F93                     TRISB           equ	3987	;# 
  1036   000F93                     DDRB            equ	3987	;# 
  1037   000F94                     TRISC           equ	3988	;# 
  1038   000F94                     DDRC            equ	3988	;# 
  1039   000F95                     TRISD           equ	3989	;# 
  1040   000F95                     DDRD            equ	3989	;# 
  1041   000F96                     TRISE           equ	3990	;# 
  1042   000F96                     DDRE            equ	3990	;# 
  1043   000F9B                     OSCTUNE         equ	3995	;# 
  1044   000F9D                     PIE1            equ	3997	;# 
  1045   000F9E                     PIR1            equ	3998	;# 
  1046   000F9F                     IPR1            equ	3999	;# 
  1047   000FA0                     PIE2            equ	4000	;# 
  1048   000FA1                     PIR2            equ	4001	;# 
  1049   000FA2                     IPR2            equ	4002	;# 
  1050   000FA6                     EECON1          equ	4006	;# 
  1051   000FA7                     EECON2          equ	4007	;# 
  1052   000FA8                     EEDATA          equ	4008	;# 
  1053   000FA9                     EEADR           equ	4009	;# 
  1054   000FAA                     EEADRH          equ	4010	;# 
  1055   000FAB                     RCSTA           equ	4011	;# 
  1056   000FAB                     RCSTA1          equ	4011	;# 
  1057   000FAC                     TXSTA           equ	4012	;# 
  1058   000FAC                     TXSTA1          equ	4012	;# 
  1059   000FAD                     TXREG           equ	4013	;# 
  1060   000FAD                     TXREG1          equ	4013	;# 
  1061   000FAE                     RCREG           equ	4014	;# 
  1062   000FAE                     RCREG1          equ	4014	;# 
  1063   000FAF                     SPBRG           equ	4015	;# 
  1064   000FAF                     SPBRG1          equ	4015	;# 
  1065   000FB0                     SPBRGH          equ	4016	;# 
  1066   000FB1                     T3CON           equ	4017	;# 
  1067   000FB2                     TMR3            equ	4018	;# 
  1068   000FB2                     TMR3L           equ	4018	;# 
  1069   000FB3                     TMR3H           equ	4019	;# 
  1070   000FB4                     CVRCON2         equ	4020	;# 
  1071   000FB5                     CVRCON          equ	4021	;# 
  1072   000FB6                     ECCP1AS         equ	4022	;# 
  1073   000FB7                     PWM1CON         equ	4023	;# 
  1074   000FB8                     BAUDCON         equ	4024	;# 
  1075   000FB8                     BAUDCTL         equ	4024	;# 
  1076   000FB9                     PSTRCON         equ	4025	;# 
  1077   000FBA                     CCP2CON         equ	4026	;# 
  1078   000FBB                     CCPR2           equ	4027	;# 
  1079   000FBB                     CCPR2L          equ	4027	;# 
  1080   000FBC                     CCPR2H          equ	4028	;# 
  1081   000FBD                     CCP1CON         equ	4029	;# 
  1082   000FBE                     CCPR1           equ	4030	;# 
  1083   000FBE                     CCPR1L          equ	4030	;# 
  1084   000FBF                     CCPR1H          equ	4031	;# 
  1085   000FC0                     ADCON2          equ	4032	;# 
  1086   000FC1                     ADCON1          equ	4033	;# 
  1087   000FC2                     ADCON0          equ	4034	;# 
  1088   000FC3                     ADRES           equ	4035	;# 
  1089   000FC3                     ADRESL          equ	4035	;# 
  1090   000FC4                     ADRESH          equ	4036	;# 
  1091   000FC5                     SSPCON2         equ	4037	;# 
  1092   000FC6                     SSPCON1         equ	4038	;# 
  1093   000FC7                     SSPSTAT         equ	4039	;# 
  1094   000FC8                     SSPADD          equ	4040	;# 
  1095   000FC9                     SSPBUF          equ	4041	;# 
  1096   000FCA                     T2CON           equ	4042	;# 
  1097   000FCB                     PR2             equ	4043	;# 
  1098   000FCB                     MEMCON          equ	4043	;# 
  1099   000FCC                     TMR2            equ	4044	;# 
  1100   000FCD                     T1CON           equ	4045	;# 
  1101   000FCE                     TMR1            equ	4046	;# 
  1102   000FCE                     TMR1L           equ	4046	;# 
  1103   000FCF                     TMR1H           equ	4047	;# 
  1104   000FD0                     RCON            equ	4048	;# 
  1105   000FD1                     WDTCON          equ	4049	;# 
  1106   000FD2                     HLVDCON         equ	4050	;# 
  1107   000FD2                     LVDCON          equ	4050	;# 
  1108   000FD3                     OSCCON          equ	4051	;# 
  1109   000FD5                     T0CON           equ	4053	;# 
  1110   000FD6                     TMR0            equ	4054	;# 
  1111   000FD6                     TMR0L           equ	4054	;# 
  1112   000FD7                     TMR0H           equ	4055	;# 
  1113   000FD8                     STATUS          equ	4056	;# 
  1114   000FD9                     FSR2            equ	4057	;# 
  1115   000FD9                     FSR2L           equ	4057	;# 
  1116   000FDA                     FSR2H           equ	4058	;# 
  1117   000FDB                     PLUSW2          equ	4059	;# 
  1118   000FDC                     PREINC2         equ	4060	;# 
  1119   000FDD                     POSTDEC2        equ	4061	;# 
  1120   000FDE                     POSTINC2        equ	4062	;# 
  1121   000FDF                     INDF2           equ	4063	;# 
  1122   000FE0                     BSR             equ	4064	;# 
  1123   000FE1                     FSR1            equ	4065	;# 
  1124   000FE1                     FSR1L           equ	4065	;# 
  1125   000FE2                     FSR1H           equ	4066	;# 
  1126   000FE3                     PLUSW1          equ	4067	;# 
  1127   000FE4                     PREINC1         equ	4068	;# 
  1128   000FE5                     POSTDEC1        equ	4069	;# 
  1129   000FE6                     POSTINC1        equ	4070	;# 
  1130   000FE7                     INDF1           equ	4071	;# 
  1131   000FE8                     WREG            equ	4072	;# 
  1132   000FE9                     FSR0            equ	4073	;# 
  1133   000FE9                     FSR0L           equ	4073	;# 
  1134   000FEA                     FSR0H           equ	4074	;# 
  1135   000FEB                     PLUSW0          equ	4075	;# 
  1136   000FEC                     PREINC0         equ	4076	;# 
  1137   000FED                     POSTDEC0        equ	4077	;# 
  1138   000FEE                     POSTINC0        equ	4078	;# 
  1139   000FEF                     INDF0           equ	4079	;# 
  1140   000FF0                     INTCON3         equ	4080	;# 
  1141   000FF1                     INTCON2         equ	4081	;# 
  1142   000FF2                     INTCON          equ	4082	;# 
  1143   000FF3                     PROD            equ	4083	;# 
  1144   000FF3                     PRODL           equ	4083	;# 
  1145   000FF4                     PRODH           equ	4084	;# 
  1146   000FF5                     TABLAT          equ	4085	;# 
  1147   000FF6                     TBLPTR          equ	4086	;# 
  1148   000FF6                     TBLPTRL         equ	4086	;# 
  1149   000FF7                     TBLPTRH         equ	4087	;# 
  1150   000FF8                     TBLPTRU         equ	4088	;# 
  1151   000FF9                     PCLAT           equ	4089	;# 
  1152   000FF9                     PC              equ	4089	;# 
  1153   000FF9                     PCL             equ	4089	;# 
  1154   000FFA                     PCLATH          equ	4090	;# 
  1155   000FFB                     PCLATU          equ	4091	;# 
  1156   000FFC                     STKPTR          equ	4092	;# 
  1157   000FFD                     TOS             equ	4093	;# 
  1158   000FFD                     TOSL            equ	4093	;# 
  1159   000FFE                     TOSH            equ	4094	;# 
  1160   000FFF                     TOSU            equ	4095	;# 
  1161   000F77                     SSPMSK          equ	3959	;# 
  1162   000F78                     SLRCON          equ	3960	;# 
  1163   000F79                     CM2CON1         equ	3961	;# 
  1164   000F7A                     CM2CON0         equ	3962	;# 
  1165   000F7B                     CM1CON0         equ	3963	;# 
  1166   000F7C                     WPUB            equ	3964	;# 
  1167   000F7D                     IOCB            equ	3965	;# 
  1168   000F7E                     ANSEL           equ	3966	;# 
  1169   000F7F                     ANSELH          equ	3967	;# 
  1170   000F80                     PORTA           equ	3968	;# 
  1171   000F81                     PORTB           equ	3969	;# 
  1172   000F82                     PORTC           equ	3970	;# 
  1173   000F83                     PORTD           equ	3971	;# 
  1174   000F84                     PORTE           equ	3972	;# 
  1175   000F89                     LATA            equ	3977	;# 
  1176   000F8A                     LATB            equ	3978	;# 
  1177   000F8B                     LATC            equ	3979	;# 
  1178   000F8C                     LATD            equ	3980	;# 
  1179   000F8D                     LATE            equ	3981	;# 
  1180   000F92                     TRISA           equ	3986	;# 
  1181   000F92                     DDRA            equ	3986	;# 
  1182   000F93                     TRISB           equ	3987	;# 
  1183   000F93                     DDRB            equ	3987	;# 
  1184   000F94                     TRISC           equ	3988	;# 
  1185   000F94                     DDRC            equ	3988	;# 
  1186   000F95                     TRISD           equ	3989	;# 
  1187   000F95                     DDRD            equ	3989	;# 
  1188   000F96                     TRISE           equ	3990	;# 
  1189   000F96                     DDRE            equ	3990	;# 
  1190   000F9B                     OSCTUNE         equ	3995	;# 
  1191   000F9D                     PIE1            equ	3997	;# 
  1192   000F9E                     PIR1            equ	3998	;# 
  1193   000F9F                     IPR1            equ	3999	;# 
  1194   000FA0                     PIE2            equ	4000	;# 
  1195   000FA1                     PIR2            equ	4001	;# 
  1196   000FA2                     IPR2            equ	4002	;# 
  1197   000FA6                     EECON1          equ	4006	;# 
  1198   000FA7                     EECON2          equ	4007	;# 
  1199   000FA8                     EEDATA          equ	4008	;# 
  1200   000FA9                     EEADR           equ	4009	;# 
  1201   000FAA                     EEADRH          equ	4010	;# 
  1202   000FAB                     RCSTA           equ	4011	;# 
  1203   000FAB                     RCSTA1          equ	4011	;# 
  1204   000FAC                     TXSTA           equ	4012	;# 
  1205   000FAC                     TXSTA1          equ	4012	;# 
  1206   000FAD                     TXREG           equ	4013	;# 
  1207   000FAD                     TXREG1          equ	4013	;# 
  1208   000FAE                     RCREG           equ	4014	;# 
  1209   000FAE                     RCREG1          equ	4014	;# 
  1210   000FAF                     SPBRG           equ	4015	;# 
  1211   000FAF                     SPBRG1          equ	4015	;# 
  1212   000FB0                     SPBRGH          equ	4016	;# 
  1213   000FB1                     T3CON           equ	4017	;# 
  1214   000FB2                     TMR3            equ	4018	;# 
  1215   000FB2                     TMR3L           equ	4018	;# 
  1216   000FB3                     TMR3H           equ	4019	;# 
  1217   000FB4                     CVRCON2         equ	4020	;# 
  1218   000FB5                     CVRCON          equ	4021	;# 
  1219   000FB6                     ECCP1AS         equ	4022	;# 
  1220   000FB7                     PWM1CON         equ	4023	;# 
  1221   000FB8                     BAUDCON         equ	4024	;# 
  1222   000FB8                     BAUDCTL         equ	4024	;# 
  1223   000FB9                     PSTRCON         equ	4025	;# 
  1224   000FBA                     CCP2CON         equ	4026	;# 
  1225   000FBB                     CCPR2           equ	4027	;# 
  1226   000FBB                     CCPR2L          equ	4027	;# 
  1227   000FBC                     CCPR2H          equ	4028	;# 
  1228   000FBD                     CCP1CON         equ	4029	;# 
  1229   000FBE                     CCPR1           equ	4030	;# 
  1230   000FBE                     CCPR1L          equ	4030	;# 
  1231   000FBF                     CCPR1H          equ	4031	;# 
  1232   000FC0                     ADCON2          equ	4032	;# 
  1233   000FC1                     ADCON1          equ	4033	;# 
  1234   000FC2                     ADCON0          equ	4034	;# 
  1235   000FC3                     ADRES           equ	4035	;# 
  1236   000FC3                     ADRESL          equ	4035	;# 
  1237   000FC4                     ADRESH          equ	4036	;# 
  1238   000FC5                     SSPCON2         equ	4037	;# 
  1239   000FC6                     SSPCON1         equ	4038	;# 
  1240   000FC7                     SSPSTAT         equ	4039	;# 
  1241   000FC8                     SSPADD          equ	4040	;# 
  1242   000FC9                     SSPBUF          equ	4041	;# 
  1243   000FCA                     T2CON           equ	4042	;# 
  1244   000FCB                     PR2             equ	4043	;# 
  1245   000FCB                     MEMCON          equ	4043	;# 
  1246   000FCC                     TMR2            equ	4044	;# 
  1247   000FCD                     T1CON           equ	4045	;# 
  1248   000FCE                     TMR1            equ	4046	;# 
  1249   000FCE                     TMR1L           equ	4046	;# 
  1250   000FCF                     TMR1H           equ	4047	;# 
  1251   000FD0                     RCON            equ	4048	;# 
  1252   000FD1                     WDTCON          equ	4049	;# 
  1253   000FD2                     HLVDCON         equ	4050	;# 
  1254   000FD2                     LVDCON          equ	4050	;# 
  1255   000FD3                     OSCCON          equ	4051	;# 
  1256   000FD5                     T0CON           equ	4053	;# 
  1257   000FD6                     TMR0            equ	4054	;# 
  1258   000FD6                     TMR0L           equ	4054	;# 
  1259   000FD7                     TMR0H           equ	4055	;# 
  1260   000FD8                     STATUS          equ	4056	;# 
  1261   000FD9                     FSR2            equ	4057	;# 
  1262   000FD9                     FSR2L           equ	4057	;# 
  1263   000FDA                     FSR2H           equ	4058	;# 
  1264   000FDB                     PLUSW2          equ	4059	;# 
  1265   000FDC                     PREINC2         equ	4060	;# 
  1266   000FDD                     POSTDEC2        equ	4061	;# 
  1267   000FDE                     POSTINC2        equ	4062	;# 
  1268   000FDF                     INDF2           equ	4063	;# 
  1269   000FE0                     BSR             equ	4064	;# 
  1270   000FE1                     FSR1            equ	4065	;# 
  1271   000FE1                     FSR1L           equ	4065	;# 
  1272   000FE2                     FSR1H           equ	4066	;# 
  1273   000FE3                     PLUSW1          equ	4067	;# 
  1274   000FE4                     PREINC1         equ	4068	;# 
  1275   000FE5                     POSTDEC1        equ	4069	;# 
  1276   000FE6                     POSTINC1        equ	4070	;# 
  1277   000FE7                     INDF1           equ	4071	;# 
  1278   000FE8                     WREG            equ	4072	;# 
  1279   000FE9                     FSR0            equ	4073	;# 
  1280   000FE9                     FSR0L           equ	4073	;# 
  1281   000FEA                     FSR0H           equ	4074	;# 
  1282   000FEB                     PLUSW0          equ	4075	;# 
  1283   000FEC                     PREINC0         equ	4076	;# 
  1284   000FED                     POSTDEC0        equ	4077	;# 
  1285   000FEE                     POSTINC0        equ	4078	;# 
  1286   000FEF                     INDF0           equ	4079	;# 
  1287   000FF0                     INTCON3         equ	4080	;# 
  1288   000FF1                     INTCON2         equ	4081	;# 
  1289   000FF2                     INTCON          equ	4082	;# 
  1290   000FF3                     PROD            equ	4083	;# 
  1291   000FF3                     PRODL           equ	4083	;# 
  1292   000FF4                     PRODH           equ	4084	;# 
  1293   000FF5                     TABLAT          equ	4085	;# 
  1294   000FF6                     TBLPTR          equ	4086	;# 
  1295   000FF6                     TBLPTRL         equ	4086	;# 
  1296   000FF7                     TBLPTRH         equ	4087	;# 
  1297   000FF8                     TBLPTRU         equ	4088	;# 
  1298   000FF9                     PCLAT           equ	4089	;# 
  1299   000FF9                     PC              equ	4089	;# 
  1300   000FF9                     PCL             equ	4089	;# 
  1301   000FFA                     PCLATH          equ	4090	;# 
  1302   000FFB                     PCLATU          equ	4091	;# 
  1303   000FFC                     STKPTR          equ	4092	;# 
  1304   000FFD                     TOS             equ	4093	;# 
  1305   000FFD                     TOSL            equ	4093	;# 
  1306   000FFE                     TOSH            equ	4094	;# 
  1307   000FFF                     TOSU            equ	4095	;# 
  1308                           
  1309                           	psect	smallconst
  1310   001000                     __psmallconst:
  1311                           	callstack 0
  1312   001000  00                 	db	0
  1313   001001                     _default_security_key:
  1314                           	callstack 0
  1315   001001  00                 	db	0
  1316   001002  10                 	db	16
  1317   001003  25                 	db	37
  1318   001004  37                 	db	55
  1319   001005  04                 	db	4
  1320   001006  55                 	db	85
  1321   001007  06                 	db	6
  1322   001008  79                 	db	121
  1323   001009  08                 	db	8
  1324   00100A  09                 	db	9
  1325   00100B  10                 	db	16
  1326   00100C  11                 	db	17
  1327   00100D  12                 	db	18
  1328   00100E  13                 	db	19
  1329   00100F  14                 	db	20
  1330   001010  15                 	db	21
  1331   001011                     __end_of_default_security_key:
  1332                           	callstack 0
  1333   001011                     _default_mac_address:
  1334                           	callstack 0
  1335   001011  11                 	db	17
  1336   001012  28                 	db	40
  1337   001013  35                 	db	53
  1338   001014  44                 	db	68
  1339   001015  56                 	db	86
  1340   001016  66                 	db	102
  1341   001017  77                 	db	119
  1342   001018  01                 	db	1
  1343   001019                     __end_of_default_mac_address:
  1344                           	callstack 0
  1345   007CF0                     _TMR1IF         set	31984
  1346   007E68                     _TMR1ON         set	32360
  1347   007E69                     _TMR1CS         set	32361
  1348   007E6B                     _T1OSCEN        set	32363
  1349   007E6A                     _T1SYNC         set	32362
  1350   007E6D                     _T1CKPS1        set	32365
  1351   007E6C                     _T1CKPS0        set	32364
  1352   007E6F                     _T1RD16         set	32367
  1353   007F8F                     _RBPU           set	32655
  1354   007CED                     _RCIE           set	31981
  1355   007CEE                     _ADIE           set	31982
  1356   007D03                     _BCLIE          set	32003
  1357   007CEB                     _SSPIE          set	31979
  1358   007D04                     _EEIE           set	32004
  1359   007D00                     _CCP2IE         set	32000
  1360   007CEA                     _CCP1IE         set	31978
  1361   007CE9                     _TMR2IE         set	31977
  1362   007CE8                     _TMR1IE         set	31976
  1363   007F95                     _T0IE           set	32661
  1364   007F93                     _RBIE           set	32659
  1365   007F94                     _INT0E          set	32660
  1366   007F96                     _PEIE           set	32662
  1367   007F97                     _GIE            set	32663
  1368   007E87                     _IPEN           set	32391
  1369   000FCF                     _TMR1H          set	4047
  1370   000FCE                     _TMR1L          set	4046
  1371   000F9B                     _OSCTUNE        set	3995
  1372   000FD3                     _OSCCON         set	4051
  1373   000F95                     _TRISDbits      set	3989
  1374   000F96                     _TRISEbits      set	3990
  1375   000F93                     _TRISBbits      set	3987
  1376   000F84                     _PORTE          set	3972
  1377   000F83                     _PORTD          set	3971
  1378   000F82                     _PORTC          set	3970
  1379   000F81                     _PORTB          set	3969
  1380   000F80                     _PORTA          set	3968
  1381   000F8D                     _LATEbits       set	3981
  1382   000F82                     _PORTCbits      set	3970
  1383   000FC9                     _SSPBUF         set	4041
  1384   000F9E                     _PIR1bits       set	3998
  1385   000FC6                     _SSPCON1bits    set	4038
  1386   000FC6                     _SSPCON1        set	4038
  1387   000FC7                     _SSPSTATbits    set	4039
  1388   000F94                     _TRISCbits      set	3988
  1389   000F81                     _PORTBbits      set	3969
  1390   000F8C                     _LATDbits       set	3980
  1391   000F8B                     _LATCbits       set	3979
  1392   001019                     STR_5:
  1393   001019  4C                 	db	76	;'L'
  1394   00101A  65                 	db	101	;'e'
  1395   00101B  64                 	db	100	;'d'
  1396   00101C  20                 	db	32
  1397   00101D  65                 	db	101	;'e'
  1398   00101E  6E                 	db	110	;'n'
  1399   00101F  63                 	db	99	;'c'
  1400   001020  65                 	db	101	;'e'
  1401   001021  6E                 	db	110	;'n'
  1402   001022  64                 	db	100	;'d'
  1403   001023  69                 	db	105	;'i'
  1404   001024  64                 	db	100	;'d'
  1405   001025  6F                 	db	111	;'o'
  1406   001026  00                 	db	0
  1407   001027                     STR_8:
  1408   001027  4C                 	db	76	;'L'
  1409   001028  65                 	db	101	;'e'
  1410   001029  64                 	db	100	;'d'
  1411   00102A  20                 	db	32
  1412   00102B  61                 	db	97	;'a'
  1413   00102C  70                 	db	112	;'p'
  1414   00102D  61                 	db	97	;'a'
  1415   00102E  67                 	db	103	;'g'
  1416   00102F  61                 	db	97	;'a'
  1417   001030  64                 	db	100	;'d'
  1418   001031  6F                 	db	111	;'o'
  1419   001032  00                 	db	0
  1420   001033                     STR_15:
  1421   001033  43                 	db	67	;'C'
  1422   001034  6D                 	db	109	;'m'
  1423   001035  64                 	db	100	;'d'
  1424   001036  20                 	db	32
  1425   001037  65                 	db	101	;'e'
  1426   001038  72                 	db	114	;'r'
  1427   001039  72                 	db	114	;'r'
  1428   00103A  6F                 	db	111	;'o'
  1429   00103B  72                 	db	114	;'r'
  1430   00103C  2E                 	db	46
  1431   00103D  00                 	db	0
  1432   00103E                     STR_6:
  1433   00103E  43                 	db	67	;'C'
  1434   00103F  4D                 	db	77	;'M'
  1435   001040  44                 	db	68	;'D'
  1436   001041  3A                 	db	58	;':'
  1437   001042  41                 	db	65	;'A'
  1438   001043  4C                 	db	76	;'L'
  1439   001044  41                 	db	65	;'A'
  1440   001045  00                 	db	0
  1441   001046                     STR_3:
  1442   001046  43                 	db	67	;'C'
  1443   001047  4D                 	db	77	;'M'
  1444   001048  44                 	db	68	;'D'
  1445   001049  3A                 	db	58	;':'
  1446   00104A  50                 	db	80	;'P'
  1447   00104B  4C                 	db	76	;'L'
  1448   00104C  41                 	db	65	;'A'
  1449   00104D  00                 	db	0
  1450   00104E                     STR_12:
  1451   00104E  43                 	db	67	;'C'
  1452   00104F  4D                 	db	77	;'M'
  1453   001050  44                 	db	68	;'D'
  1454   001051  3A                 	db	58	;':'
  1455   001052  41                 	db	65	;'A'
  1456   001053  4C                 	db	76	;'L'
  1457   001054  52                 	db	82	;'R'
  1458   001055  00                 	db	0
  1459   001056                     STR_9:
  1460   001056  43                 	db	67	;'C'
  1461   001057  4D                 	db	77	;'M'
  1462   001058  44                 	db	68	;'D'
  1463   001059  3A                 	db	58	;':'
  1464   00105A  50                 	db	80	;'P'
  1465   00105B  4C                 	db	76	;'L'
  1466   00105C  52                 	db	82	;'R'
  1467   00105D  00                 	db	0
  1468   00105E                     STR_2:
  1469   00105E  43                 	db	67	;'C'
  1470   00105F  4D                 	db	77	;'M'
  1471   001060  44                 	db	68	;'D'
  1472   001061  3A                 	db	58	;':'
  1473   001062  41                 	db	65	;'A'
  1474   001063  4C                 	db	76	;'L'
  1475   001064  56                 	db	86	;'V'
  1476   001065  00                 	db	0
  1477   001066                     STR_1:
  1478   001066  43                 	db	67	;'C'
  1479   001067  4D                 	db	77	;'M'
  1480   001068  44                 	db	68	;'D'
  1481   001069  3A                 	db	58	;':'
  1482   00106A  50                 	db	80	;'P'
  1483   00106B  4C                 	db	76	;'L'
  1484   00106C  56                 	db	86	;'V'
  1485   00106D  00                 	db	0
  1486   001019                     STR_11          equ	STR_5
  1487   001027                     STR_14          equ	STR_8
  1488   001056                     STR_10          equ	STR_9
  1489   00104E                     STR_13          equ	STR_12
  1490   001046                     STR_4           equ	STR_3
  1491   00103E                     STR_7           equ	STR_6
  1492   00106E  00                 	db	0	; dummy byte at the end
  1493   000002                     __activetblptr  equ	2
  1494                           
  1495                           ; #config settings
  1496                           
  1497                           	psect	cinit
  1498   001BCA                     __pcinit:
  1499                           	callstack 0
  1500   001BCA                     start_initialization:
  1501                           	callstack 0
  1502   001BCA                     __initialization:
  1503                           	callstack 0
  1504                           
  1505                           ; Clear objects allocated to BANK1 (56 bytes)
  1506   001BCA  EE01  F000         	lfsr	0,__pbssBANK1
  1507   001BCE  0E38               	movlw	56
  1508   001BD0                     clear_0:
  1509   001BD0  6AEE               	clrf	postinc0,c
  1510   001BD2  06E8               	decf	wreg,f,c
  1511   001BD4  E1FD               	bnz	clear_0
  1512                           
  1513                           ; Clear objects allocated to BANK0 (56 bytes)
  1514   001BD6  EE00  F0AD         	lfsr	0,__pbssBANK0
  1515   001BDA  0E38               	movlw	56
  1516   001BDC                     clear_1:
  1517   001BDC  6AEE               	clrf	postinc0,c
  1518   001BDE  06E8               	decf	wreg,f,c
  1519   001BE0  E1FD               	bnz	clear_1
  1520                           
  1521                           ; Clear objects allocated to COMRAM (38 bytes)
  1522   001BE2  EE00  F001         	lfsr	0,__pbssCOMRAM
  1523   001BE6  0E26               	movlw	38
  1524   001BE8                     clear_2:
  1525   001BE8  6AEE               	clrf	postinc0,c
  1526   001BEA  06E8               	decf	wreg,f,c
  1527   001BEC  E1FD               	bnz	clear_2
  1528   001BEE                     end_of_initialization:
  1529                           	callstack 0
  1530   001BEE                     __end_of__initialization:
  1531                           	callstack 0
  1532   001BEE  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1533   001BF0  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1534   001BF2  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1535   001BF4  6EF8               	movwf	tblptru,c
  1536   001BF6  0100               	movlb	0
  1537   001BF8  EF4B  F009         	goto	_main	;jump to C main() function
  1538                           
  1539                           	psect	bssCOMRAM
  1540   000001                     __pbssCOMRAM:
  1541                           	callstack 0
  1542   000001                     _timeStamp:
  1543                           	callstack 0
  1544   000001                     	ds	4
  1545   000005                     _estadoActual:
  1546                           	callstack 0
  1547   000005                     	ds	1
  1548   000006                     _long_mac_address_e:
  1549                           	callstack 0
  1550   000006                     	ds	1
  1551   000007                     _data_config_s:
  1552                           	callstack 0
  1553   000007                     	ds	32
  1554                           
  1555                           	psect	bssBANK0
  1556   0000AD                     __pbssBANK0:
  1557                           	callstack 0
  1558   0000AD                     _data_in_s:
  1559                           	callstack 0
  1560   0000AD                     	ds	56
  1561                           
  1562                           	psect	bssBANK1
  1563   000100                     __pbssBANK1:
  1564                           	callstack 0
  1565   000100                     _data_out_s:
  1566                           	callstack 0
  1567   000100                     	ds	56
  1568                           
  1569                           	psect	cstackBANK0
  1570   000060                     __pcstackBANK0:
  1571                           	callstack 0
  1572   000060                     main@mrf24_data_in:
  1573                           	callstack 0
  1574                           
  1575                           ; 1 bytes @ 0x0
  1576   000060                     	ds	1
  1577   000061                     main@delay_parpadeo:
  1578                           	callstack 0
  1579                           
  1580                           ; 9 bytes @ 0x1
  1581   000061                     	ds	9
  1582   00006A                     main@boton1:
  1583                           	callstack 0
  1584                           
  1585                           ; 11 bytes @ 0xA
  1586   00006A                     	ds	11
  1587   000075                     main@data_out_s:
  1588                           	callstack 0
  1589                           
  1590                           ; 56 bytes @ 0x15
  1591   000075                     	ds	56
  1592                           
  1593                           	psect	cstackCOMRAM
  1594   000027                     __pcstackCOMRAM:
  1595                           	callstack 0
  1596   000027                     ?_strlen:
  1597                           	callstack 0
  1598   000027                     ?_strcmp:
  1599                           	callstack 0
  1600   000027                     SetCSPin@estado:
  1601                           	callstack 0
  1602   000027                     SetWakePin@estado:
  1603                           	callstack 0
  1604   000027                     SetResetPin@estado:
  1605                           	callstack 0
  1606   000027                     SPIWriteByte@dato:
  1607                           	callstack 0
  1608   000027                     DelayInit@delay:
  1609                           	callstack 0
  1610   000027                     DelayReset@delay:
  1611                           	callstack 0
  1612   000027                     DelayIsRunning@delay:
  1613                           	callstack 0
  1614   000027                     strcmp@l:
  1615                           	callstack 0
  1616   000027                     strcpy@dest:
  1617                           	callstack 0
  1618   000027                     strlen@s:
  1619                           	callstack 0
  1620   000027                     strncpy@d:
  1621                           	callstack 0
  1622   000027                     
  1623                           ; 1 bytes @ 0x0
  1624   000027                     	ds	1
  1625   000028                     WriteByteSPIPort@dato:
  1626                           	callstack 0
  1627   000028                     DelayRead@delay:
  1628                           	callstack 0
  1629   000028                     strcmp@r:
  1630                           	callstack 0
  1631   000028                     strcpy@src:
  1632                           	callstack 0
  1633   000028                     strncpy@s:
  1634                           	callstack 0
  1635   000028                     SPIWrite2Byte@dato:
  1636                           	callstack 0
  1637   000028                     DelayInit@duration:
  1638                           	callstack 0
  1639   000028                     
  1640                           ; 1 bytes @ 0x1
  1641   000028                     	ds	1
  1642   000029                     SetShortAddr@valor:
  1643                           	callstack 0
  1644   000029                     GetShortAddr@leido_spi:
  1645                           	callstack 0
  1646   000029                     strlen@a:
  1647                           	callstack 0
  1648   000029                     strncpy@n:
  1649                           	callstack 0
  1650   000029                     ??_DelayRead:
  1651   000029                     ??_strcpy:
  1652   000029                     ??_strcmp:
  1653                           
  1654                           ; 1 bytes @ 0x2
  1655   000029                     	ds	1
  1656   00002A                     SetShortAddr@reg_address:
  1657                           	callstack 0
  1658   00002A                     GetShortAddr@reg_address:
  1659                           	callstack 0
  1660   00002A                     strcpy@d:
  1661                           	callstack 0
  1662   00002A                     Write2ByteSPIPort@dato:
  1663                           	callstack 0
  1664   00002A                     
  1665                           ; 1 bytes @ 0x3
  1666   00002A                     	ds	1
  1667   00002B                     SetDeviceMACAddress@i:
  1668                           	callstack 0
  1669   00002B                     ??_strncpy:
  1670   00002B                     
  1671                           ; 1 bytes @ 0x4
  1672   00002B                     	ds	1
  1673   00002C                     DebounceFSMInit@antirrebote_boton_n:
  1674                           	callstack 0
  1675   00002C                     strncpy@cp:
  1676                           	callstack 0
  1677   00002C                     SetLongAddr@reg_address:
  1678                           	callstack 0
  1679   00002C                     GetLongAddr@reg_address:
  1680                           	callstack 0
  1681   00002C                     
  1682                           ; 1 bytes @ 0x5
  1683   00002C                     	ds	1
  1684   00002D                     
  1685                           ; 1 bytes @ 0x6
  1686   00002D                     	ds	1
  1687   00002E                     SetLongAddr@valor:
  1688                           	callstack 0
  1689   00002E                     ??_GetLongAddr:
  1690                           
  1691                           ; 1 bytes @ 0x7
  1692   00002E                     	ds	1
  1693   00002F                     ??_SetLongAddr:
  1694                           
  1695                           ; 1 bytes @ 0x8
  1696   00002F                     	ds	1
  1697   000030                     GetLongAddr@respuesta:
  1698                           	callstack 0
  1699                           
  1700                           ; 1 bytes @ 0x9
  1701   000030                     	ds	1
  1702   000031                     MRF24TransmitirDato@p_info_out_s:
  1703                           	callstack 0
  1704   000031                     ??_SetChannel:
  1705   000031                     ??_MRF24ReciboPaquete:
  1706                           
  1707                           ; 1 bytes @ 0xA
  1708   000031                     	ds	1
  1709   000032                     ??_MRF24TransmitirDato:
  1710                           
  1711                           ; 1 bytes @ 0xB
  1712   000032                     	ds	2
  1713   000034                     MRF24TransmitirDato@i:
  1714                           	callstack 0
  1715                           
  1716                           ; 1 bytes @ 0xD
  1717   000034                     	ds	1
  1718   000035                     DebounceFSMUpdate@antirrebote_boton_n:
  1719                           	callstack 0
  1720   000035                     MRF24TransmitirDato@largo_mensaje:
  1721                           	callstack 0
  1722   000035                     ??_InicializoMRF24:
  1723                           
  1724                           ; 1 bytes @ 0xE
  1725   000035                     	ds	1
  1726   000036                     MRF24ReciboPaquete@largo_mensaje:
  1727                           	callstack 0
  1728   000036                     DebounceFSMUpdate@estado_pin:
  1729                           	callstack 0
  1730                           
  1731                           ; 1 bytes @ 0xF
  1732   000036                     	ds	1
  1733   000037                     InicializoMRF24@lectura:
  1734                           	callstack 0
  1735   000037                     MRF24TransmitirDato@pos_mem:
  1736                           	callstack 0
  1737   000037                     MRF24ReciboPaquete@add:
  1738                           	callstack 0
  1739   000037                     ??_DebounceFSMUpdate:
  1740                           
  1741                           ; 1 bytes @ 0x10
  1742   000037                     	ds	1
  1743   000038                     InicializoMRF24@delay_time_out:
  1744                           	callstack 0
  1745                           
  1746                           ; 9 bytes @ 0x11
  1747   000038                     	ds	1
  1748   000039                     MRF24ReciboPaquete@i:
  1749                           	callstack 0
  1750                           
  1751                           ; 1 bytes @ 0x12
  1752   000039                     	ds	8
  1753   000041                     ??_MRF24J40Init:
  1754                           
  1755                           ; 1 bytes @ 0x1A
  1756   000041                     	ds	1
  1757   000042                     ??_main:
  1758                           
  1759                           ; 1 bytes @ 0x1B
  1760   000042                     	ds	2
  1761                           
  1762 ;;
  1763 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1764 ;;
  1765 ;; *************** function _main *****************
  1766 ;; Defined at:
  1767 ;;		line 30 in file "main.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;		None
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  mrf24_data_i    1    0[BANK0 ] PTR struct .
  1772 ;;		 -> data_in_s(56), 
  1773 ;;  data_out_s     56   21[BANK0 ] struct .
  1774 ;;  boton1         11   10[BANK0 ] struct .
  1775 ;;  delay_parpad    9    1[BANK0 ] struct .
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;      Locals:         0      77       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1787 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1788 ;;      Totals:         2      77       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;Total ram usage:       79 bytes
  1790 ;; Hardware stack levels required when called: 8
  1791 ;; This function calls:
  1792 ;;		_BoardInit
  1793 ;;		_DebounceFSMInit
  1794 ;;		_DebounceFSMUpdate
  1795 ;;		_DelayInit
  1796 ;;		_DelayRead
  1797 ;;		_MRF24GetDataIn
  1798 ;;		_MRF24IsNewMsg
  1799 ;;		_MRF24J40Init
  1800 ;;		_MRF24ReciboPaquete
  1801 ;;		_MRF24TransmitirDato
  1802 ;;		_strcmp
  1803 ;;		_strcpy
  1804 ;; This function is called by:
  1805 ;;		Startup code after reset
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text0
  1810   001296                     __ptext0:
  1811                           	callstack 0
  1812   001296                     _main:
  1813                           	callstack 23
  1814   001296                     
  1815                           ;main.c: 32:     delayNoBloqueanteData delay_parpadeo;;main.c: 33:     debounceData_t bo
      +                          ton1;;main.c: 34:  DebounceFSMInit(&boton1);
  1816   001296  0E6A               	movlw	low main@boton1
  1817   001298  6E2C               	movwf	DebounceFSMInit@antirrebote_boton_n^0,c
  1818   00129A  EC17  F00E         	call	_DebounceFSMInit	;wreg free
  1819   00129E                     
  1820                           ;main.c: 35:     BoardInit();
  1821   00129E  EC1E  F00D         	call	_BoardInit	;wreg free
  1822   0012A2                     
  1823                           ;main.c: 36:     MRF24J40Init();
  1824   0012A2  EC92  F00D         	call	_MRF24J40Init	;wreg free
  1825   0012A6                     
  1826                           ;main.c: 37:     DelayInit(&delay_parpadeo, 1000);
  1827   0012A6  0E61               	movlw	low main@delay_parpadeo
  1828   0012A8  6E27               	movwf	DelayInit@delay^0,c
  1829   0012AA  0EE8               	movlw	232
  1830   0012AC  6E28               	movwf	DelayInit@duration^0,c
  1831   0012AE  0E03               	movlw	3
  1832   0012B0  6E29               	movwf	(DelayInit@duration+1)^0,c
  1833   0012B2  0E00               	movlw	0
  1834   0012B4  6E2A               	movwf	(DelayInit@duration+2)^0,c
  1835   0012B6  0E00               	movlw	0
  1836   0012B8  6E2B               	movwf	(DelayInit@duration+3)^0,c
  1837   0012BA  EC70  F00E         	call	_DelayInit	;wreg free
  1838   0012BE                     
  1839                           ;main.c: 39:     mrf24_data_out_t data_out_s;;main.c: 40:  data_out_s.dest_address = (0x
      +                          1111);
  1840   0012BE  0E11               	movlw	17
  1841   0012C0  0100               	movlb	0	; () banked
  1842   0012C2  6F78               	movwf	(main@data_out_s+3)& (0+255),b
  1843   0012C4  0E11               	movlw	17
  1844   0012C6  6F77               	movwf	(main@data_out_s+2)& (0+255),b
  1845   0012C8                     
  1846                           ; BSR set to: 0
  1847                           ;main.c: 41:  data_out_s.dest_panid = 0x1234;
  1848   0012C8  0E12               	movlw	18
  1849   0012CA  6F76               	movwf	(main@data_out_s+1)& (0+255),b
  1850   0012CC  0E34               	movlw	52
  1851   0012CE  6F75               	movwf	main@data_out_s& (0+255),b
  1852   0012D0                     
  1853                           ; BSR set to: 0
  1854                           ;main.c: 42:  data_out_s.origin_address = 0x4567;
  1855   0012D0  0E45               	movlw	69
  1856   0012D2  6F7A               	movwf	(main@data_out_s+5)& (0+255),b
  1857   0012D4  0E67               	movlw	103
  1858   0012D6  6F79               	movwf	(main@data_out_s+4)& (0+255),b
  1859   0012D8                     l280:
  1860   0012D8  0004               	clrwdt		;# 
  1861                           
  1862                           ;main.c: 47:         switch(DebounceFSMUpdate(&boton1,PORTCbits.RC2)) {
  1863   0012DA  EF83  F009         	goto	l2299
  1864   0012DE                     l2289:
  1865                           
  1866                           ;main.c: 51:                 strcpy(data_out_s.buffer, "CMD:PLV");
  1867   0012DE  0E7B               	movlw	low (main@data_out_s+6)
  1868   0012E0  6E27               	movwf	strcpy@dest^0,c
  1869   0012E2  0E66               	movlw	low STR_1
  1870   0012E4  6E28               	movwf	strcpy@src^0,c
  1871   0012E6  ECFE  F00D         	call	_strcpy	;wreg free
  1872   0012EA                     l2291:
  1873                           
  1874                           ;main.c: 52:                 MRF24TransmitirDato(&data_out_s);
  1875   0012EA  0E75               	movlw	low main@data_out_s
  1876   0012EC  6E31               	movwf	MRF24TransmitirDato@p_info_out_s^0,c
  1877   0012EE  EC38  F008         	call	_MRF24TransmitirDato	;wreg free
  1878                           
  1879                           ;main.c: 53:     break;
  1880   0012F2  EFA5  F009         	goto	l2301
  1881   0012F6                     l2293:
  1882                           
  1883                           ;main.c: 57:                 strcpy(data_out_s.buffer, "CMD:ALV");
  1884   0012F6  0E7B               	movlw	low (main@data_out_s+6)
  1885   0012F8  6E27               	movwf	strcpy@dest^0,c
  1886   0012FA  0E5E               	movlw	low STR_2
  1887   0012FC  6E28               	movwf	strcpy@src^0,c
  1888   0012FE  ECFE  F00D         	call	_strcpy	;wreg free
  1889   001302  EF75  F009         	goto	l2291
  1890   001306                     l2299:
  1891   001306  0E6A               	movlw	low main@boton1
  1892   001308  6E35               	movwf	DebounceFSMUpdate@antirrebote_boton_n^0,c
  1893   00130A  B482               	btfsc	130,2,c	;volatile
  1894   00130C  EF8A  F009         	goto	u941
  1895   001310  EF8D  F009         	goto	u940
  1896   001314                     u941:
  1897   001314  0E01               	movlw	1
  1898   001316  EF8E  F009         	goto	u946
  1899   00131A                     u940:
  1900   00131A  0E00               	movlw	0
  1901   00131C                     u946:
  1902   00131C  6E36               	movwf	DebounceFSMUpdate@estado_pin^0,c
  1903   00131E  EC19  F00B         	call	_DebounceFSMUpdate	;wreg free
  1904   001322  6E42               	movwf	??_main^0,c
  1905   001324  6A43               	clrf	(??_main+1)^0,c
  1906                           
  1907                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1908                           ; Switch size 1, requested type "simple"
  1909                           ; Number of cases is 1, Range of values is 0 to 0
  1910                           ; switch strategies available:
  1911                           ; Name         Instructions Cycles
  1912                           ; simple_byte            4     3 (average)
  1913                           ;	Chosen strategy is simple_byte
  1914   001326  5043               	movf	(??_main+1)^0,w,c
  1915   001328  0A00               	xorlw	0	; case 0
  1916   00132A  B4D8               	btfsc	status,2,c
  1917   00132C  EF9A  F009         	goto	l2395
  1918   001330  EFA5  F009         	goto	l2301
  1919   001334                     l2395:
  1920                           
  1921                           ; Switch size 1, requested type "simple"
  1922                           ; Number of cases is 2, Range of values is 1 to 2
  1923                           ; switch strategies available:
  1924                           ; Name         Instructions Cycles
  1925                           ; simple_byte            7     4 (average)
  1926                           ;	Chosen strategy is simple_byte
  1927   001334  5042               	movf	??_main^0,w,c
  1928   001336  0A01               	xorlw	1	; case 1
  1929   001338  B4D8               	btfsc	status,2,c
  1930   00133A  EF6F  F009         	goto	l2289
  1931   00133E  0A03               	xorlw	3	; case 2
  1932   001340  B4D8               	btfsc	status,2,c
  1933   001342  EF7B  F009         	goto	l2293
  1934   001346  EFA5  F009         	goto	l2301
  1935   00134A                     l2301:
  1936                           
  1937                           ;main.c: 66:         if(MRF24IsNewMsg() == MSG_PRESENTE) {
  1938   00134A  ECCB  F00D         	call	_MRF24IsNewMsg	;wreg free
  1939   00134E  0A02               	xorlw	2
  1940   001350  A4D8               	btfss	status,2,c
  1941   001352  EFAD  F009         	goto	u951
  1942   001356  EFAF  F009         	goto	u950
  1943   00135A                     u951:
  1944   00135A  EF27  F00A         	goto	l2335
  1945   00135E                     u950:
  1946   00135E                     
  1947                           ;main.c: 68:             mrf24_data_in_t * mrf24_data_in = MRF24GetDataIn();
  1948   00135E  EC23  F00F         	call	_MRF24GetDataIn	;wreg free
  1949   001362  0100               	movlb	0	; () banked
  1950   001364  6F60               	movwf	main@mrf24_data_in& (0+255),b
  1951   001366                     
  1952                           ; BSR set to: 0
  1953                           ;main.c: 69:             MRF24ReciboPaquete();
  1954   001366  ECB7  F00B         	call	_MRF24ReciboPaquete	;wreg free
  1955   00136A                     
  1956                           ;main.c: 71:    if(!strcmp(mrf24_data_in->buffer,"CMD:PLA")) {
  1957   00136A  0100               	movlb	0	; () banked
  1958   00136C  5160               	movf	main@mrf24_data_in& (0+255),w,b
  1959   00136E  0F06               	addlw	6
  1960   001370  6E27               	movwf	strcmp@l^0,c
  1961   001372  0E46               	movlw	low STR_3
  1962   001374  6E28               	movwf	strcmp@r^0,c
  1963   001376  ECB8  F00C         	call	_strcmp	;wreg free
  1964   00137A  5027               	movf	?_strcmp^0,w,c
  1965   00137C  1028               	iorwf	(?_strcmp+1)^0,w,c
  1966   00137E  A4D8               	btfss	status,2,c
  1967   001380  EFC4  F009         	goto	u961
  1968   001384  EFC6  F009         	goto	u960
  1969   001388                     u961:
  1970   001388  EFCF  F009         	goto	l2313
  1971   00138C                     u960:
  1972   00138C                     
  1973                           ;main.c: 73:     LATEbits.LATE1 = 0;
  1974   00138C  928D               	bcf	141,1,c	;volatile
  1975   00138E                     
  1976                           ;main.c: 74:                 strcpy(data_out_s.buffer, "Led encendido");
  1977   00138E  0E7B               	movlw	low (main@data_out_s+6)
  1978   001390  6E27               	movwf	strcpy@dest^0,c
  1979   001392  0E19               	movlw	low STR_5
  1980   001394  6E28               	movwf	strcpy@src^0,c
  1981   001396  ECFE  F00D         	call	_strcpy	;wreg free
  1982                           
  1983                           ;main.c: 75:    } else if(!strcmp(mrf24_data_in->buffer,"CMD:ALA")) {
  1984   00139A  EF23  F00A         	goto	l2333
  1985   00139E                     l2313:
  1986   00139E  0100               	movlb	0	; () banked
  1987   0013A0  5160               	movf	main@mrf24_data_in& (0+255),w,b
  1988   0013A2  0F06               	addlw	6
  1989   0013A4  6E27               	movwf	strcmp@l^0,c
  1990   0013A6  0E3E               	movlw	low STR_6
  1991   0013A8  6E28               	movwf	strcmp@r^0,c
  1992   0013AA  ECB8  F00C         	call	_strcmp	;wreg free
  1993   0013AE  5027               	movf	?_strcmp^0,w,c
  1994   0013B0  1028               	iorwf	(?_strcmp+1)^0,w,c
  1995   0013B2  A4D8               	btfss	status,2,c
  1996   0013B4  EFDE  F009         	goto	u971
  1997   0013B8  EFE0  F009         	goto	u970
  1998   0013BC                     u971:
  1999   0013BC  EFE9  F009         	goto	l2319
  2000   0013C0                     u970:
  2001   0013C0                     
  2002                           ;main.c: 77:     LATEbits.LATE1 = 1;
  2003   0013C0  828D               	bsf	141,1,c	;volatile
  2004   0013C2                     
  2005                           ;main.c: 78:                 strcpy(data_out_s.buffer, "Led apagado");
  2006   0013C2  0E7B               	movlw	low (main@data_out_s+6)
  2007   0013C4  6E27               	movwf	strcpy@dest^0,c
  2008   0013C6  0E27               	movlw	low STR_8
  2009   0013C8  6E28               	movwf	strcpy@src^0,c
  2010   0013CA  ECFE  F00D         	call	_strcpy	;wreg free
  2011                           
  2012                           ;main.c: 79:             } else if(!strcmp(mrf24_data_in->buffer,"CMD:PLR")) {
  2013   0013CE  EF23  F00A         	goto	l2333
  2014   0013D2                     l2319:
  2015   0013D2  0100               	movlb	0	; () banked
  2016   0013D4  5160               	movf	main@mrf24_data_in& (0+255),w,b
  2017   0013D6  0F06               	addlw	6
  2018   0013D8  6E27               	movwf	strcmp@l^0,c
  2019   0013DA  0E56               	movlw	low STR_9
  2020   0013DC  6E28               	movwf	strcmp@r^0,c
  2021   0013DE  ECB8  F00C         	call	_strcmp	;wreg free
  2022   0013E2  5027               	movf	?_strcmp^0,w,c
  2023   0013E4  1028               	iorwf	(?_strcmp+1)^0,w,c
  2024   0013E6  A4D8               	btfss	status,2,c
  2025   0013E8  EFF8  F009         	goto	u981
  2026   0013EC  EFFA  F009         	goto	u980
  2027   0013F0                     u981:
  2028   0013F0  EF03  F00A         	goto	l2325
  2029   0013F4                     u980:
  2030   0013F4                     
  2031                           ;main.c: 81:     LATEbits.LATE2 = 0;
  2032   0013F4  948D               	bcf	141,2,c	;volatile
  2033   0013F6                     
  2034                           ;main.c: 82:                 strcpy(data_out_s.buffer, "Led encendido");
  2035   0013F6  0E7B               	movlw	low (main@data_out_s+6)
  2036   0013F8  6E27               	movwf	strcpy@dest^0,c
  2037   0013FA  0E19               	movlw	low STR_5
  2038   0013FC  6E28               	movwf	strcpy@src^0,c
  2039   0013FE  ECFE  F00D         	call	_strcpy	;wreg free
  2040                           
  2041                           ;main.c: 83:             } else if(!strcmp(mrf24_data_in->buffer,"CMD:ALR")){
  2042   001402  EF23  F00A         	goto	l2333
  2043   001406                     l2325:
  2044   001406  0100               	movlb	0	; () banked
  2045   001408  5160               	movf	main@mrf24_data_in& (0+255),w,b
  2046   00140A  0F06               	addlw	6
  2047   00140C  6E27               	movwf	strcmp@l^0,c
  2048   00140E  0E4E               	movlw	low STR_12
  2049   001410  6E28               	movwf	strcmp@r^0,c
  2050   001412  ECB8  F00C         	call	_strcmp	;wreg free
  2051   001416  5027               	movf	?_strcmp^0,w,c
  2052   001418  1028               	iorwf	(?_strcmp+1)^0,w,c
  2053   00141A  A4D8               	btfss	status,2,c
  2054   00141C  EF12  F00A         	goto	u991
  2055   001420  EF14  F00A         	goto	u990
  2056   001424                     u991:
  2057   001424  EF1D  F00A         	goto	l2331
  2058   001428                     u990:
  2059   001428                     
  2060                           ;main.c: 85:     LATEbits.LATE2 = 1;
  2061   001428  848D               	bsf	141,2,c	;volatile
  2062   00142A                     
  2063                           ;main.c: 86:                 strcpy(data_out_s.buffer, "Led apagado");
  2064   00142A  0E7B               	movlw	low (main@data_out_s+6)
  2065   00142C  6E27               	movwf	strcpy@dest^0,c
  2066   00142E  0E27               	movlw	low STR_8
  2067   001430  6E28               	movwf	strcpy@src^0,c
  2068   001432  ECFE  F00D         	call	_strcpy	;wreg free
  2069                           
  2070                           ;main.c: 87:             } else {
  2071   001436  EF23  F00A         	goto	l2333
  2072   00143A                     l2331:
  2073                           
  2074                           ;main.c: 89:                 strcpy(data_out_s.buffer, "Cmd error.");
  2075   00143A  0E7B               	movlw	low (main@data_out_s+6)
  2076   00143C  6E27               	movwf	strcpy@dest^0,c
  2077   00143E  0E33               	movlw	low STR_15
  2078   001440  6E28               	movwf	strcpy@src^0,c
  2079   001442  ECFE  F00D         	call	_strcpy	;wreg free
  2080   001446                     l2333:
  2081                           
  2082                           ;main.c: 91:             MRF24TransmitirDato(&data_out_s);
  2083   001446  0E75               	movlw	low main@data_out_s
  2084   001448  6E31               	movwf	MRF24TransmitirDato@p_info_out_s^0,c
  2085   00144A  EC38  F008         	call	_MRF24TransmitirDato	;wreg free
  2086   00144E                     l2335:
  2087                           
  2088                           ;main.c: 94:         if(DelayRead(&delay_parpadeo)) {
  2089   00144E  0E61               	movlw	low main@delay_parpadeo
  2090   001450  6E28               	movwf	DelayRead@delay^0,c
  2091   001452  EC25  F00C         	call	_DelayRead	;wreg free
  2092   001456  0900               	iorlw	0
  2093   001458  B4D8               	btfsc	status,2,c
  2094   00145A  EF31  F00A         	goto	u1001
  2095   00145E  EF33  F00A         	goto	u1000
  2096   001462                     u1001:
  2097   001462  EF6C  F009         	goto	l280
  2098   001466                     u1000:
  2099   001466                     
  2100                           ;main.c: 95:             LATEbits.LATE0 = !LATEbits.LATE0;
  2101   001466  A08D               	btfss	141,0,c	;volatile
  2102   001468  EF38  F00A         	goto	u1011
  2103   00146C  EF3C  F00A         	goto	u1010
  2104   001470                     u1011:
  2105   001470  6A42               	clrf	??_main^0,c
  2106   001472  2A42               	incf	??_main^0,f,c
  2107   001474  EF3D  F00A         	goto	u1028
  2108   001478                     u1010:
  2109   001478  6A42               	clrf	??_main^0,c
  2110   00147A                     u1028:
  2111   00147A  508D               	movf	141,w,c	;volatile
  2112   00147C  1842               	xorwf	??_main^0,w,c
  2113   00147E  0BFE               	andlw	-2
  2114   001480  1842               	xorwf	??_main^0,w,c
  2115   001482  6E8D               	movwf	141,c	;volatile
  2116   001484  EF6C  F009         	goto	l280
  2117   001488  EF20  F000         	goto	start
  2118   00148C                     __end_of_main:
  2119                           	callstack 0
  2120                           
  2121 ;; *************** function _strcpy *****************
  2122 ;; Defined at:
  2123 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strcpy.c"
  2124 ;; Parameters:    Size  Location     Type
  2125 ;;  dest            1    0[COMRAM] PTR unsigned char 
  2126 ;;		 -> main@data_out_s(56), 
  2127 ;;  src             1    1[COMRAM] PTR const unsigned char 
  2128 ;;		 -> STR_15(11), STR_14(12), STR_11(14), STR_8(12), 
  2129 ;;		 -> STR_5(14), STR_2(8), STR_1(8), 
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;  d               1    3[COMRAM] PTR unsigned char 
  2132 ;;		 -> main@data_out_s(56), 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    0[COMRAM] PTR unsigned char 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2142 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2143 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2144 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2145 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2146 ;;Total ram usage:        4 bytes
  2147 ;; Hardware stack levels used: 1
  2148 ;; Hardware stack levels required when called: 1
  2149 ;; This function calls:
  2150 ;;		Nothing
  2151 ;; This function is called by:
  2152 ;;		_main
  2153 ;; This function uses a non-reentrant model
  2154 ;;
  2155                           
  2156                           	psect	text1
  2157   001BFC                     __ptext1:
  2158                           	callstack 0
  2159   001BFC                     _strcpy:
  2160                           	callstack 29
  2161   001BFC  C027  F02A         	movff	strcpy@dest,strcpy@d
  2162   001C00                     l2251:
  2163   001C00  2A28               	incf	strcpy@src^0,f,c
  2164   001C02  0428               	decf	strcpy@src^0,w,c
  2165   001C04  6E29               	movwf	??_strcpy^0,c
  2166   001C06  C029  FFF6         	movff	??_strcpy,tblptrl
  2167   001C0A                     	if	1	;There is more than 1 active tblptr byte
  2168   001C0A  0E10               	movlw	high __smallconst
  2169   001C0C  6EF7               	movwf	tblptrh,c
  2170   001C0E                     	endif
  2171   001C0E                     	if	0	;tblptru may be non-zero
  2172   001C0E                     	endif
  2173   001C0E                     	if	0	;tblptru may be non-zero
  2174   001C0E                     	endif
  2175   001C0E  2A2A               	incf	strcpy@d^0,f,c
  2176   001C10  042A               	decf	strcpy@d^0,w,c
  2177   001C12  6ED9               	movwf	fsr2l,c
  2178   001C14  6ADA               	clrf	fsr2h,c
  2179   001C16  0008               	tblrd		*
  2180   001C18  CFF5 FFDF          	movff	tablat,indf2
  2181   001C1C  50DF               	movf	indf2,w,c
  2182   001C1E  A4D8               	btfss	status,2,c
  2183   001C20  EF14  F00E         	goto	u901
  2184   001C24  EF16  F00E         	goto	u900
  2185   001C28                     u901:
  2186   001C28  EF00  F00E         	goto	l2251
  2187   001C2C                     u900:
  2188   001C2C  0012               	return		;funcret
  2189   001C2E                     __end_of_strcpy:
  2190                           	callstack 0
  2191                           
  2192 ;; *************** function _strcmp *****************
  2193 ;; Defined at:
  2194 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strcmp.c"
  2195 ;; Parameters:    Size  Location     Type
  2196 ;;  l               1    0[COMRAM] PTR const unsigned char 
  2197 ;;		 -> data_in_s$buffer(50), data_in_s(56), 
  2198 ;;  r               1    1[COMRAM] PTR const unsigned char 
  2199 ;;		 -> STR_13(8), STR_10(8), STR_7(8), STR_4(8), 
  2200 ;; Auto vars:     Size  Location     Type
  2201 ;;		None
  2202 ;; Return value:  Size  Location     Type
  2203 ;;                  2    0[COMRAM] int 
  2204 ;; Registers used:
  2205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  2206 ;; Tracked objects:
  2207 ;;		On entry : 0/0
  2208 ;;		On exit  : 0/0
  2209 ;;		Unchanged: 0/0
  2210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2211 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;Total ram usage:        3 bytes
  2216 ;; Hardware stack levels used: 1
  2217 ;; Hardware stack levels required when called: 1
  2218 ;; This function calls:
  2219 ;;		Nothing
  2220 ;; This function is called by:
  2221 ;;		_main
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text2
  2226   001970                     __ptext2:
  2227                           	callstack 0
  2228   001970                     _strcmp:
  2229                           	callstack 29
  2230   001970  EFBC  F00C         	goto	l2257
  2231   001974                     l2255:
  2232   001974  2A27               	incf	strcmp@l^0,f,c
  2233   001976  2A28               	incf	strcmp@r^0,f,c
  2234   001978                     l2257:
  2235   001978  5027               	movf	strcmp@l^0,w,c
  2236   00197A  6ED9               	movwf	fsr2l,c
  2237   00197C  6ADA               	clrf	fsr2h,c
  2238   00197E  50DF               	movf	indf2,w,c
  2239   001980  6E29               	movwf	??_strcmp^0,c
  2240   001982  C028  FFF6         	movff	strcmp@r,tblptrl
  2241   001986                     	if	1	;There is more than 1 active tblptr byte
  2242   001986  0E10               	movlw	high __smallconst
  2243   001988  6EF7               	movwf	tblptrh,c
  2244   00198A                     	endif
  2245   00198A                     	if	0	;tblptru may be non-zero
  2246   00198A                     	endif
  2247   00198A                     	if	0	;tblptru may be non-zero
  2248   00198A                     	endif
  2249   00198A  0008               	tblrd		*
  2250   00198C  50F5               	movf	tablat,w,c
  2251   00198E  1829               	xorwf	??_strcmp^0,w,c
  2252   001990  A4D8               	btfss	status,2,c
  2253   001992  EFCD  F00C         	goto	u911
  2254   001996  EFCF  F00C         	goto	u910
  2255   00199A                     u911:
  2256   00199A  EFDA  F00C         	goto	l2261
  2257   00199E                     u910:
  2258   00199E  5027               	movf	strcmp@l^0,w,c
  2259   0019A0  6ED9               	movwf	fsr2l,c
  2260   0019A2  6ADA               	clrf	fsr2h,c
  2261   0019A4  50DF               	movf	indf2,w,c
  2262   0019A6  A4D8               	btfss	status,2,c
  2263   0019A8  EFD8  F00C         	goto	u921
  2264   0019AC  EFDA  F00C         	goto	u920
  2265   0019B0                     u921:
  2266   0019B0  EFBA  F00C         	goto	l2255
  2267   0019B4                     u920:
  2268   0019B4                     l2261:
  2269   0019B4  5027               	movf	strcmp@l^0,w,c
  2270   0019B6  6ED9               	movwf	fsr2l,c
  2271   0019B8  6ADA               	clrf	fsr2h,c
  2272   0019BA  50DF               	movf	indf2,w,c
  2273   0019BC  6E29               	movwf	??_strcmp^0,c
  2274   0019BE  C028  FFF6         	movff	strcmp@r,tblptrl
  2275   0019C2                     	if	1	;There is more than 1 active tblptr byte
  2276   0019C2  0E10               	movlw	high __smallconst
  2277   0019C4  6EF7               	movwf	tblptrh,c
  2278   0019C6                     	endif
  2279   0019C6                     	if	0	;tblptru may be non-zero
  2280   0019C6                     	endif
  2281   0019C6                     	if	0	;tblptru may be non-zero
  2282   0019C6                     	endif
  2283   0019C6  0008               	tblrd		*
  2284   0019C8  50F5               	movf	tablat,w,c
  2285   0019CA  5C29               	subwf	??_strcmp^0,w,c
  2286   0019CC  6E27               	movwf	?_strcmp^0,c
  2287   0019CE  6A28               	clrf	(?_strcmp+1)^0,c
  2288   0019D0  A0D8               	btfss	status,0,c
  2289   0019D2  0628               	decf	(?_strcmp+1)^0,f,c
  2290   0019D4  0012               	return		;funcret
  2291   0019D6                     __end_of_strcmp:
  2292                           	callstack 0
  2293                           
  2294 ;; *************** function _MRF24TransmitirDato *****************
  2295 ;; Defined at:
  2296 ;;		line 315 in file "drivers/scr/API_MRF24J40.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;  p_info_out_s    1   10[COMRAM] PTR struct .
  2299 ;;		 -> main@data_out_s(56), 
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;  i               1   13[COMRAM] char 
  2302 ;;  largo_mensaj    2   14[COMRAM] unsigned int 
  2303 ;;  pos_mem         1   16[COMRAM] unsigned char 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      enum E3263
  2306 ;; Registers used:
  2307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2313 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2314 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2315 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2316 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2317 ;;Total ram usage:        7 bytes
  2318 ;; Hardware stack levels used: 1
  2319 ;; Hardware stack levels required when called: 5
  2320 ;; This function calls:
  2321 ;;		_SetLongAddr
  2322 ;;		_SetShortAddr
  2323 ;;		_strlen
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text3
  2330   001070                     __ptext3:
  2331                           	callstack 0
  2332   001070                     _MRF24TransmitirDato:
  2333                           	callstack 25
  2334   001070                     
  2335                           ;drivers/scr/API_MRF24J40.c: 317:  if(estadoActual != INICIALIZACION_OK)
  2336   001070  5005               	movf	_estadoActual^0,w,c
  2337   001072  B4D8               	btfsc	status,2,c
  2338   001074  EF3E  F008         	goto	u741
  2339   001078  EF40  F008         	goto	u740
  2340   00107C                     u741:
  2341   00107C  EF42  F008         	goto	l2047
  2342   001080                     u740:
  2343   001080  EF4A  F009         	goto	l144
  2344   001084                     l2047:
  2345                           
  2346                           ;drivers/scr/API_MRF24J40.c: 320:  if(p_info_out_s->dest_address == (0X00))
  2347   001084  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2348   001086  6ED9               	movwf	fsr2l,c
  2349   001088  6ADA               	clrf	fsr2h,c
  2350   00108A  0E02               	movlw	2
  2351   00108C  26D9               	addwf	fsr2l,f,c
  2352   00108E  50DE               	movf	postinc2,w,c
  2353   001090  10DE               	iorwf	postinc2,w,c
  2354   001092  A4D8               	btfss	status,2,c
  2355   001094  EF4E  F008         	goto	u751
  2356   001098  EF50  F008         	goto	u750
  2357   00109C                     u751:
  2358   00109C  EF52  F008         	goto	l145
  2359   0010A0                     u750:
  2360   0010A0  EF4A  F009         	goto	l144
  2361   0010A4                     l145:
  2362                           
  2363                           ;drivers/scr/API_MRF24J40.c: 322:  uint8_t pos_mem = 0;
  2364   0010A4  6A37               	clrf	MRF24TransmitirDato@pos_mem^0,c
  2365   0010A6                     
  2366                           ;drivers/scr/API_MRF24J40.c: 323:  unsigned largo_mensaje = strlen(p_info_out_s->buffer)
      +                          ;
  2367   0010A6  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2368   0010A8  0F06               	addlw	6
  2369   0010AA  6E27               	movwf	strlen@s^0,c
  2370   0010AC  EC2F  F00E         	call	_strlen	;wreg free
  2371   0010B0  C027  F035         	movff	?_strlen,MRF24TransmitirDato@largo_mensaje
  2372   0010B4  C028  F036         	movff	?_strlen+1,MRF24TransmitirDato@largo_mensaje+1
  2373   0010B8                     
  2374                           ;drivers/scr/API_MRF24J40.c: 325:  if(largo_mensaje == 0)
  2375   0010B8  5035               	movf	MRF24TransmitirDato@largo_mensaje^0,w,c
  2376   0010BA  1036               	iorwf	(MRF24TransmitirDato@largo_mensaje+1)^0,w,c
  2377   0010BC  A4D8               	btfss	status,2,c
  2378   0010BE  EF63  F008         	goto	u761
  2379   0010C2  EF65  F008         	goto	u760
  2380   0010C6                     u761:
  2381   0010C6  EF67  F008         	goto	l2057
  2382   0010CA                     u760:
  2383   0010CA  EF4A  F009         	goto	l144
  2384   0010CE                     l2057:
  2385                           
  2386                           ;drivers/scr/API_MRF24J40.c: 327:  SetLongAddr(pos_mem++, (0X0B));
  2387   0010CE  0E00               	movlw	0
  2388   0010D0  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  2389   0010D2  0E00               	movlw	0
  2390   0010D4  6E2C               	movwf	SetLongAddr@reg_address^0,c
  2391   0010D6  0E0B               	movlw	11
  2392   0010D8  6E2E               	movwf	SetLongAddr@valor^0,c
  2393   0010DA  EC71  F00D         	call	_SetLongAddr	;wreg free
  2394   0010DE  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2395   0010E0                     
  2396                           ;drivers/scr/API_MRF24J40.c: 328:  SetLongAddr(pos_mem++, (uint8_t)largo_mensaje + (0X0B
      +                          ));
  2397   0010E0  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2398   0010E4  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2399   0010E6  5035               	movf	MRF24TransmitirDato@largo_mensaje^0,w,c
  2400   0010E8  0F0B               	addlw	11
  2401   0010EA  6E2E               	movwf	SetLongAddr@valor^0,c
  2402   0010EC  EC71  F00D         	call	_SetLongAddr	;wreg free
  2403   0010F0  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2404   0010F2                     
  2405                           ;drivers/scr/API_MRF24J40.c: 329:  SetLongAddr(pos_mem++, (0X01) | (0X20) | (0X40));
  2406   0010F2  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2407   0010F6  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2408   0010F8  0E61               	movlw	97
  2409   0010FA  6E2E               	movwf	SetLongAddr@valor^0,c
  2410   0010FC  EC71  F00D         	call	_SetLongAddr	;wreg free
  2411   001100  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2412                           
  2413                           ;drivers/scr/API_MRF24J40.c: 330:  SetLongAddr(pos_mem++, (0X80) | (0X08));
  2414   001102  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2415   001106  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2416   001108  0E88               	movlw	136
  2417   00110A  6E2E               	movwf	SetLongAddr@valor^0,c
  2418   00110C  EC71  F00D         	call	_SetLongAddr	;wreg free
  2419   001110  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2420   001112                     
  2421                           ;drivers/scr/API_MRF24J40.c: 331:  SetLongAddr(pos_mem++, data_config_s.sequence_number+
      +                          +);
  2422   001112  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2423   001116  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2424   001118  C007  F02E         	movff	_data_config_s,SetLongAddr@valor
  2425   00111C  EC71  F00D         	call	_SetLongAddr	;wreg free
  2426   001120  2A07               	incf	_data_config_s^0,f,c
  2427   001122  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2428   001124                     
  2429                           ;drivers/scr/API_MRF24J40.c: 333:  if(p_info_out_s->dest_panid == (0X00))
  2430   001124  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2431   001126  6ED9               	movwf	fsr2l,c
  2432   001128  6ADA               	clrf	fsr2h,c
  2433   00112A  50DE               	movf	postinc2,w,c
  2434   00112C  10DE               	iorwf	postinc2,w,c
  2435   00112E  A4D8               	btfss	status,2,c
  2436   001130  EF9C  F008         	goto	u771
  2437   001134  EF9E  F008         	goto	u770
  2438   001138                     u771:
  2439   001138  EFA5  F008         	goto	l2075
  2440   00113C                     u770:
  2441   00113C                     
  2442                           ;drivers/scr/API_MRF24J40.c: 334:   p_info_out_s->dest_panid = data_config_s.my_panid;
  2443   00113C  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2444   00113E  6ED9               	movwf	fsr2l,c
  2445   001140  6ADA               	clrf	fsr2h,c
  2446   001142  C021  FFDE         	movff	_data_config_s+26,postinc2
  2447   001146  C022  FFDD         	movff	_data_config_s+27,postdec2
  2448   00114A                     l2075:
  2449                           
  2450                           ;drivers/scr/API_MRF24J40.c: 335:  SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_p
      +                          anid);
  2451   00114A  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2452   00114E  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2453   001150  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2454   001152  6ED9               	movwf	fsr2l,c
  2455   001154  6ADA               	clrf	fsr2h,c
  2456   001156  50DF               	movf	indf2,w,c
  2457   001158  6E2E               	movwf	SetLongAddr@valor^0,c
  2458   00115A  EC71  F00D         	call	_SetLongAddr	;wreg free
  2459   00115E  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2460   001160                     
  2461                           ;drivers/scr/API_MRF24J40.c: 336:  SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_
      +                          panid >> (0X08)));
  2462   001160  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2463   001164  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2464   001166  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2465   001168  6ED9               	movwf	fsr2l,c
  2466   00116A  6ADA               	clrf	fsr2h,c
  2467   00116C  CFDE F032          	movff	postinc2,??_MRF24TransmitirDato
  2468   001170  CFDD F033          	movff	postdec2,??_MRF24TransmitirDato+1
  2469   001174  C033  F032         	movff	??_MRF24TransmitirDato+1,??_MRF24TransmitirDato
  2470   001178  6A33               	clrf	(??_MRF24TransmitirDato+1)^0,c
  2471   00117A  5032               	movf	??_MRF24TransmitirDato^0,w,c
  2472   00117C  6E2E               	movwf	SetLongAddr@valor^0,c
  2473   00117E  EC71  F00D         	call	_SetLongAddr	;wreg free
  2474   001182  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2475   001184                     
  2476                           ;drivers/scr/API_MRF24J40.c: 337:  SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->dest_a
      +                          ddress);
  2477   001184  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2478   001188  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2479   00118A  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2480   00118C  6ED9               	movwf	fsr2l,c
  2481   00118E  6ADA               	clrf	fsr2h,c
  2482   001190  0E02               	movlw	2
  2483   001192  26D9               	addwf	fsr2l,f,c
  2484   001194  50DF               	movf	indf2,w,c
  2485   001196  6E2E               	movwf	SetLongAddr@valor^0,c
  2486   001198  EC71  F00D         	call	_SetLongAddr	;wreg free
  2487   00119C  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2488   00119E                     
  2489                           ;drivers/scr/API_MRF24J40.c: 338:  SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->dest_
      +                          address >> (0X08)));
  2490   00119E  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2491   0011A2  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2492   0011A4  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2493   0011A6  6ED9               	movwf	fsr2l,c
  2494   0011A8  6ADA               	clrf	fsr2h,c
  2495   0011AA  0E02               	movlw	2
  2496   0011AC  26D9               	addwf	fsr2l,f,c
  2497   0011AE  CFDE F032          	movff	postinc2,??_MRF24TransmitirDato
  2498   0011B2  CFDD F033          	movff	postdec2,??_MRF24TransmitirDato+1
  2499   0011B6  C033  F032         	movff	??_MRF24TransmitirDato+1,??_MRF24TransmitirDato
  2500   0011BA  6A33               	clrf	(??_MRF24TransmitirDato+1)^0,c
  2501   0011BC  5032               	movf	??_MRF24TransmitirDato^0,w,c
  2502   0011BE  6E2E               	movwf	SetLongAddr@valor^0,c
  2503   0011C0  EC71  F00D         	call	_SetLongAddr	;wreg free
  2504   0011C4  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2505   0011C6                     
  2506                           ;drivers/scr/API_MRF24J40.c: 340:  if(p_info_out_s->origin_address == (0X00))
  2507   0011C6  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2508   0011C8  6ED9               	movwf	fsr2l,c
  2509   0011CA  6ADA               	clrf	fsr2h,c
  2510   0011CC  0E04               	movlw	4
  2511   0011CE  26D9               	addwf	fsr2l,f,c
  2512   0011D0  50DE               	movf	postinc2,w,c
  2513   0011D2  10DE               	iorwf	postinc2,w,c
  2514   0011D4  A4D8               	btfss	status,2,c
  2515   0011D6  EFEF  F008         	goto	u781
  2516   0011DA  EFF1  F008         	goto	u780
  2517   0011DE                     u781:
  2518   0011DE  EFFA  F008         	goto	l2095
  2519   0011E2                     u780:
  2520   0011E2                     
  2521                           ;drivers/scr/API_MRF24J40.c: 341:   p_info_out_s->origin_address = data_config_s.my_addr
      +                          ess;
  2522   0011E2  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2523   0011E4  6ED9               	movwf	fsr2l,c
  2524   0011E6  6ADA               	clrf	fsr2h,c
  2525   0011E8  0E04               	movlw	4
  2526   0011EA  26D9               	addwf	fsr2l,f,c
  2527   0011EC  C023  FFDE         	movff	_data_config_s+28,postinc2
  2528   0011F0  C024  FFDD         	movff	_data_config_s+29,postdec2
  2529   0011F4                     l2095:
  2530                           
  2531                           ;drivers/scr/API_MRF24J40.c: 342:  SetLongAddr(pos_mem++, (uint8_t) p_info_out_s->origin
      +                          _address);
  2532   0011F4  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2533   0011F8  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2534   0011FA  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2535   0011FC  6ED9               	movwf	fsr2l,c
  2536   0011FE  6ADA               	clrf	fsr2h,c
  2537   001200  0E04               	movlw	4
  2538   001202  26D9               	addwf	fsr2l,f,c
  2539   001204  50DF               	movf	indf2,w,c
  2540   001206  6E2E               	movwf	SetLongAddr@valor^0,c
  2541   001208  EC71  F00D         	call	_SetLongAddr	;wreg free
  2542   00120C  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2543   00120E                     
  2544                           ;drivers/scr/API_MRF24J40.c: 343:  SetLongAddr(pos_mem++, (uint8_t) (p_info_out_s->origi
      +                          n_address >> (0X08)));
  2545   00120E  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2546   001212  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2547   001214  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2548   001216  6ED9               	movwf	fsr2l,c
  2549   001218  6ADA               	clrf	fsr2h,c
  2550   00121A  0E04               	movlw	4
  2551   00121C  26D9               	addwf	fsr2l,f,c
  2552   00121E  CFDE F032          	movff	postinc2,??_MRF24TransmitirDato
  2553   001222  CFDD F033          	movff	postdec2,??_MRF24TransmitirDato+1
  2554   001226  C033  F032         	movff	??_MRF24TransmitirDato+1,??_MRF24TransmitirDato
  2555   00122A  6A33               	clrf	(??_MRF24TransmitirDato+1)^0,c
  2556   00122C  5032               	movf	??_MRF24TransmitirDato^0,w,c
  2557   00122E  6E2E               	movwf	SetLongAddr@valor^0,c
  2558   001230  EC71  F00D         	call	_SetLongAddr	;wreg free
  2559   001234  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2560   001236                     
  2561                           ;drivers/scr/API_MRF24J40.c: 345:  for(int8_t i = 0; i < largo_mensaje; i++) {
  2562   001236  6A34               	clrf	MRF24TransmitirDato@i^0,c
  2563   001238  EF2D  F009         	goto	l2111
  2564   00123C                     l2105:
  2565                           
  2566                           ;drivers/scr/API_MRF24J40.c: 347:   SetLongAddr(pos_mem++, p_info_out_s->buffer[i]);
  2567   00123C  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2568   001240  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2569   001242  5031               	movf	MRF24TransmitirDato@p_info_out_s^0,w,c
  2570   001244  2434               	addwf	MRF24TransmitirDato@i^0,w,c
  2571   001246  6ED9               	movwf	fsr2l,c
  2572   001248  6ADA               	clrf	fsr2h,c
  2573   00124A  0E06               	movlw	6
  2574   00124C  26D9               	addwf	fsr2l,f,c
  2575   00124E  50DF               	movf	indf2,w,c
  2576   001250  6E2E               	movwf	SetLongAddr@valor^0,c
  2577   001252  EC71  F00D         	call	_SetLongAddr	;wreg free
  2578   001256  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2579   001258                     
  2580                           ;drivers/scr/API_MRF24J40.c: 348:  }
  2581   001258  2A34               	incf	MRF24TransmitirDato@i^0,f,c
  2582   00125A                     l2111:
  2583   00125A  C034  F032         	movff	MRF24TransmitirDato@i,??_MRF24TransmitirDato
  2584   00125E  6A33               	clrf	(??_MRF24TransmitirDato+1)^0,c
  2585   001260  BE32               	btfsc	??_MRF24TransmitirDato^0,7,c
  2586   001262  0633               	decf	(??_MRF24TransmitirDato+1)^0,f,c
  2587   001264  5035               	movf	MRF24TransmitirDato@largo_mensaje^0,w,c
  2588   001266  5C32               	subwf	??_MRF24TransmitirDato^0,w,c
  2589   001268  5036               	movf	(MRF24TransmitirDato@largo_mensaje+1)^0,w,c
  2590   00126A  5833               	subwfb	(??_MRF24TransmitirDato+1)^0,w,c
  2591   00126C  A0D8               	btfss	status,0,c
  2592   00126E  EF3B  F009         	goto	u791
  2593   001272  EF3D  F009         	goto	u790
  2594   001276                     u791:
  2595   001276  EF1E  F009         	goto	l2105
  2596   00127A                     u790:
  2597   00127A                     
  2598                           ;drivers/scr/API_MRF24J40.c: 349:  SetLongAddr(pos_mem++, (0X00));
  2599   00127A  C037  F02C         	movff	MRF24TransmitirDato@pos_mem,SetLongAddr@reg_address
  2600   00127E  6A2D               	clrf	(SetLongAddr@reg_address+1)^0,c
  2601   001280  0E00               	movlw	0
  2602   001282  6E2E               	movwf	SetLongAddr@valor^0,c
  2603   001284  EC71  F00D         	call	_SetLongAddr	;wreg free
  2604   001288  2A37               	incf	MRF24TransmitirDato@pos_mem^0,f,c
  2605   00128A                     
  2606                           ;drivers/scr/API_MRF24J40.c: 350:  SetShortAddr((0x1B), (0X04) | (0X01));
  2607   00128A  0E05               	movlw	5
  2608   00128C  6E29               	movwf	SetShortAddr@valor^0,c
  2609   00128E  0E1B               	movlw	27
  2610   001290  ECAA  F00E         	call	_SetShortAddr
  2611   001294                     l144:
  2612   001294  0012               	return		;funcret
  2613   001296                     __end_of_MRF24TransmitirDato:
  2614                           	callstack 0
  2615                           
  2616 ;; *************** function _strlen *****************
  2617 ;; Defined at:
  2618 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strlen.c"
  2619 ;; Parameters:    Size  Location     Type
  2620 ;;  s               1    0[COMRAM] PTR const unsigned char 
  2621 ;;		 -> data_out_s$buffer(50), main@data_out_s(56), 
  2622 ;; Auto vars:     Size  Location     Type
  2623 ;;  a               1    2[COMRAM] PTR const unsigned char 
  2624 ;;		 -> data_out_s$buffer(50), main@data_out_s(56), 
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  2    0[COMRAM] unsigned int 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2637 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2638 ;;Total ram usage:        3 bytes
  2639 ;; Hardware stack levels used: 1
  2640 ;; Hardware stack levels required when called: 1
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_MRF24TransmitirDato
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text4
  2649   001C5E                     __ptext4:
  2650                           	callstack 0
  2651   001C5E                     _strlen:
  2652                           	callstack 28
  2653   001C5E  C027  F029         	movff	strlen@s,strlen@a
  2654   001C62  EF34  F00E         	goto	l2003
  2655   001C66                     l2001:
  2656   001C66  2A27               	incf	strlen@s^0,f,c
  2657   001C68                     l2003:
  2658   001C68  5027               	movf	strlen@s^0,w,c
  2659   001C6A  6ED9               	movwf	fsr2l,c
  2660   001C6C  6ADA               	clrf	fsr2h,c
  2661   001C6E  50DF               	movf	indf2,w,c
  2662   001C70  A4D8               	btfss	status,2,c
  2663   001C72  EF3D  F00E         	goto	u731
  2664   001C76  EF3F  F00E         	goto	u730
  2665   001C7A                     u731:
  2666   001C7A  EF33  F00E         	goto	l2001
  2667   001C7E                     u730:
  2668   001C7E  5029               	movf	strlen@a^0,w,c
  2669   001C80  5C27               	subwf	strlen@s^0,w,c
  2670   001C82  6E27               	movwf	?_strlen^0,c
  2671   001C84  6A28               	clrf	(?_strlen+1)^0,c
  2672   001C86  BE27               	btfsc	?_strlen^0,7,c
  2673   001C88  0628               	decf	(?_strlen+1)^0,f,c
  2674   001C8A  0012               	return		;funcret
  2675   001C8C                     __end_of_strlen:
  2676                           	callstack 0
  2677                           
  2678 ;; *************** function _MRF24ReciboPaquete *****************
  2679 ;; Defined at:
  2680 ;;		line 376 in file "drivers/scr/API_MRF24J40.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;  i               1   18[COMRAM] unsigned char 
  2685 ;;  add             2   16[COMRAM] unsigned short 
  2686 ;;  largo_mensaj    1   15[COMRAM] unsigned char 
  2687 ;; Return value:  Size  Location     Type
  2688 ;;                  1    wreg      enum E3263
  2689 ;; Registers used:
  2690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2691 ;; Tracked objects:
  2692 ;;		On entry : 0/0
  2693 ;;		On exit  : 0/0
  2694 ;;		Unchanged: 0/0
  2695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2697 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2698 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2699 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;Total ram usage:        9 bytes
  2701 ;; Hardware stack levels used: 1
  2702 ;; Hardware stack levels required when called: 5
  2703 ;; This function calls:
  2704 ;;		_GetLongAddr
  2705 ;;		_GetShortAddr
  2706 ;;		_SetLongAddr
  2707 ;;		_SetShortAddr
  2708 ;; This function is called by:
  2709 ;;		_main
  2710 ;; This function uses a non-reentrant model
  2711 ;;
  2712                           
  2713                           	psect	text5
  2714   00176E                     __ptext5:
  2715                           	callstack 0
  2716   00176E                     _MRF24ReciboPaquete:
  2717                           	callstack 25
  2718   00176E                     
  2719                           ;drivers/scr/API_MRF24J40.c: 389:  if(estadoActual != INICIALIZACION_OK)
  2720   00176E  5005               	movf	_estadoActual^0,w,c
  2721   001770  B4D8               	btfsc	status,2,c
  2722   001772  EFBD  F00B         	goto	u821
  2723   001776  EFBF  F00B         	goto	u820
  2724   00177A                     u821:
  2725   00177A  EFC1  F00B         	goto	l2141
  2726   00177E                     u820:
  2727   00177E  EF24  F00C         	goto	l160
  2728   001782                     l2141:
  2729                           
  2730                           ;drivers/scr/API_MRF24J40.c: 391:  SetLongAddr((0x39), (0X04));
  2731   001782  0E00               	movlw	0
  2732   001784  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  2733   001786  0E39               	movlw	57
  2734   001788  6E2C               	movwf	SetLongAddr@reg_address^0,c
  2735   00178A  0E04               	movlw	4
  2736   00178C  6E2E               	movwf	SetLongAddr@valor^0,c
  2737   00178E  EC71  F00D         	call	_SetLongAddr	;wreg free
  2738                           
  2739                           ;drivers/scr/API_MRF24J40.c: 392:  SetShortAddr((0x0D), (0X04));
  2740   001792  0E04               	movlw	4
  2741   001794  6E29               	movwf	SetShortAddr@valor^0,c
  2742   001796  0E0D               	movlw	13
  2743   001798  ECAA  F00E         	call	_SetShortAddr
  2744                           
  2745                           ;drivers/scr/API_MRF24J40.c: 393:  uint8_t largo_mensaje = GetLongAddr((0x300));
  2746   00179C  0E03               	movlw	3
  2747   00179E  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  2748   0017A0  0E00               	movlw	0
  2749   0017A2  6E2C               	movwf	GetLongAddr@reg_address^0,c
  2750   0017A4  EC4F  F00D         	call	_GetLongAddr	;wreg free
  2751   0017A8  6E36               	movwf	MRF24ReciboPaquete@largo_mensaje^0,c
  2752                           
  2753                           ;drivers/scr/API_MRF24J40.c: 394:  uint16_t add = GetLongAddr((0x300) + 9);
  2754   0017AA  0E03               	movlw	3
  2755   0017AC  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  2756   0017AE  0E09               	movlw	9
  2757   0017B0  6E2C               	movwf	GetLongAddr@reg_address^0,c
  2758   0017B2  EC4F  F00D         	call	_GetLongAddr	;wreg free
  2759   0017B6  6E31               	movwf	??_MRF24ReciboPaquete^0,c
  2760   0017B8  5031               	movf	??_MRF24ReciboPaquete^0,w,c
  2761   0017BA  6E37               	movwf	MRF24ReciboPaquete@add^0,c
  2762   0017BC  6A38               	clrf	(MRF24ReciboPaquete@add+1)^0,c
  2763                           
  2764                           ;drivers/scr/API_MRF24J40.c: 395:  add = (add << (0X08)) | GetLongAddr((0x300) + 8);
  2765   0017BE  0E03               	movlw	3
  2766   0017C0  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  2767   0017C2  0E08               	movlw	8
  2768   0017C4  6E2C               	movwf	GetLongAddr@reg_address^0,c
  2769   0017C6  EC4F  F00D         	call	_GetLongAddr	;wreg free
  2770   0017CA  6E31               	movwf	??_MRF24ReciboPaquete^0,c
  2771   0017CC  5037               	movf	MRF24ReciboPaquete@add^0,w,c
  2772   0017CE  6E32               	movwf	(??_MRF24ReciboPaquete+1)^0,c
  2773   0017D0  5031               	movf	??_MRF24ReciboPaquete^0,w,c
  2774   0017D2  6E37               	movwf	MRF24ReciboPaquete@add^0,c
  2775   0017D4  C032  F038         	movff	??_MRF24ReciboPaquete+1,MRF24ReciboPaquete@add+1
  2776   0017D8                     
  2777                           ;drivers/scr/API_MRF24J40.c: 396:  data_in_s.source_address = add;
  2778   0017D8  C037  F0AF         	movff	MRF24ReciboPaquete@add,_data_in_s+2
  2779   0017DC  C038  F0B0         	movff	MRF24ReciboPaquete@add+1,_data_in_s+3
  2780   0017E0                     
  2781                           ;drivers/scr/API_MRF24J40.c: 398:  for(uint8_t i = 0; i < largo_mensaje - (0x04); i++) {
  2782   0017E0  6A39               	clrf	MRF24ReciboPaquete@i^0,c
  2783   0017E2  EF01  F00C         	goto	l2151
  2784   0017E6                     l2147:
  2785                           
  2786                           ;drivers/scr/API_MRF24J40.c: 400:   data_in_s.buffer[i] = GetLongAddr((0x300) + (0X0B) +
      +                           i - 1);
  2787   0017E6  5039               	movf	MRF24ReciboPaquete@i^0,w,c
  2788   0017E8  0FB3               	addlw	low (_data_in_s+6)
  2789   0017EA  6ED9               	movwf	fsr2l,c
  2790   0017EC  6ADA               	clrf	fsr2h,c
  2791   0017EE  0E0A               	movlw	10
  2792   0017F0  2439               	addwf	MRF24ReciboPaquete@i^0,w,c
  2793   0017F2  6E2C               	movwf	GetLongAddr@reg_address^0,c
  2794   0017F4  6A2D               	clrf	(GetLongAddr@reg_address+1)^0,c
  2795   0017F6  0E03               	movlw	3
  2796   0017F8  222D               	addwfc	(GetLongAddr@reg_address+1)^0,f,c
  2797   0017FA  EC4F  F00D         	call	_GetLongAddr	;wreg free
  2798   0017FE  6EDF               	movwf	indf2,c
  2799   001800                     
  2800                           ;drivers/scr/API_MRF24J40.c: 401:  }
  2801   001800  2A39               	incf	MRF24ReciboPaquete@i^0,f,c
  2802   001802                     l2151:
  2803   001802  0EFC               	movlw	252
  2804   001804  2436               	addwf	MRF24ReciboPaquete@largo_mensaje^0,w,c
  2805   001806  6E31               	movwf	??_MRF24ReciboPaquete^0,c
  2806   001808  6A32               	clrf	(??_MRF24ReciboPaquete+1)^0,c
  2807   00180A  0EFF               	movlw	255
  2808   00180C  2232               	addwfc	(??_MRF24ReciboPaquete+1)^0,f,c
  2809   00180E  5039               	movf	MRF24ReciboPaquete@i^0,w,c
  2810   001810  6E33               	movwf	(??_MRF24ReciboPaquete+2)^0,c
  2811   001812  6A34               	clrf	(??_MRF24ReciboPaquete+3)^0,c
  2812   001814  5031               	movf	??_MRF24ReciboPaquete^0,w,c
  2813   001816  5C33               	subwf	(??_MRF24ReciboPaquete+2)^0,w,c
  2814   001818  5034               	movf	(??_MRF24ReciboPaquete+3)^0,w,c
  2815   00181A  0A80               	xorlw	128
  2816   00181C  6E35               	movwf	(??_MRF24ReciboPaquete+4)^0,c
  2817   00181E  5032               	movf	(??_MRF24ReciboPaquete+1)^0,w,c
  2818   001820  0A80               	xorlw	128
  2819   001822  5835               	subwfb	(??_MRF24ReciboPaquete+4)^0,w,c
  2820   001824  A0D8               	btfss	status,0,c
  2821   001826  EF17  F00C         	goto	u831
  2822   00182A  EF19  F00C         	goto	u830
  2823   00182E                     u831:
  2824   00182E  EFF3  F00B         	goto	l2147
  2825   001832                     u830:
  2826   001832                     
  2827                           ;drivers/scr/API_MRF24J40.c: 402:  SetLongAddr((0x39), (0X00));
  2828   001832  0E00               	movlw	0
  2829   001834  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  2830   001836  0E39               	movlw	57
  2831   001838  6E2C               	movwf	SetLongAddr@reg_address^0,c
  2832   00183A  0E00               	movlw	0
  2833   00183C  6E2E               	movwf	SetLongAddr@valor^0,c
  2834   00183E  EC71  F00D         	call	_SetLongAddr	;wreg free
  2835                           
  2836                           ;drivers/scr/API_MRF24J40.c: 403:  (void)GetShortAddr((0x31));
  2837   001842  0E31               	movlw	49
  2838   001844  EC84  F00E         	call	_GetShortAddr
  2839   001848                     l160:
  2840   001848  0012               	return		;funcret
  2841   00184A                     __end_of_MRF24ReciboPaquete:
  2842                           	callstack 0
  2843                           
  2844 ;; *************** function _MRF24J40Init *****************
  2845 ;; Defined at:
  2846 ;;		line 287 in file "drivers/scr/API_MRF24J40.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;		None
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;		None
  2851 ;; Return value:  Size  Location     Type
  2852 ;;                  1    wreg      enum E3263
  2853 ;; Registers used:
  2854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2855 ;; Tracked objects:
  2856 ;;		On entry : 0/0
  2857 ;;		On exit  : 0/0
  2858 ;;		Unchanged: 0/0
  2859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;Total ram usage:        1 bytes
  2865 ;; Hardware stack levels used: 1
  2866 ;; Hardware stack levels required when called: 7
  2867 ;; This function calls:
  2868 ;;		_InicializoMRF24
  2869 ;;		_InicializoPines
  2870 ;;		_InicializoVariables
  2871 ;;		_SetResetPin
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text6
  2878   001B24                     __ptext6:
  2879                           	callstack 0
  2880   001B24                     _MRF24J40Init:
  2881                           	callstack 23
  2882   001B24                     
  2883                           ;drivers/scr/API_MRF24J40.c: 289:  InicializoVariables();
  2884   001B24  ECEB  F00C         	call	_InicializoVariables	;wreg free
  2885   001B28                     
  2886                           ;drivers/scr/API_MRF24J40.c: 290:  InicializoPines();
  2887   001B28  ECDD  F00E         	call	_InicializoPines	;wreg free
  2888   001B2C                     
  2889                           ;drivers/scr/API_MRF24J40.c: 291:  _delay((unsigned long)((1)*(16000000/4000.0)));;
  2890   001B2C  0E06               	movlw	6
  2891   001B2E  6E41               	movwf	??_MRF24J40Init^0,c
  2892   001B30  0E30               	movlw	48
  2893   001B32                     u1057:
  2894   001B32  2EE8               	decfsz	wreg,f,c
  2895   001B34  D7FE               	bra	u1057
  2896   001B36  2E41               	decfsz	??_MRF24J40Init^0,f,c
  2897   001B38  D7FC               	bra	u1057
  2898   001B3A  F000 F000          	nop2	
  2899   001B3E                     
  2900                           ;drivers/scr/API_MRF24J40.c: 292:  SetResetPin(1);
  2901   001B3E  0E01               	movlw	1
  2902   001B40  ECF8  F00E         	call	_SetResetPin
  2903   001B44                     
  2904                           ;drivers/scr/API_MRF24J40.c: 293:  _delay((unsigned long)((1)*(16000000/4000.0)));;
  2905   001B44  0E06               	movlw	6
  2906   001B46  6E41               	movwf	??_MRF24J40Init^0,c
  2907   001B48  0E30               	movlw	48
  2908   001B4A                     u1067:
  2909   001B4A  2EE8               	decfsz	wreg,f,c
  2910   001B4C  D7FE               	bra	u1067
  2911   001B4E  2E41               	decfsz	??_MRF24J40Init^0,f,c
  2912   001B50  D7FC               	bra	u1067
  2913   001B52  F000 F000          	nop2	
  2914   001B56                     
  2915                           ;drivers/scr/API_MRF24J40.c: 294:  estadoActual = InicializoMRF24();
  2916   001B56  EC46  F00A         	call	_InicializoMRF24	;wreg free
  2917   001B5A  6E05               	movwf	_estadoActual^0,c
  2918   001B5C  0012               	return		;funcret
  2919   001B5E                     __end_of_MRF24J40Init:
  2920                           	callstack 0
  2921                           
  2922 ;; *************** function _InicializoVariables *****************
  2923 ;; Defined at:
  2924 ;;		line 89 in file "drivers/scr/API_MRF24J40.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;		None
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  1    wreg      void 
  2931 ;; Registers used:
  2932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;Total ram usage:        0 bytes
  2943 ;; Hardware stack levels used: 1
  2944 ;; Hardware stack levels required when called: 2
  2945 ;; This function calls:
  2946 ;;		_strncpy
  2947 ;; This function is called by:
  2948 ;;		_MRF24J40Init
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text7
  2953   0019D6                     __ptext7:
  2954                           	callstack 0
  2955   0019D6                     _InicializoVariables:
  2956                           	callstack 27
  2957   0019D6                     
  2958                           ;drivers/scr/API_MRF24J40.c: 91:  if(data_config_s.my_address == 0 || data_config_s.my_p
      +                          anid == 0) {
  2959   0019D6  5023               	movf	(_data_config_s+28)^0,w,c
  2960   0019D8  1024               	iorwf	(_data_config_s+29)^0,w,c
  2961   0019DA  B4D8               	btfsc	status,2,c
  2962   0019DC  EFF2  F00C         	goto	u671
  2963   0019E0  EFF4  F00C         	goto	u670
  2964   0019E4                     u671:
  2965   0019E4  EFFD  F00C         	goto	l1923
  2966   0019E8                     u670:
  2967   0019E8  5021               	movf	(_data_config_s+26)^0,w,c
  2968   0019EA  1022               	iorwf	(_data_config_s+27)^0,w,c
  2969   0019EC  A4D8               	btfss	status,2,c
  2970   0019EE  EFFB  F00C         	goto	u681
  2971   0019F2  EFFD  F00C         	goto	u680
  2972   0019F6                     u681:
  2973   0019F6  EF1D  F00D         	goto	l102
  2974   0019FA                     u680:
  2975   0019FA                     l1923:
  2976                           
  2977                           ;drivers/scr/API_MRF24J40.c: 93:   strncpy((char *)data_config_s.security_key,
  2978   0019FA  0E09               	movlw	low (_data_config_s+2)
  2979   0019FC  6E27               	movwf	strncpy@d^0,c
  2980   0019FE  0E01               	movlw	low _default_security_key
  2981   001A00  6E28               	movwf	strncpy@s^0,c
  2982   001A02  0E00               	movlw	0
  2983   001A04  6E2A               	movwf	(strncpy@n+1)^0,c
  2984   001A06  0E10               	movlw	16
  2985   001A08  6E29               	movwf	strncpy@n^0,c
  2986   001A0A  EC7B  F00C         	call	_strncpy	;wreg free
  2987                           
  2988                           ;drivers/scr/API_MRF24J40.c: 96:   strncpy((char *)data_config_s.my_mac,
  2989   001A0E  0E19               	movlw	low (_data_config_s+18)
  2990   001A10  6E27               	movwf	strncpy@d^0,c
  2991   001A12  0E11               	movlw	low _default_mac_address
  2992   001A14  6E28               	movwf	strncpy@s^0,c
  2993   001A16  0E00               	movlw	0
  2994   001A18  6E2A               	movwf	(strncpy@n+1)^0,c
  2995   001A1A  0E08               	movlw	8
  2996   001A1C  6E29               	movwf	strncpy@n^0,c
  2997   001A1E  EC7B  F00C         	call	_strncpy	;wreg free
  2998   001A22                     
  2999                           ;drivers/scr/API_MRF24J40.c: 99:   data_config_s.sequence_number = (0X01);
  3000   001A22  0E01               	movlw	1
  3001   001A24  6E07               	movwf	_data_config_s^0,c
  3002   001A26                     
  3003                           ;drivers/scr/API_MRF24J40.c: 100:   data_config_s.my_channel = CH_11;
  3004   001A26  0E03               	movlw	3
  3005   001A28  6E08               	movwf	(_data_config_s+1)^0,c
  3006   001A2A                     
  3007                           ;drivers/scr/API_MRF24J40.c: 101:   data_config_s.my_panid = (0x1234);
  3008   001A2A  0E12               	movlw	18
  3009   001A2C  6E22               	movwf	(_data_config_s+27)^0,c
  3010   001A2E  0E34               	movlw	52
  3011   001A30  6E21               	movwf	(_data_config_s+26)^0,c
  3012   001A32                     
  3013                           ;drivers/scr/API_MRF24J40.c: 102:   data_config_s.my_address = (0x1112);
  3014   001A32  0E11               	movlw	17
  3015   001A34  6E24               	movwf	(_data_config_s+29)^0,c
  3016   001A36  0E12               	movlw	18
  3017   001A38  6E23               	movwf	(_data_config_s+28)^0,c
  3018   001A3A                     l102:
  3019   001A3A  0012               	return		;funcret
  3020   001A3C                     __end_of_InicializoVariables:
  3021                           	callstack 0
  3022                           
  3023 ;; *************** function _strncpy *****************
  3024 ;; Defined at:
  3025 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\strncpy.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;  d               1    0[COMRAM] PTR unsigned char 
  3028 ;;		 -> data_config_s(32), 
  3029 ;;  s               1    1[COMRAM] PTR const unsigned char 
  3030 ;;		 -> default_mac_address(8), default_security_key(16), 
  3031 ;;  n               2    2[COMRAM] unsigned int 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  cp              1    5[COMRAM] PTR unsigned char 
  3034 ;;		 -> data_config_s(32), 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  1    0[COMRAM] PTR unsigned char 
  3037 ;; Registers used:
  3038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3044 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;Total ram usage:        6 bytes
  3049 ;; Hardware stack levels used: 1
  3050 ;; Hardware stack levels required when called: 1
  3051 ;; This function calls:
  3052 ;;		Nothing
  3053 ;; This function is called by:
  3054 ;;		_InicializoVariables
  3055 ;; This function uses a non-reentrant model
  3056 ;;
  3057                           
  3058                           	psect	text8
  3059   0018F6                     __ptext8:
  3060                           	callstack 0
  3061   0018F6                     _strncpy:
  3062                           	callstack 27
  3063   0018F6  C027  F02C         	movff	strncpy@d,strncpy@cp
  3064   0018FA  EF9A  F00C         	goto	l1823
  3065   0018FE                     l1817:
  3066   0018FE  0629               	decf	strncpy@n^0,f,c
  3067   001900  A0D8               	btfss	status,0,c
  3068   001902  062A               	decf	(strncpy@n+1)^0,f,c
  3069   001904  2A28               	incf	strncpy@s^0,f,c
  3070   001906  0428               	decf	strncpy@s^0,w,c
  3071   001908  6E2B               	movwf	??_strncpy^0,c
  3072   00190A  C02B  FFF6         	movff	??_strncpy,tblptrl
  3073   00190E                     	if	1	;There is more than 1 active tblptr byte
  3074   00190E  0E10               	movlw	high __smallconst
  3075   001910  6EF7               	movwf	tblptrh,c
  3076   001912                     	endif
  3077   001912                     	if	0	;tblptru may be non-zero
  3078   001912                     	endif
  3079   001912                     	if	0	;tblptru may be non-zero
  3080   001912                     	endif
  3081   001912  2A2C               	incf	strncpy@cp^0,f,c
  3082   001914  042C               	decf	strncpy@cp^0,w,c
  3083   001916  6ED9               	movwf	fsr2l,c
  3084   001918  6ADA               	clrf	fsr2h,c
  3085   00191A  0008               	tblrd		*
  3086   00191C  CFF5 FFDF          	movff	tablat,indf2
  3087   001920  50DF               	movf	indf2,w,c
  3088   001922  A4D8               	btfss	status,2,c
  3089   001924  EF96  F00C         	goto	u591
  3090   001928  EF98  F00C         	goto	u590
  3091   00192C                     u591:
  3092   00192C  EF9A  F00C         	goto	l1823
  3093   001930                     u590:
  3094   001930  EFAA  F00C         	goto	l1829
  3095   001934                     l1823:
  3096   001934  5029               	movf	strncpy@n^0,w,c
  3097   001936  102A               	iorwf	(strncpy@n+1)^0,w,c
  3098   001938  A4D8               	btfss	status,2,c
  3099   00193A  EFA1  F00C         	goto	u601
  3100   00193E  EFA3  F00C         	goto	u600
  3101   001942                     u601:
  3102   001942  EF7F  F00C         	goto	l1817
  3103   001946                     u600:
  3104   001946  EFAA  F00C         	goto	l1829
  3105   00194A                     l1825:
  3106   00194A  502C               	movf	strncpy@cp^0,w,c
  3107   00194C  6ED9               	movwf	fsr2l,c
  3108   00194E  6ADA               	clrf	fsr2h,c
  3109   001950  6ADF               	clrf	indf2,c
  3110   001952  2A2C               	incf	strncpy@cp^0,f,c
  3111   001954                     l1829:
  3112   001954  0629               	decf	strncpy@n^0,f,c
  3113   001956  A0D8               	btfss	status,0,c
  3114   001958  062A               	decf	(strncpy@n+1)^0,f,c
  3115   00195A  2829               	incf	strncpy@n^0,w,c
  3116   00195C  E106               	bnz	u611
  3117   00195E  282A               	incf	(strncpy@n+1)^0,w,c
  3118   001960  A4D8               	btfss	status,2,c
  3119   001962  EFB5  F00C         	goto	u611
  3120   001966  EFB7  F00C         	goto	u610
  3121   00196A                     u611:
  3122   00196A  EFA5  F00C         	goto	l1825
  3123   00196E                     u610:
  3124   00196E  0012               	return		;funcret
  3125   001970                     __end_of_strncpy:
  3126                           	callstack 0
  3127                           
  3128 ;; *************** function _InicializoPines *****************
  3129 ;; Defined at:
  3130 ;;		line 21 in file "drivers/scr/API_MRF24J40_port.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;                  1    wreg      void 
  3137 ;; Registers used:
  3138 ;;		wreg, cstack
  3139 ;; Tracked objects:
  3140 ;;		On entry : 0/0
  3141 ;;		On exit  : 0/0
  3142 ;;		Unchanged: 0/0
  3143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3148 ;;Total ram usage:        0 bytes
  3149 ;; Hardware stack levels used: 1
  3150 ;; Hardware stack levels required when called: 2
  3151 ;; This function calls:
  3152 ;;		_SetCSPin
  3153 ;;		_SetResetPin
  3154 ;;		_SetWakePin
  3155 ;; This function is called by:
  3156 ;;		_MRF24J40Init
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160                           	psect	text9
  3161   001DBA                     __ptext9:
  3162                           	callstack 0
  3163   001DBA                     _InicializoPines:
  3164                           	callstack 27
  3165   001DBA                     
  3166                           ;drivers/scr/API_MRF24J40_port.c: 23:     SetCSPin(1);
  3167   001DBA  0E01               	movlw	1
  3168   001DBC  EC0D  F00F         	call	_SetCSPin
  3169                           
  3170                           ;drivers/scr/API_MRF24J40_port.c: 24:     SetWakePin(1);
  3171   001DC0  0E01               	movlw	1
  3172   001DC2  ECF1  F00E         	call	_SetWakePin
  3173                           
  3174                           ;drivers/scr/API_MRF24J40_port.c: 25:     SetResetPin(0);
  3175   001DC6  0E00               	movlw	0
  3176   001DC8  ECF8  F00E         	call	_SetResetPin
  3177   001DCC  0012               	return		;funcret
  3178   001DCE                     __end_of_InicializoPines:
  3179                           	callstack 0
  3180                           
  3181 ;; *************** function _SetWakePin *****************
  3182 ;; Defined at:
  3183 ;;		line 45 in file "drivers/scr/API_MRF24J40_port.c"
  3184 ;; Parameters:    Size  Location     Type
  3185 ;;  estado          1    wreg     _Bool 
  3186 ;; Auto vars:     Size  Location     Type
  3187 ;;  estado          1    0[COMRAM] _Bool 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  1    wreg      void 
  3190 ;; Registers used:
  3191 ;;		wreg
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;Total ram usage:        1 bytes
  3202 ;; Hardware stack levels used: 1
  3203 ;; Hardware stack levels required when called: 1
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_InicializoPines
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text10
  3212   001DE2                     __ptext10:
  3213                           	callstack 0
  3214   001DE2                     _SetWakePin:
  3215                           	callstack 27
  3216                           
  3217                           ;incstack = 0
  3218                           ;SetWakePin@estado stored from wreg
  3219   001DE2  6E27               	movwf	SetWakePin@estado^0,c
  3220   001DE4                     
  3221                           ;drivers/scr/API_MRF24J40_port.c: 47:     LATCbits.LATC7 = estado;
  3222   001DE4  B027               	btfsc	SetWakePin@estado^0,0,c
  3223   001DE6  D002               	bra	u575
  3224   001DE8  9E8B               	bcf	139,7,c	;volatile
  3225   001DEA  D001               	bra	u576
  3226   001DEC                     u575:
  3227   001DEC  8E8B               	bsf	139,7,c	;volatile
  3228   001DEE                     u576:
  3229   001DEE  0012               	return		;funcret
  3230   001DF0                     __end_of_SetWakePin:
  3231                           	callstack 0
  3232                           
  3233 ;; *************** function _SetResetPin *****************
  3234 ;; Defined at:
  3235 ;;		line 56 in file "drivers/scr/API_MRF24J40_port.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;  estado          1    wreg     _Bool 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  estado          1    0[COMRAM] _Bool 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;Total ram usage:        1 bytes
  3254 ;; Hardware stack levels used: 1
  3255 ;; Hardware stack levels required when called: 1
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_InicializoPines
  3260 ;;		_MRF24J40Init
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           	psect	text11
  3265   001DF0                     __ptext11:
  3266                           	callstack 0
  3267   001DF0                     _SetResetPin:
  3268                           	callstack 28
  3269                           
  3270                           ;incstack = 0
  3271                           ;SetResetPin@estado stored from wreg
  3272   001DF0  6E27               	movwf	SetResetPin@estado^0,c
  3273   001DF2                     
  3274                           ;drivers/scr/API_MRF24J40_port.c: 58:     LATDbits.LATD4 = estado;
  3275   001DF2  B027               	btfsc	SetResetPin@estado^0,0,c
  3276   001DF4  D002               	bra	u585
  3277   001DF6  988C               	bcf	140,4,c	;volatile
  3278   001DF8  D001               	bra	u586
  3279   001DFA                     u585:
  3280   001DFA  888C               	bsf	140,4,c	;volatile
  3281   001DFC                     u586:
  3282   001DFC  0012               	return		;funcret
  3283   001DFE                     __end_of_SetResetPin:
  3284                           	callstack 0
  3285                           
  3286 ;; *************** function _InicializoMRF24 *****************
  3287 ;; Defined at:
  3288 ;;		line 112 in file "drivers/scr/API_MRF24J40.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  delay_time_o    9   17[COMRAM] struct .
  3293 ;;  lectura         1   16[COMRAM] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      enum E3263
  3296 ;; Registers used:
  3297 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;Total ram usage:       12 bytes
  3308 ;; Hardware stack levels used: 1
  3309 ;; Hardware stack levels required when called: 6
  3310 ;; This function calls:
  3311 ;;		_DelayInit
  3312 ;;		_DelayRead
  3313 ;;		_DelayReset
  3314 ;;		_GetLongAddr
  3315 ;;		_GetShortAddr
  3316 ;;		_SetChannel
  3317 ;;		_SetDeviceAddress
  3318 ;;		_SetDeviceMACAddress
  3319 ;;		_SetLongAddr
  3320 ;;		_SetShortAddr
  3321 ;; This function is called by:
  3322 ;;		_MRF24J40Init
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text12
  3327   00148C                     __ptext12:
  3328                           	callstack 0
  3329   00148C                     _InicializoMRF24:
  3330                           	callstack 23
  3331   00148C                     
  3332                           ;drivers/scr/API_MRF24J40.c: 114:  uint8_t lectura;;drivers/scr/API_MRF24J40.c: 115:  de
      +                          layNoBloqueanteData delay_time_out;;drivers/scr/API_MRF24J40.c: 116:  DelayInit(&delay_t
      +                          ime_out, 200);
  3333   00148C  0E38               	movlw	low InicializoMRF24@delay_time_out
  3334   00148E  6E27               	movwf	DelayInit@delay^0,c
  3335   001490  0EC8               	movlw	200
  3336   001492  6E28               	movwf	DelayInit@duration^0,c
  3337   001494  0E00               	movlw	0
  3338   001496  6E29               	movwf	(DelayInit@duration+1)^0,c
  3339   001498  0E00               	movlw	0
  3340   00149A  6E2A               	movwf	(DelayInit@duration+2)^0,c
  3341   00149C  0E00               	movlw	0
  3342   00149E  6E2B               	movwf	(DelayInit@duration+3)^0,c
  3343   0014A0  EC70  F00E         	call	_DelayInit	;wreg free
  3344   0014A4                     
  3345                           ;drivers/scr/API_MRF24J40.c: 117:  SetShortAddr((0x2A), (0X04) | (0X02) | (0X01));
  3346   0014A4  0E07               	movlw	7
  3347   0014A6  6E29               	movwf	SetShortAddr@valor^0,c
  3348   0014A8  0E2A               	movlw	42
  3349   0014AA  ECAA  F00E         	call	_SetShortAddr
  3350   0014AE                     
  3351                           ;drivers/scr/API_MRF24J40.c: 118:  DelayReset(&delay_time_out);
  3352   0014AE  0E38               	movlw	low InicializoMRF24@delay_time_out
  3353   0014B0  6E27               	movwf	DelayReset@delay^0,c
  3354   0014B2  EC97  F00E         	call	_DelayReset	;wreg free
  3355   0014B6                     l105:
  3356                           
  3357                           ;drivers/scr/API_MRF24J40.c: 122:   lectura = GetShortAddr((0x2A));
  3358   0014B6  0E2A               	movlw	42
  3359   0014B8  EC84  F00E         	call	_GetShortAddr
  3360   0014BC  6E37               	movwf	InicializoMRF24@lectura^0,c
  3361   0014BE                     
  3362                           ;drivers/scr/API_MRF24J40.c: 123:   if(DelayRead(&delay_time_out))
  3363   0014BE  0E38               	movlw	low InicializoMRF24@delay_time_out
  3364   0014C0  6E28               	movwf	DelayRead@delay^0,c
  3365   0014C2  EC25  F00C         	call	_DelayRead	;wreg free
  3366   0014C6  0900               	iorlw	0
  3367   0014C8  B4D8               	btfsc	status,2,c
  3368   0014CA  EF69  F00A         	goto	u691
  3369   0014CE  EF6B  F00A         	goto	u690
  3370   0014D2                     u691:
  3371   0014D2  EF6E  F00A         	goto	l1947
  3372   0014D6                     u690:
  3373   0014D6                     l1943:
  3374                           
  3375                           ;drivers/scr/API_MRF24J40.c: 124:    return TIME_OUT_OCURRIDO;
  3376   0014D6  0E05               	movlw	5
  3377   0014D8  EF18  F00B         	goto	l107
  3378   0014DC                     l1947:
  3379                           
  3380                           ;drivers/scr/API_MRF24J40.c: 125:  }while((lectura & ((0X04) | (0X02) | (0X01))) != (0X0
      +                          0));
  3381   0014DC  C037  F035         	movff	InicializoMRF24@lectura,??_InicializoMRF24
  3382   0014E0  0E07               	movlw	7
  3383   0014E2  1635               	andwf	??_InicializoMRF24^0,f,c
  3384   0014E4  A4D8               	btfss	status,2,c
  3385   0014E6  EF77  F00A         	goto	u701
  3386   0014EA  EF79  F00A         	goto	u700
  3387   0014EE                     u701:
  3388   0014EE  EF5B  F00A         	goto	l105
  3389   0014F2                     u700:
  3390   0014F2                     
  3391                           ;drivers/scr/API_MRF24J40.c: 126:  _delay((unsigned long)((50)*(16000000/4000.0)));;
  3392   0014F2  0E02               	movlw	2
  3393   0014F4  6E36               	movwf	(??_InicializoMRF24+1)^0,c
  3394   0014F6  0E04               	movlw	4
  3395   0014F8  6E35               	movwf	??_InicializoMRF24^0,c
  3396   0014FA  0EBA               	movlw	186
  3397   0014FC                     u1077:
  3398   0014FC  2EE8               	decfsz	wreg,f,c
  3399   0014FE  D7FE               	bra	u1077
  3400   001500  2E35               	decfsz	??_InicializoMRF24^0,f,c
  3401   001502  D7FC               	bra	u1077
  3402   001504  2E36               	decfsz	(??_InicializoMRF24+1)^0,f,c
  3403   001506  D7FA               	bra	u1077
  3404   001508  F000 F000          	nop2	
  3405   00150C                     
  3406                           ;drivers/scr/API_MRF24J40.c: 127:  SetShortAddr((0x0D), (0X01));
  3407   00150C  0E01               	movlw	1
  3408   00150E  6E29               	movwf	SetShortAddr@valor^0,c
  3409   001510  0E0D               	movlw	13
  3410   001512  ECAA  F00E         	call	_SetShortAddr
  3411   001516                     
  3412                           ;drivers/scr/API_MRF24J40.c: 128:  SetDeviceAddress();
  3413   001516  EC5B  F00E         	call	_SetDeviceAddress	;wreg free
  3414   00151A                     
  3415                           ;drivers/scr/API_MRF24J40.c: 129:  SetDeviceMACAddress();
  3416   00151A  EC46  F00E         	call	_SetDeviceMACAddress	;wreg free
  3417   00151E                     
  3418                           ;drivers/scr/API_MRF24J40.c: 130:  SetLongAddr((0x201), (0X02) | (0X01));
  3419   00151E  0E02               	movlw	2
  3420   001520  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3421   001522  0E01               	movlw	1
  3422   001524  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3423   001526  0E03               	movlw	3
  3424   001528  6E2E               	movwf	SetLongAddr@valor^0,c
  3425   00152A  EC71  F00D         	call	_SetLongAddr	;wreg free
  3426   00152E                     
  3427                           ;drivers/scr/API_MRF24J40.c: 131:  SetLongAddr((0x202), (0X80));
  3428   00152E  0E02               	movlw	2
  3429   001530  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3430   001532  0E02               	movlw	2
  3431   001534  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3432   001536  0E80               	movlw	128
  3433   001538  6E2E               	movwf	SetLongAddr@valor^0,c
  3434   00153A  EC71  F00D         	call	_SetLongAddr	;wreg free
  3435   00153E                     
  3436                           ;drivers/scr/API_MRF24J40.c: 132:  SetLongAddr((0x203), (0X80) | (0X00));
  3437   00153E  0E02               	movlw	2
  3438   001540  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3439   001542  0E03               	movlw	3
  3440   001544  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3441   001546  0E80               	movlw	128
  3442   001548  6E2E               	movwf	SetLongAddr@valor^0,c
  3443   00154A  EC71  F00D         	call	_SetLongAddr	;wreg free
  3444   00154E                     
  3445                           ;drivers/scr/API_MRF24J40.c: 133:  SetLongAddr((0x206), (0X80) | (0X10));
  3446   00154E  0E02               	movlw	2
  3447   001550  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3448   001552  0E06               	movlw	6
  3449   001554  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3450   001556  0E90               	movlw	144
  3451   001558  6E2E               	movwf	SetLongAddr@valor^0,c
  3452   00155A  EC71  F00D         	call	_SetLongAddr	;wreg free
  3453   00155E                     
  3454                           ;drivers/scr/API_MRF24J40.c: 134:  SetLongAddr((0x207), (0X80));
  3455   00155E  0E02               	movlw	2
  3456   001560  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3457   001562  0E07               	movlw	7
  3458   001564  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3459   001566  0E80               	movlw	128
  3460   001568  6E2E               	movwf	SetLongAddr@valor^0,c
  3461   00156A  EC71  F00D         	call	_SetLongAddr	;wreg free
  3462   00156E                     
  3463                           ;drivers/scr/API_MRF24J40.c: 135:  SetLongAddr((0x208), (0X10));
  3464   00156E  0E02               	movlw	2
  3465   001570  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3466   001572  0E08               	movlw	8
  3467   001574  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3468   001576  0E10               	movlw	16
  3469   001578  6E2E               	movwf	SetLongAddr@valor^0,c
  3470   00157A  EC71  F00D         	call	_SetLongAddr	;wreg free
  3471   00157E                     
  3472                           ;drivers/scr/API_MRF24J40.c: 136:  SetLongAddr((0x220), (0X20) | (0X01));
  3473   00157E  0E02               	movlw	2
  3474   001580  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3475   001582  0E20               	movlw	32
  3476   001584  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3477   001586  0E21               	movlw	33
  3478   001588  6E2E               	movwf	SetLongAddr@valor^0,c
  3479   00158A  EC71  F00D         	call	_SetLongAddr	;wreg free
  3480   00158E                     
  3481                           ;drivers/scr/API_MRF24J40.c: 137:  SetShortAddr((0x3A), (0X80));
  3482   00158E  0E80               	movlw	128
  3483   001590  6E29               	movwf	SetShortAddr@valor^0,c
  3484   001592  0E3A               	movlw	58
  3485   001594  ECAA  F00E         	call	_SetShortAddr
  3486   001598                     
  3487                           ;drivers/scr/API_MRF24J40.c: 138:  SetShortAddr((0x3E), (0X40));
  3488   001598  0E40               	movlw	64
  3489   00159A  6E29               	movwf	SetShortAddr@valor^0,c
  3490   00159C  0E3E               	movlw	62
  3491   00159E  ECAA  F00E         	call	_SetShortAddr
  3492   0015A2                     
  3493                           ;drivers/scr/API_MRF24J40.c: 139:  SetShortAddr((0x3F), (0X04) | (0X02));
  3494   0015A2  0E06               	movlw	6
  3495   0015A4  6E29               	movwf	SetShortAddr@valor^0,c
  3496   0015A6  0E3F               	movlw	63
  3497   0015A8  ECAA  F00E         	call	_SetShortAddr
  3498   0015AC                     
  3499                           ;drivers/scr/API_MRF24J40.c: 140:  SetShortAddr((0x18), (0X80) | (0X10) | (0X08));
  3500   0015AC  0E98               	movlw	152
  3501   0015AE  6E29               	movwf	SetShortAddr@valor^0,c
  3502   0015B0  0E18               	movlw	24
  3503   0015B2  ECAA  F00E         	call	_SetShortAddr
  3504   0015B6                     
  3505                           ;drivers/scr/API_MRF24J40.c: 141:  SetShortAddr((0x2E), (0X80) | (0X10) | (0X04) | (0X01
      +                          ));
  3506   0015B6  0E95               	movlw	149
  3507   0015B8  6E29               	movwf	SetShortAddr@valor^0,c
  3508   0015BA  0E2E               	movlw	46
  3509   0015BC  ECAA  F00E         	call	_SetShortAddr
  3510   0015C0                     
  3511                           ;drivers/scr/API_MRF24J40.c: 142:  DelayReset(&delay_time_out);
  3512   0015C0  0E38               	movlw	low InicializoMRF24@delay_time_out
  3513   0015C2  6E27               	movwf	DelayReset@delay^0,c
  3514   0015C4  EC97  F00E         	call	_DelayReset	;wreg free
  3515   0015C8                     l1983:
  3516                           
  3517                           ;drivers/scr/API_MRF24J40.c: 146:   lectura = GetLongAddr((0x20f)) & (0XA0);
  3518   0015C8  0E02               	movlw	2
  3519   0015CA  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  3520   0015CC  0E0F               	movlw	15
  3521   0015CE  6E2C               	movwf	GetLongAddr@reg_address^0,c
  3522   0015D0  EC4F  F00D         	call	_GetLongAddr	;wreg free
  3523   0015D4  0BA0               	andlw	160
  3524   0015D6  6E37               	movwf	InicializoMRF24@lectura^0,c
  3525   0015D8                     
  3526                           ;drivers/scr/API_MRF24J40.c: 147:   if(DelayRead(&delay_time_out))
  3527   0015D8  0E38               	movlw	low InicializoMRF24@delay_time_out
  3528   0015DA  6E28               	movwf	DelayRead@delay^0,c
  3529   0015DC  EC25  F00C         	call	_DelayRead	;wreg free
  3530   0015E0  0900               	iorlw	0
  3531   0015E2  B4D8               	btfsc	status,2,c
  3532   0015E4  EFF6  F00A         	goto	u711
  3533   0015E8  EFF8  F00A         	goto	u710
  3534   0015EC                     u711:
  3535   0015EC  EFFA  F00A         	goto	l1991
  3536   0015F0                     u710:
  3537   0015F0  EF6B  F00A         	goto	l1943
  3538   0015F4                     l1991:
  3539                           
  3540                           ;drivers/scr/API_MRF24J40.c: 149:  }while(lectura != (0XA0));
  3541   0015F4  0EA0               	movlw	160
  3542   0015F6  1837               	xorwf	InicializoMRF24@lectura^0,w,c
  3543   0015F8  A4D8               	btfss	status,2,c
  3544   0015FA  EF01  F00B         	goto	u721
  3545   0015FE  EF03  F00B         	goto	u720
  3546   001602                     u721:
  3547   001602  EFE4  F00A         	goto	l1983
  3548   001606                     u720:
  3549   001606                     
  3550                           ;drivers/scr/API_MRF24J40.c: 150:  SetShortAddr((0x32), (0X80) | (0X40) | (0X20) | (0X10
      +                          )
  3551   001606  0EF5               	movlw	245
  3552   001608  6E29               	movwf	SetShortAddr@valor^0,c
  3553   00160A  0E32               	movlw	50
  3554   00160C  ECAA  F00E         	call	_SetShortAddr
  3555                           
  3556                           ;drivers/scr/API_MRF24J40.c: 152:  SetShortAddr((0x12), (0X80) | (0X20) | (0X10) | (0X08
      +                          ) | (0X01));
  3557   001610  0EB9               	movlw	185
  3558   001612  6E29               	movwf	SetShortAddr@valor^0,c
  3559   001614  0E12               	movlw	18
  3560   001616  ECAA  F00E         	call	_SetShortAddr
  3561                           
  3562                           ;drivers/scr/API_MRF24J40.c: 153:  SetChannel();
  3563   00161A  ECAF  F00D         	call	_SetChannel	;wreg free
  3564                           
  3565                           ;drivers/scr/API_MRF24J40.c: 154:  SetShortAddr((0x00), (0X00));
  3566   00161E  0E00               	movlw	0
  3567   001620  6E29               	movwf	SetShortAddr@valor^0,c
  3568   001622  0E00               	movlw	0
  3569   001624  ECAA  F00E         	call	_SetShortAddr
  3570                           
  3571                           ;drivers/scr/API_MRF24J40.c: 155:  (void)GetShortAddr((0x31));
  3572   001628  0E31               	movlw	49
  3573   00162A  EC84  F00E         	call	_GetShortAddr
  3574   00162E                     
  3575                           ;drivers/scr/API_MRF24J40.c: 156:  return INICIALIZACION_OK;
  3576   00162E  0E00               	movlw	0
  3577   001630                     l107:
  3578   001630  0012               	return		;funcret
  3579   001632                     __end_of_InicializoMRF24:
  3580                           	callstack 0
  3581                           
  3582 ;; *************** function _SetDeviceMACAddress *****************
  3583 ;; Defined at:
  3584 ;;		line 272 in file "drivers/scr/API_MRF24J40.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;		None
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;  i               1    4[COMRAM] unsigned char 
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3602 ;;Total ram usage:        1 bytes
  3603 ;; Hardware stack levels used: 1
  3604 ;; Hardware stack levels required when called: 4
  3605 ;; This function calls:
  3606 ;;		_SetShortAddr
  3607 ;; This function is called by:
  3608 ;;		_InicializoMRF24
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612                           	psect	text13
  3613   001C8C                     __ptext13:
  3614                           	callstack 0
  3615   001C8C                     _SetDeviceMACAddress:
  3616                           	callstack 24
  3617   001C8C                     
  3618                           ;drivers/scr/API_MRF24J40.c: 274:  for(uint8_t i = 0; i < 8; i++) {
  3619   001C8C  6A2B               	clrf	SetDeviceMACAddress@i^0,c
  3620   001C8E                     l1885:
  3621                           
  3622                           ;drivers/scr/API_MRF24J40.c: 276:   SetShortAddr(EADR0 + i, data_config_s.my_mac[i]);
  3623   001C8E  502B               	movf	SetDeviceMACAddress@i^0,w,c
  3624   001C90  0F19               	addlw	low (_data_config_s+18)
  3625   001C92  6ED9               	movwf	fsr2l,c
  3626   001C94  6ADA               	clrf	fsr2h,c
  3627   001C96  50DF               	movf	indf2,w,c
  3628   001C98  6E29               	movwf	SetShortAddr@valor^0,c
  3629   001C9A  502B               	movf	SetDeviceMACAddress@i^0,w,c
  3630   001C9C  0F05               	addlw	5
  3631   001C9E  ECAA  F00E         	call	_SetShortAddr
  3632   001CA2                     
  3633                           ;drivers/scr/API_MRF24J40.c: 277:  }
  3634   001CA2  2A2B               	incf	SetDeviceMACAddress@i^0,f,c
  3635   001CA4  0E07               	movlw	7
  3636   001CA6  642B               	cpfsgt	SetDeviceMACAddress@i^0,c
  3637   001CA8  EF58  F00E         	goto	u641
  3638   001CAC  EF5A  F00E         	goto	u640
  3639   001CB0                     u641:
  3640   001CB0  EF47  F00E         	goto	l1885
  3641   001CB4                     u640:
  3642   001CB4  0012               	return		;funcret
  3643   001CB6                     __end_of_SetDeviceMACAddress:
  3644                           	callstack 0
  3645                           
  3646 ;; *************** function _SetDeviceAddress *****************
  3647 ;; Defined at:
  3648 ;;		line 258 in file "drivers/scr/API_MRF24J40.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;		None
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;		None
  3653 ;; Return value:  Size  Location     Type
  3654 ;;                  1    wreg      void 
  3655 ;; Registers used:
  3656 ;;		wreg, status,2, status,0, cstack
  3657 ;; Tracked objects:
  3658 ;;		On entry : 0/0
  3659 ;;		On exit  : 0/0
  3660 ;;		Unchanged: 0/0
  3661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3666 ;;Total ram usage:        0 bytes
  3667 ;; Hardware stack levels used: 1
  3668 ;; Hardware stack levels required when called: 4
  3669 ;; This function calls:
  3670 ;;		_SetShortAddr
  3671 ;; This function is called by:
  3672 ;;		_InicializoMRF24
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text14
  3677   001CB6                     __ptext14:
  3678                           	callstack 0
  3679   001CB6                     _SetDeviceAddress:
  3680                           	callstack 24
  3681   001CB6                     
  3682                           ;drivers/scr/API_MRF24J40.c: 260:  SetShortAddr((0x04), (uint8_t) (data_config_s.my_addr
      +                          ess >> (0X08)));
  3683   001CB6  5024               	movf	(_data_config_s+29)^0,w,c
  3684   001CB8  6E29               	movwf	SetShortAddr@valor^0,c
  3685   001CBA  0E04               	movlw	4
  3686   001CBC  ECAA  F00E         	call	_SetShortAddr
  3687                           
  3688                           ;drivers/scr/API_MRF24J40.c: 261:  SetShortAddr((0x03), (uint8_t) (data_config_s.my_addr
      +                          ess));
  3689   001CC0  C023  F029         	movff	_data_config_s+28,SetShortAddr@valor
  3690   001CC4  0E03               	movlw	3
  3691   001CC6  ECAA  F00E         	call	_SetShortAddr
  3692                           
  3693                           ;drivers/scr/API_MRF24J40.c: 262:  SetShortAddr((0x02), (uint8_t) (data_config_s.my_pani
      +                          d >> (0X08)));
  3694   001CCA  5022               	movf	(_data_config_s+27)^0,w,c
  3695   001CCC  6E29               	movwf	SetShortAddr@valor^0,c
  3696   001CCE  0E02               	movlw	2
  3697   001CD0  ECAA  F00E         	call	_SetShortAddr
  3698                           
  3699                           ;drivers/scr/API_MRF24J40.c: 263:  SetShortAddr((0x01), (uint8_t) (data_config_s.my_pani
      +                          d));
  3700   001CD4  C021  F029         	movff	_data_config_s+26,SetShortAddr@valor
  3701   001CD8  0E01               	movlw	1
  3702   001CDA  ECAA  F00E         	call	_SetShortAddr
  3703   001CDE  0012               	return		;funcret
  3704   001CE0                     __end_of_SetDeviceAddress:
  3705                           	callstack 0
  3706                           
  3707 ;; *************** function _SetChannel *****************
  3708 ;; Defined at:
  3709 ;;		line 244 in file "drivers/scr/API_MRF24J40.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;		None
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;		None
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  1    wreg      void 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0, cstack
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;Total ram usage:        1 bytes
  3728 ;; Hardware stack levels used: 1
  3729 ;; Hardware stack levels required when called: 5
  3730 ;; This function calls:
  3731 ;;		_SetLongAddr
  3732 ;;		_SetShortAddr
  3733 ;; This function is called by:
  3734 ;;		_InicializoMRF24
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text15
  3739   001B5E                     __ptext15:
  3740                           	callstack 0
  3741   001B5E                     _SetChannel:
  3742                           	callstack 23
  3743   001B5E                     
  3744                           ;drivers/scr/API_MRF24J40.c: 246:  SetLongAddr((0x200), data_config_s.my_channel);
  3745   001B5E  0E02               	movlw	2
  3746   001B60  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3747   001B62  0E00               	movlw	0
  3748   001B64  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3749   001B66  C008  F02E         	movff	_data_config_s+1,SetLongAddr@valor
  3750   001B6A  EC71  F00D         	call	_SetLongAddr	;wreg free
  3751                           
  3752                           ;drivers/scr/API_MRF24J40.c: 247:  SetShortAddr((0x36), (0X04));
  3753   001B6E  0E04               	movlw	4
  3754   001B70  6E29               	movwf	SetShortAddr@valor^0,c
  3755   001B72  0E36               	movlw	54
  3756   001B74  ECAA  F00E         	call	_SetShortAddr
  3757                           
  3758                           ;drivers/scr/API_MRF24J40.c: 248:  SetShortAddr((0x36), (0X00));
  3759   001B78  0E00               	movlw	0
  3760   001B7A  6E29               	movwf	SetShortAddr@valor^0,c
  3761   001B7C  0E36               	movlw	54
  3762   001B7E  ECAA  F00E         	call	_SetShortAddr
  3763   001B82                     
  3764                           ;drivers/scr/API_MRF24J40.c: 249:  _delay((unsigned long)((1)*(16000000/4000.0)));;
  3765   001B82  0E06               	movlw	6
  3766   001B84  6E31               	movwf	??_SetChannel^0,c
  3767   001B86  0E30               	movlw	48
  3768   001B88                     u1087:
  3769   001B88  2EE8               	decfsz	wreg,f,c
  3770   001B8A  D7FE               	bra	u1087
  3771   001B8C  2E31               	decfsz	??_SetChannel^0,f,c
  3772   001B8E  D7FC               	bra	u1087
  3773   001B90  F000 F000          	nop2	
  3774   001B94  0012               	return		;funcret
  3775   001B96                     __end_of_SetChannel:
  3776                           	callstack 0
  3777                           
  3778 ;; *************** function _SetShortAddr *****************
  3779 ;; Defined at:
  3780 ;;		line 168 in file "drivers/scr/API_MRF24J40.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;  reg_address     1    wreg     unsigned char 
  3783 ;;  valor           1    2[COMRAM] unsigned char 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  reg_address     1    3[COMRAM] unsigned char 
  3786 ;; Return value:  Size  Location     Type
  3787 ;;                  1    wreg      void 
  3788 ;; Registers used:
  3789 ;;		wreg, status,2, status,0, cstack
  3790 ;; Tracked objects:
  3791 ;;		On entry : 0/0
  3792 ;;		On exit  : 0/0
  3793 ;;		Unchanged: 0/0
  3794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3795 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;Total ram usage:        2 bytes
  3800 ;; Hardware stack levels used: 1
  3801 ;; Hardware stack levels required when called: 3
  3802 ;; This function calls:
  3803 ;;		_SetCSPin
  3804 ;;		_WriteByteSPIPort
  3805 ;; This function is called by:
  3806 ;;		_InicializoMRF24
  3807 ;;		_SetChannel
  3808 ;;		_SetDeviceAddress
  3809 ;;		_SetDeviceMACAddress
  3810 ;;		_MRF24TransmitirDato
  3811 ;;		_MRF24ReciboPaquete
  3812 ;;		_MRF24BuscarDispositivos
  3813 ;; This function uses a non-reentrant model
  3814 ;;
  3815                           
  3816                           	psect	text16
  3817   001D54                     __ptext16:
  3818                           	callstack 0
  3819   001D54                     _SetShortAddr:
  3820                           	callstack 26
  3821                           
  3822                           ;incstack = 0
  3823                           ;SetShortAddr@reg_address stored from wreg
  3824   001D54  6E2A               	movwf	SetShortAddr@reg_address^0,c
  3825   001D56                     
  3826                           ;drivers/scr/API_MRF24J40.c: 170:  reg_address = (uint8_t) (reg_address << (0X01)) | (0x
      +                          01);
  3827   001D56  80D8               	bsf	status,0,c
  3828   001D58  362A               	rlcf	SetShortAddr@reg_address^0,f,c
  3829   001D5A                     
  3830                           ;drivers/scr/API_MRF24J40.c: 171:  SetCSPin(0);
  3831   001D5A  0E00               	movlw	0
  3832   001D5C  EC0D  F00F         	call	_SetCSPin
  3833   001D60                     
  3834                           ;drivers/scr/API_MRF24J40.c: 172:  WriteByteSPIPort(reg_address);
  3835   001D60  502A               	movf	SetShortAddr@reg_address^0,w,c
  3836   001D62  EC1B  F00F         	call	_WriteByteSPIPort
  3837   001D66                     
  3838                           ;drivers/scr/API_MRF24J40.c: 173:  WriteByteSPIPort(valor);
  3839   001D66  5029               	movf	SetShortAddr@valor^0,w,c
  3840   001D68  EC1B  F00F         	call	_WriteByteSPIPort
  3841   001D6C                     
  3842                           ;drivers/scr/API_MRF24J40.c: 174:  SetCSPin(1);
  3843   001D6C  0E01               	movlw	1
  3844   001D6E  EC0D  F00F         	call	_SetCSPin
  3845   001D72  0012               	return		;funcret
  3846   001D74                     __end_of_SetShortAddr:
  3847                           	callstack 0
  3848                           
  3849 ;; *************** function _SetLongAddr *****************
  3850 ;; Defined at:
  3851 ;;		line 208 in file "drivers/scr/API_MRF24J40.c"
  3852 ;; Parameters:    Size  Location     Type
  3853 ;;  reg_address     2    5[COMRAM] unsigned short 
  3854 ;;  valor           1    7[COMRAM] unsigned char 
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;		None
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, status,2, status,0, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3866 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3869 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;Total ram usage:        5 bytes
  3871 ;; Hardware stack levels used: 1
  3872 ;; Hardware stack levels required when called: 4
  3873 ;; This function calls:
  3874 ;;		_SetCSPin
  3875 ;;		_Write2ByteSPIPort
  3876 ;;		_WriteByteSPIPort
  3877 ;; This function is called by:
  3878 ;;		_InicializoMRF24
  3879 ;;		_SetChannel
  3880 ;;		_MRF24TransmitirDato
  3881 ;;		_MRF24ReciboPaquete
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text17
  3886   001AE2                     __ptext17:
  3887                           	callstack 0
  3888   001AE2                     _SetLongAddr:
  3889                           	callstack 25
  3890   001AE2                     
  3891                           ;drivers/scr/API_MRF24J40.c: 210:  reg_address = (reg_address << (0X05)) | (0X8010);
  3892   001AE2  C02C  F02F         	movff	SetLongAddr@reg_address,??_SetLongAddr
  3893   001AE6  C02D  F030         	movff	SetLongAddr@reg_address+1,??_SetLongAddr+1
  3894   001AEA  0E05               	movlw	5
  3895   001AEC                     u565:
  3896   001AEC  90D8               	bcf	status,0,c
  3897   001AEE  362F               	rlcf	??_SetLongAddr^0,f,c
  3898   001AF0  3630               	rlcf	(??_SetLongAddr+1)^0,f,c
  3899   001AF2  2EE8               	decfsz	wreg,f,c
  3900   001AF4  EF76  F00D         	goto	u565
  3901   001AF8  0E10               	movlw	16
  3902   001AFA  102F               	iorwf	??_SetLongAddr^0,w,c
  3903   001AFC  6E2C               	movwf	SetLongAddr@reg_address^0,c
  3904   001AFE  0E80               	movlw	128
  3905   001B00  1030               	iorwf	(??_SetLongAddr+1)^0,w,c
  3906   001B02  6E2D               	movwf	(SetLongAddr@reg_address+1)^0,c
  3907   001B04                     
  3908                           ;drivers/scr/API_MRF24J40.c: 211:  SetCSPin(0);
  3909   001B04  0E00               	movlw	0
  3910   001B06  EC0D  F00F         	call	_SetCSPin
  3911   001B0A                     
  3912                           ;drivers/scr/API_MRF24J40.c: 212:  Write2ByteSPIPort(reg_address);
  3913   001B0A  C02C  F02A         	movff	SetLongAddr@reg_address,Write2ByteSPIPort@dato
  3914   001B0E  C02D  F02B         	movff	SetLongAddr@reg_address+1,Write2ByteSPIPort@dato+1
  3915   001B12  ECFF  F00E         	call	_Write2ByteSPIPort	;wreg free
  3916   001B16                     
  3917                           ;drivers/scr/API_MRF24J40.c: 213:  WriteByteSPIPort(valor);
  3918   001B16  502E               	movf	SetLongAddr@valor^0,w,c
  3919   001B18  EC1B  F00F         	call	_WriteByteSPIPort
  3920   001B1C                     
  3921                           ;drivers/scr/API_MRF24J40.c: 214:  SetCSPin(1);
  3922   001B1C  0E01               	movlw	1
  3923   001B1E  EC0D  F00F         	call	_SetCSPin
  3924   001B22  0012               	return		;funcret
  3925   001B24                     __end_of_SetLongAddr:
  3926                           	callstack 0
  3927                           
  3928 ;; *************** function _GetShortAddr *****************
  3929 ;; Defined at:
  3930 ;;		line 187 in file "drivers/scr/API_MRF24J40.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  reg_address     1    wreg     unsigned char 
  3933 ;; Auto vars:     Size  Location     Type
  3934 ;;  reg_address     1    3[COMRAM] unsigned char 
  3935 ;;  leido_spi       1    2[COMRAM] unsigned char 
  3936 ;; Return value:  Size  Location     Type
  3937 ;;                  1    wreg      unsigned char 
  3938 ;; Registers used:
  3939 ;;		wreg, status,2, status,0, cstack
  3940 ;; Tracked objects:
  3941 ;;		On entry : 0/0
  3942 ;;		On exit  : 0/0
  3943 ;;		Unchanged: 0/0
  3944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;Total ram usage:        2 bytes
  3950 ;; Hardware stack levels used: 1
  3951 ;; Hardware stack levels required when called: 3
  3952 ;; This function calls:
  3953 ;;		_ReadByteSPIPort
  3954 ;;		_SetCSPin
  3955 ;;		_WriteByteSPIPort
  3956 ;; This function is called by:
  3957 ;;		_InicializoMRF24
  3958 ;;		_MRF24ReciboPaquete
  3959 ;; This function uses a non-reentrant model
  3960 ;;
  3961                           
  3962                           	psect	text18
  3963   001D08                     __ptext18:
  3964                           	callstack 0
  3965   001D08                     _GetShortAddr:
  3966                           	callstack 26
  3967                           
  3968                           ;incstack = 0
  3969                           ;GetShortAddr@reg_address stored from wreg
  3970   001D08  6E2A               	movwf	GetShortAddr@reg_address^0,c
  3971   001D0A                     
  3972                           ;drivers/scr/API_MRF24J40.c: 190:  reg_address = (uint8_t) (reg_address << (0X01)) & (0x
      +                          7E);
  3973   001D0A  502A               	movf	GetShortAddr@reg_address^0,w,c
  3974   001D0C  242A               	addwf	GetShortAddr@reg_address^0,w,c
  3975   001D0E  0B7E               	andlw	126
  3976   001D10  6E2A               	movwf	GetShortAddr@reg_address^0,c
  3977   001D12                     
  3978                           ;drivers/scr/API_MRF24J40.c: 191:  SetCSPin(0);
  3979   001D12  0E00               	movlw	0
  3980   001D14  EC0D  F00F         	call	_SetCSPin
  3981   001D18                     
  3982                           ;drivers/scr/API_MRF24J40.c: 192:  WriteByteSPIPort(reg_address);
  3983   001D18  502A               	movf	GetShortAddr@reg_address^0,w,c
  3984   001D1A  EC1B  F00F         	call	_WriteByteSPIPort
  3985   001D1E                     
  3986                           ;drivers/scr/API_MRF24J40.c: 193:  leido_spi = ReadByteSPIPort();
  3987   001D1E  EC20  F00F         	call	_ReadByteSPIPort	;wreg free
  3988   001D22  6E29               	movwf	GetShortAddr@leido_spi^0,c
  3989   001D24                     
  3990                           ;drivers/scr/API_MRF24J40.c: 194:  SetCSPin(1);
  3991   001D24  0E01               	movlw	1
  3992   001D26  EC0D  F00F         	call	_SetCSPin
  3993   001D2A                     
  3994                           ;drivers/scr/API_MRF24J40.c: 195:  return leido_spi;
  3995   001D2A  5029               	movf	GetShortAddr@leido_spi^0,w,c
  3996   001D2C  0012               	return		;funcret
  3997   001D2E                     __end_of_GetShortAddr:
  3998                           	callstack 0
  3999                           
  4000 ;; *************** function _WriteByteSPIPort *****************
  4001 ;; Defined at:
  4002 ;;		line 76 in file "drivers/scr/API_MRF24J40_port.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  dato            1    wreg     unsigned char 
  4005 ;; Auto vars:     Size  Location     Type
  4006 ;;  dato            1    1[COMRAM] unsigned char 
  4007 ;; Return value:  Size  Location     Type
  4008 ;;                  1    wreg      void 
  4009 ;; Registers used:
  4010 ;;		wreg, status,2, cstack
  4011 ;; Tracked objects:
  4012 ;;		On entry : 0/0
  4013 ;;		On exit  : 0/0
  4014 ;;		Unchanged: 0/0
  4015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;Total ram usage:        1 bytes
  4021 ;; Hardware stack levels used: 1
  4022 ;; Hardware stack levels required when called: 2
  4023 ;; This function calls:
  4024 ;;		_SPIWriteByte
  4025 ;; This function is called by:
  4026 ;;		_SetShortAddr
  4027 ;;		_GetShortAddr
  4028 ;;		_SetLongAddr
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           	psect	text19
  4033   001E36                     __ptext19:
  4034                           	callstack 0
  4035   001E36                     _WriteByteSPIPort:
  4036                           	callstack 26
  4037                           
  4038                           ;incstack = 0
  4039                           ;WriteByteSPIPort@dato stored from wreg
  4040   001E36  6E28               	movwf	WriteByteSPIPort@dato^0,c
  4041   001E38                     
  4042                           ;drivers/scr/API_MRF24J40_port.c: 78:     SPIWriteByte(dato);
  4043   001E38  5028               	movf	WriteByteSPIPort@dato^0,w,c
  4044   001E3A  ECBA  F00E         	call	_SPIWriteByte
  4045   001E3E  0012               	return		;funcret
  4046   001E40                     __end_of_WriteByteSPIPort:
  4047                           	callstack 0
  4048                           
  4049 ;; *************** function _GetLongAddr *****************
  4050 ;; Defined at:
  4051 ;;		line 228 in file "drivers/scr/API_MRF24J40.c"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;  reg_address     2    5[COMRAM] unsigned short 
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;  respuesta       1    9[COMRAM] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  1    wreg      unsigned char 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0, cstack
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;Total ram usage:        5 bytes
  4070 ;; Hardware stack levels used: 1
  4071 ;; Hardware stack levels required when called: 4
  4072 ;; This function calls:
  4073 ;;		_ReadByteSPIPort
  4074 ;;		_SetCSPin
  4075 ;;		_Write2ByteSPIPort
  4076 ;; This function is called by:
  4077 ;;		_InicializoMRF24
  4078 ;;		_MRF24ReciboPaquete
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text20
  4083   001A9E                     __ptext20:
  4084                           	callstack 0
  4085   001A9E                     _GetLongAddr:
  4086                           	callstack 25
  4087   001A9E                     
  4088                           ;drivers/scr/API_MRF24J40.c: 230:  uint8_t respuesta;;drivers/scr/API_MRF24J40.c: 231:  
      +                          reg_address = (reg_address << (0X05)) | (0X8000);
  4089   001A9E  C02C  F02E         	movff	GetLongAddr@reg_address,??_GetLongAddr
  4090   001AA2  C02D  F02F         	movff	GetLongAddr@reg_address+1,??_GetLongAddr+1
  4091   001AA6  0E05               	movlw	5
  4092   001AA8                     u655:
  4093   001AA8  90D8               	bcf	status,0,c
  4094   001AAA  362E               	rlcf	??_GetLongAddr^0,f,c
  4095   001AAC  362F               	rlcf	(??_GetLongAddr+1)^0,f,c
  4096   001AAE  2EE8               	decfsz	wreg,f,c
  4097   001AB0  EF54  F00D         	goto	u655
  4098   001AB4  0E00               	movlw	0
  4099   001AB6  102E               	iorwf	??_GetLongAddr^0,w,c
  4100   001AB8  6E2C               	movwf	GetLongAddr@reg_address^0,c
  4101   001ABA  0E80               	movlw	128
  4102   001ABC  102F               	iorwf	(??_GetLongAddr+1)^0,w,c
  4103   001ABE  6E2D               	movwf	(GetLongAddr@reg_address+1)^0,c
  4104   001AC0                     
  4105                           ;drivers/scr/API_MRF24J40.c: 232:  SetCSPin(0);
  4106   001AC0  0E00               	movlw	0
  4107   001AC2  EC0D  F00F         	call	_SetCSPin
  4108   001AC6                     
  4109                           ;drivers/scr/API_MRF24J40.c: 233:  Write2ByteSPIPort(reg_address);
  4110   001AC6  C02C  F02A         	movff	GetLongAddr@reg_address,Write2ByteSPIPort@dato
  4111   001ACA  C02D  F02B         	movff	GetLongAddr@reg_address+1,Write2ByteSPIPort@dato+1
  4112   001ACE  ECFF  F00E         	call	_Write2ByteSPIPort	;wreg free
  4113   001AD2                     
  4114                           ;drivers/scr/API_MRF24J40.c: 234:  respuesta = ReadByteSPIPort();
  4115   001AD2  EC20  F00F         	call	_ReadByteSPIPort	;wreg free
  4116   001AD6  6E30               	movwf	GetLongAddr@respuesta^0,c
  4117   001AD8                     
  4118                           ;drivers/scr/API_MRF24J40.c: 235:  SetCSPin(1);
  4119   001AD8  0E01               	movlw	1
  4120   001ADA  EC0D  F00F         	call	_SetCSPin
  4121   001ADE                     
  4122                           ;drivers/scr/API_MRF24J40.c: 236:  return respuesta;
  4123   001ADE  5030               	movf	GetLongAddr@respuesta^0,w,c
  4124   001AE0  0012               	return		;funcret
  4125   001AE2                     __end_of_GetLongAddr:
  4126                           	callstack 0
  4127                           
  4128 ;; *************** function _Write2ByteSPIPort *****************
  4129 ;; Defined at:
  4130 ;;		line 87 in file "drivers/scr/API_MRF24J40_port.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  dato            2    3[COMRAM] unsigned short 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4144 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;Total ram usage:        2 bytes
  4149 ;; Hardware stack levels used: 1
  4150 ;; Hardware stack levels required when called: 3
  4151 ;; This function calls:
  4152 ;;		_SPIWrite2Byte
  4153 ;; This function is called by:
  4154 ;;		_SetLongAddr
  4155 ;;		_GetLongAddr
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text21
  4160   001DFE                     __ptext21:
  4161                           	callstack 0
  4162   001DFE                     _Write2ByteSPIPort:
  4163                           	callstack 25
  4164   001DFE                     
  4165                           ;drivers/scr/API_MRF24J40_port.c: 89:     SPIWrite2Byte(dato);
  4166   001DFE  C02A  F028         	movff	Write2ByteSPIPort@dato,SPIWrite2Byte@dato
  4167   001E02  C02B  F029         	movff	Write2ByteSPIPort@dato+1,SPIWrite2Byte@dato+1
  4168   001E06  EC06  F00F         	call	_SPIWrite2Byte	;wreg free
  4169   001E0A  0012               	return		;funcret
  4170   001E0C                     __end_of_Write2ByteSPIPort:
  4171                           	callstack 0
  4172                           
  4173 ;; *************** function _SPIWrite2Byte *****************
  4174 ;; Defined at:
  4175 ;;		line 63 in file "drivers/scr/API_MSPI_port.c"
  4176 ;; Parameters:    Size  Location     Type
  4177 ;;  dato            2    1[COMRAM] unsigned short 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;		None
  4180 ;; Return value:  Size  Location     Type
  4181 ;;                  1    wreg      void 
  4182 ;; Registers used:
  4183 ;;		wreg, status,2, cstack
  4184 ;; Tracked objects:
  4185 ;;		On entry : 0/0
  4186 ;;		On exit  : 0/0
  4187 ;;		Unchanged: 0/0
  4188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4189 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;Total ram usage:        2 bytes
  4194 ;; Hardware stack levels used: 1
  4195 ;; Hardware stack levels required when called: 2
  4196 ;; This function calls:
  4197 ;;		_SPIWriteByte
  4198 ;; This function is called by:
  4199 ;;		_Write2ByteSPIPort
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text22
  4204   001E0C                     __ptext22:
  4205                           	callstack 0
  4206   001E0C                     _SPIWrite2Byte:
  4207                           	callstack 25
  4208   001E0C                     
  4209                           ;drivers/scr/API_MSPI_port.c: 65:     SPIWriteByte((uint8_t) (dato >> 8));
  4210   001E0C  5029               	movf	(SPIWrite2Byte@dato+1)^0,w,c
  4211   001E0E  ECBA  F00E         	call	_SPIWriteByte
  4212                           
  4213                           ;drivers/scr/API_MSPI_port.c: 66:     SPIWriteByte((uint8_t) dato);
  4214   001E12  5028               	movf	SPIWrite2Byte@dato^0,w,c
  4215   001E14  ECBA  F00E         	call	_SPIWriteByte
  4216   001E18  0012               	return		;funcret
  4217   001E1A                     __end_of_SPIWrite2Byte:
  4218                           	callstack 0
  4219                           
  4220 ;; *************** function _SPIWriteByte *****************
  4221 ;; Defined at:
  4222 ;;		line 50 in file "drivers/scr/API_MSPI_port.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  dato            1    wreg     unsigned char 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  dato            1    0[COMRAM] unsigned char 
  4227 ;; Return value:  Size  Location     Type
  4228 ;;                  1    wreg      void 
  4229 ;; Registers used:
  4230 ;;		wreg
  4231 ;; Tracked objects:
  4232 ;;		On entry : 0/0
  4233 ;;		On exit  : 0/0
  4234 ;;		Unchanged: 0/0
  4235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4237 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4239 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4240 ;;Total ram usage:        1 bytes
  4241 ;; Hardware stack levels used: 1
  4242 ;; Hardware stack levels required when called: 1
  4243 ;; This function calls:
  4244 ;;		Nothing
  4245 ;; This function is called by:
  4246 ;;		_WriteByteSPIPort
  4247 ;;		_SPIWrite2Byte
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text23
  4252   001D74                     __ptext23:
  4253                           	callstack 0
  4254   001D74                     _SPIWriteByte:
  4255                           	callstack 26
  4256                           
  4257                           ;incstack = 0
  4258                           ;SPIWriteByte@dato stored from wreg
  4259   001D74  6E27               	movwf	SPIWriteByte@dato^0,c
  4260   001D76                     
  4261                           ;drivers/scr/API_MSPI_port.c: 52:     PIR1bits.SSPIF = 0;
  4262   001D76  969E               	bcf	158,3,c	;volatile
  4263   001D78                     
  4264                           ;drivers/scr/API_MSPI_port.c: 53:     SSPBUF = dato;
  4265   001D78  C027  FFC9         	movff	SPIWriteByte@dato,4041	;volatile
  4266   001D7C                     l188:
  4267   001D7C  A69E               	btfss	158,3,c	;volatile
  4268   001D7E  EFC3  F00E         	goto	u531
  4269   001D82  EFC5  F00E         	goto	u530
  4270   001D86                     u531:
  4271   001D86  EFBE  F00E         	goto	l188
  4272   001D8A                     u530:
  4273   001D8A  0012               	return		;funcret
  4274   001D8C                     __end_of_SPIWriteByte:
  4275                           	callstack 0
  4276                           
  4277 ;; *************** function _SetCSPin *****************
  4278 ;; Defined at:
  4279 ;;		line 34 in file "drivers/scr/API_MRF24J40_port.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  estado          1    wreg     _Bool 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  estado          1    0[COMRAM] _Bool 
  4284 ;; Return value:  Size  Location     Type
  4285 ;;                  1    wreg      void 
  4286 ;; Registers used:
  4287 ;;		wreg
  4288 ;; Tracked objects:
  4289 ;;		On entry : 0/0
  4290 ;;		On exit  : 0/0
  4291 ;;		Unchanged: 0/0
  4292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;Total ram usage:        1 bytes
  4298 ;; Hardware stack levels used: 1
  4299 ;; Hardware stack levels required when called: 1
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_InicializoPines
  4304 ;;		_SetShortAddr
  4305 ;;		_GetShortAddr
  4306 ;;		_SetLongAddr
  4307 ;;		_GetLongAddr
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text24
  4312   001E1A                     __ptext24:
  4313                           	callstack 0
  4314   001E1A                     _SetCSPin:
  4315                           	callstack 27
  4316                           
  4317                           ;incstack = 0
  4318                           ;SetCSPin@estado stored from wreg
  4319   001E1A  6E27               	movwf	SetCSPin@estado^0,c
  4320   001E1C                     
  4321                           ;drivers/scr/API_MRF24J40_port.c: 36:     LATCbits.LATC6 = estado;
  4322   001E1C  B027               	btfsc	SetCSPin@estado^0,0,c
  4323   001E1E  D002               	bra	u545
  4324   001E20  9C8B               	bcf	139,6,c	;volatile
  4325   001E22  D001               	bra	u546
  4326   001E24                     u545:
  4327   001E24  8C8B               	bsf	139,6,c	;volatile
  4328   001E26                     u546:
  4329   001E26  0012               	return		;funcret
  4330   001E28                     __end_of_SetCSPin:
  4331                           	callstack 0
  4332                           
  4333 ;; *************** function _ReadByteSPIPort *****************
  4334 ;; Defined at:
  4335 ;;		line 98 in file "drivers/scr/API_MRF24J40_port.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;		None
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      unsigned char 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;Total ram usage:        0 bytes
  4354 ;; Hardware stack levels used: 1
  4355 ;; Hardware stack levels required when called: 2
  4356 ;; This function calls:
  4357 ;;		_SPIRead
  4358 ;; This function is called by:
  4359 ;;		_GetShortAddr
  4360 ;;		_GetLongAddr
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text25
  4365   001E40                     __ptext25:
  4366                           	callstack 0
  4367   001E40                     _ReadByteSPIPort:
  4368                           	callstack 26
  4369   001E40                     
  4370                           ;drivers/scr/API_MRF24J40_port.c: 100:     return SPIRead();
  4371   001E40  ECD2  F00E         	call	_SPIRead	;wreg free
  4372   001E44  0012               	return		;funcret
  4373   001E46                     __end_of_ReadByteSPIPort:
  4374                           	callstack 0
  4375                           
  4376 ;; *************** function _SPIRead *****************
  4377 ;; Defined at:
  4378 ;;		line 75 in file "drivers/scr/API_MSPI_port.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;		None
  4381 ;; Auto vars:     Size  Location     Type
  4382 ;;		None
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      unsigned char 
  4385 ;; Registers used:
  4386 ;;		wreg, status,2
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;Total ram usage:        0 bytes
  4397 ;; Hardware stack levels used: 1
  4398 ;; Hardware stack levels required when called: 1
  4399 ;; This function calls:
  4400 ;;		Nothing
  4401 ;; This function is called by:
  4402 ;;		_ReadByteSPIPort
  4403 ;; This function uses a non-reentrant model
  4404 ;;
  4405                           
  4406                           	psect	text26
  4407   001DA4                     __ptext26:
  4408                           	callstack 0
  4409   001DA4                     _SPIRead:
  4410                           	callstack 26
  4411   001DA4                     
  4412                           ;drivers/scr/API_MSPI_port.c: 77:     SSPCON1bits.WCOL = 0;
  4413   001DA4  9EC6               	bcf	198,7,c	;volatile
  4414                           
  4415                           ;drivers/scr/API_MSPI_port.c: 78:     SSPBUF = (0X00);
  4416   001DA6  6AC9               	clrf	201,c	;volatile
  4417   001DA8                     l197:
  4418   001DA8  A0C7               	btfss	199,0,c	;volatile
  4419   001DAA  EFD9  F00E         	goto	u551
  4420   001DAE  EFDB  F00E         	goto	u550
  4421   001DB2                     u551:
  4422   001DB2  EFD4  F00E         	goto	l197
  4423   001DB6                     u550:
  4424   001DB6                     
  4425                           ;drivers/scr/API_MSPI_port.c: 80:     return SSPBUF;
  4426   001DB6  50C9               	movf	201,w,c	;volatile
  4427   001DB8  0012               	return		;funcret
  4428   001DBA                     __end_of_SPIRead:
  4429                           	callstack 0
  4430                           
  4431 ;; *************** function _DelayReset *****************
  4432 ;; Defined at:
  4433 ;;		line 68 in file "drivers/scr/API_delay.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  delay           1    0[COMRAM] PTR struct .
  4436 ;;		 -> InicializoMRF24@delay_time_out(9), 
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4448 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4452 ;;Total ram usage:        1 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 1
  4455 ;; This function calls:
  4456 ;;		Nothing
  4457 ;; This function is called by:
  4458 ;;		_InicializoMRF24
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text27
  4463   001D2E                     __ptext27:
  4464                           	callstack 0
  4465   001D2E                     _DelayReset:
  4466                           	callstack 27
  4467   001D2E                     
  4468                           ;drivers/scr/API_delay.c: 70:  delay->startTime = timeStamp;
  4469   001D2E  5027               	movf	DelayReset@delay^0,w,c
  4470   001D30  6ED9               	movwf	fsr2l,c
  4471   001D32  6ADA               	clrf	fsr2h,c
  4472   001D34  C001  FFDE         	movff	_timeStamp,postinc2
  4473   001D38  C002  FFDE         	movff	_timeStamp+1,postinc2
  4474   001D3C  C003  FFDE         	movff	_timeStamp+2,postinc2
  4475   001D40  C004  FFDE         	movff	_timeStamp+3,postinc2
  4476   001D44                     
  4477                           ;drivers/scr/API_delay.c: 71:  delay->running = 1;
  4478   001D44  5027               	movf	DelayReset@delay^0,w,c
  4479   001D46  6ED9               	movwf	fsr2l,c
  4480   001D48  6ADA               	clrf	fsr2h,c
  4481   001D4A  0E08               	movlw	8
  4482   001D4C  26D9               	addwf	fsr2l,f,c
  4483   001D4E  0E01               	movlw	1
  4484   001D50  6EDF               	movwf	indf2,c
  4485   001D52  0012               	return		;funcret
  4486   001D54                     __end_of_DelayReset:
  4487                           	callstack 0
  4488                           
  4489 ;; *************** function _MRF24IsNewMsg *****************
  4490 ;; Defined at:
  4491 ;;		line 360 in file "drivers/scr/API_MRF24J40.c"
  4492 ;; Parameters:    Size  Location     Type
  4493 ;;		None
  4494 ;; Auto vars:     Size  Location     Type
  4495 ;;		None
  4496 ;; Return value:  Size  Location     Type
  4497 ;;                  1    wreg      enum E3263
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;Total ram usage:        0 bytes
  4510 ;; Hardware stack levels used: 1
  4511 ;; Hardware stack levels required when called: 2
  4512 ;; This function calls:
  4513 ;;		_IsMRF24Interrup
  4514 ;; This function is called by:
  4515 ;;		_main
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text28
  4520   001B96                     __ptext28:
  4521                           	callstack 0
  4522   001B96                     _MRF24IsNewMsg:
  4523                           	callstack 28
  4524   001B96                     
  4525                           ;drivers/scr/API_MRF24J40.c: 362:  if(estadoActual != INICIALIZACION_OK)
  4526   001B96  5005               	movf	_estadoActual^0,w,c
  4527   001B98  B4D8               	btfsc	status,2,c
  4528   001B9A  EFD1  F00D         	goto	u801
  4529   001B9E  EFD3  F00D         	goto	u800
  4530   001BA2                     u801:
  4531   001BA2  EFD6  F00D         	goto	l2127
  4532   001BA6                     u800:
  4533   001BA6                     
  4534                           ;drivers/scr/API_MRF24J40.c: 363:   return ERROR_INESPERADO;
  4535   001BA6  0E08               	movlw	8
  4536   001BA8  EFE4  F00D         	goto	l155
  4537   001BAC                     l2127:
  4538                           
  4539                           ;drivers/scr/API_MRF24J40.c: 365:  if(!IsMRF24Interrup())
  4540   001BAC  ECE7  F00E         	call	_IsMRF24Interrup	;wreg free
  4541   001BB0  0900               	iorlw	0
  4542   001BB2  A4D8               	btfss	status,2,c
  4543   001BB4  EFDE  F00D         	goto	u811
  4544   001BB8  EFE0  F00D         	goto	u810
  4545   001BBC                     u811:
  4546   001BBC  EFE3  F00D         	goto	l2133
  4547   001BC0                     u810:
  4548   001BC0                     
  4549                           ;drivers/scr/API_MRF24J40.c: 366:   return MSG_PRESENTE;
  4550   001BC0  0E02               	movlw	2
  4551   001BC2  EFE4  F00D         	goto	l155
  4552   001BC6                     l2133:
  4553                           
  4554                           ;drivers/scr/API_MRF24J40.c: 367:  return MSG_NO_PRESENTE;
  4555   001BC6  0E03               	movlw	3
  4556   001BC8                     l155:
  4557   001BC8  0012               	return		;funcret
  4558   001BCA                     __end_of_MRF24IsNewMsg:
  4559                           	callstack 0
  4560                           
  4561 ;; *************** function _IsMRF24Interrup *****************
  4562 ;; Defined at:
  4563 ;;		line 66 in file "drivers/scr/API_MRF24J40_port.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;		None
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      _Bool 
  4570 ;; Registers used:
  4571 ;;		wreg
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;Total ram usage:        0 bytes
  4582 ;; Hardware stack levels used: 1
  4583 ;; Hardware stack levels required when called: 1
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_MRF24IsNewMsg
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text29
  4592   001DCE                     __ptext29:
  4593                           	callstack 0
  4594   001DCE                     _IsMRF24Interrup:
  4595                           	callstack 28
  4596   001DCE                     
  4597                           ;drivers/scr/API_MRF24J40_port.c: 68:  return PORTBbits.RB0;
  4598   001DCE  B081               	btfsc	129,0,c	;volatile
  4599   001DD0  EFEC  F00E         	goto	u661
  4600   001DD4  EFEF  F00E         	goto	u660
  4601   001DD8                     u661:
  4602   001DD8  0E01               	movlw	1
  4603   001DDA  EFF0  F00E         	goto	u666
  4604   001DDE                     u660:
  4605   001DDE  0E00               	movlw	0
  4606   001DE0                     u666:
  4607   001DE0  0012               	return		;funcret
  4608   001DE2                     __end_of_IsMRF24Interrup:
  4609                           	callstack 0
  4610                           
  4611 ;; *************** function _MRF24GetDataIn *****************
  4612 ;; Defined at:
  4613 ;;		line 413 in file "drivers/scr/API_MRF24J40.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  1    0[COMRAM] PTR struct .
  4620 ;; Registers used:
  4621 ;;		wreg
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4627 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;Total ram usage:        2 bytes
  4632 ;; Hardware stack levels used: 1
  4633 ;; Hardware stack levels required when called: 1
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_main
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           	psect	text30
  4642   001E46                     __ptext30:
  4643                           	callstack 0
  4644   001E46                     _MRF24GetDataIn:
  4645                           	callstack 29
  4646   001E46                     
  4647                           ;drivers/scr/API_MRF24J40.c: 415:  return &data_in_s;
  4648   001E46  0EAD               	movlw	_data_in_s& (0+255)
  4649   001E48  0012               	return		;funcret
  4650   001E4A                     __end_of_MRF24GetDataIn:
  4651                           	callstack 0
  4652                           
  4653 ;; *************** function _DebounceFSMUpdate *****************
  4654 ;; Defined at:
  4655 ;;		line 34 in file "drivers/scr/API_debounce.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  antirrebote_    1   14[COMRAM] PTR struct .
  4658 ;;		 -> main@boton1(11), 
  4659 ;;  estado_pin      1   15[COMRAM] _Bool 
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      enum E2763
  4664 ;; Registers used:
  4665 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4671 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;Total ram usage:        4 bytes
  4676 ;; Hardware stack levels used: 1
  4677 ;; Hardware stack levels required when called: 3
  4678 ;; This function calls:
  4679 ;;		_DebounceFSMInit
  4680 ;;		_DelayRead
  4681 ;; This function is called by:
  4682 ;;		_main
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text31
  4687   001632                     __ptext31:
  4688                           	callstack 0
  4689   001632                     _DebounceFSMUpdate:
  4690                           	callstack 27
  4691   001632                     
  4692                           ;drivers/scr/API_debounce.c: 36:  switch(antirrebote_boton_n->estadoActual) {
  4693   001632  EF93  F00B         	goto	l2215
  4694   001636                     l2163:
  4695                           
  4696                           ;drivers/scr/API_debounce.c: 40:    if(!estado_pin)
  4697   001636  5036               	movf	DebounceFSMUpdate@estado_pin^0,w,c
  4698   001638  A4D8               	btfss	status,2,c
  4699   00163A  EF21  F00B         	goto	u841
  4700   00163E  EF23  F00B         	goto	u840
  4701   001642                     u841:
  4702   001642  EFB5  F00B         	goto	l2217
  4703   001646                     u840:
  4704   001646                     
  4705                           ;drivers/scr/API_debounce.c: 41:     antirrebote_boton_n->estadoActual = BUTTON_FALLING;
  4706   001646  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4707   001648  6ED9               	movwf	fsr2l,c
  4708   00164A  6ADA               	clrf	fsr2h,c
  4709   00164C  0E01               	movlw	1
  4710   00164E  26D9               	addwf	fsr2l,f,c
  4711   001650  0E01               	movlw	1
  4712   001652  6EDF               	movwf	indf2,c
  4713   001654  EFB5  F00B         	goto	l2217
  4714   001658                     l2167:
  4715                           
  4716                           ;drivers/scr/API_debounce.c: 46:    if(DelayRead(&antirrebote_boton_n->delay_anti_rebote
      +                          )) {
  4717   001658  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4718   00165A  0F02               	addlw	2
  4719   00165C  6E28               	movwf	DelayRead@delay^0,c
  4720   00165E  EC25  F00C         	call	_DelayRead	;wreg free
  4721   001662  0900               	iorlw	0
  4722   001664  B4D8               	btfsc	status,2,c
  4723   001666  EF37  F00B         	goto	u851
  4724   00166A  EF39  F00B         	goto	u850
  4725   00166E                     u851:
  4726   00166E  EFB5  F00B         	goto	l2217
  4727   001672                     u850:
  4728   001672                     
  4729                           ;drivers/scr/API_debounce.c: 48:     if(!estado_pin) {
  4730   001672  5036               	movf	DebounceFSMUpdate@estado_pin^0,w,c
  4731   001674  A4D8               	btfss	status,2,c
  4732   001676  EF3F  F00B         	goto	u861
  4733   00167A  EF41  F00B         	goto	u860
  4734   00167E                     u861:
  4735   00167E  EF4B  F00B         	goto	l2179
  4736   001682                     u860:
  4737   001682                     
  4738                           ;drivers/scr/API_debounce.c: 50:      antirrebote_boton_n->estadoActual = BUTTON_DOWN;
  4739   001682  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4740   001684  6ED9               	movwf	fsr2l,c
  4741   001686  6ADA               	clrf	fsr2h,c
  4742   001688  0E01               	movlw	1
  4743   00168A  26D9               	addwf	fsr2l,f,c
  4744   00168C  0E02               	movlw	2
  4745   00168E  6EDF               	movwf	indf2,c
  4746   001690                     
  4747                           ;drivers/scr/API_debounce.c: 51:      return PRESIONO_BOTON;
  4748   001690  0E01               	movlw	1
  4749   001692  EFB6  F00B         	goto	l239
  4750   001696                     l2179:
  4751                           
  4752                           ;drivers/scr/API_debounce.c: 54:      antirrebote_boton_n->estadoActual = BUTTON_UP;
  4753   001696  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4754   001698  6ED9               	movwf	fsr2l,c
  4755   00169A  6ADA               	clrf	fsr2h,c
  4756   00169C  0E01               	movlw	1
  4757   00169E  26D9               	addwf	fsr2l,f,c
  4758   0016A0  6ADF               	clrf	indf2,c
  4759   0016A2                     l2181:
  4760                           
  4761                           ;drivers/scr/API_debounce.c: 55:      return RUIDO;
  4762   0016A2  0E04               	movlw	4
  4763   0016A4  EFB6  F00B         	goto	l239
  4764   0016A8                     l2185:
  4765                           
  4766                           ;drivers/scr/API_debounce.c: 62:    if(DelayRead(&antirrebote_boton_n->delay_anti_rebote
      +                          )) {
  4767   0016A8  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4768   0016AA  0F02               	addlw	2
  4769   0016AC  6E28               	movwf	DelayRead@delay^0,c
  4770   0016AE  EC25  F00C         	call	_DelayRead	;wreg free
  4771   0016B2  0900               	iorlw	0
  4772   0016B4  B4D8               	btfsc	status,2,c
  4773   0016B6  EF5F  F00B         	goto	u871
  4774   0016BA  EF61  F00B         	goto	u870
  4775   0016BE                     u871:
  4776   0016BE  EFB5  F00B         	goto	l2217
  4777   0016C2                     u870:
  4778   0016C2                     
  4779                           ;drivers/scr/API_debounce.c: 64:     if(estado_pin) {
  4780   0016C2  5036               	movf	DebounceFSMUpdate@estado_pin^0,w,c
  4781   0016C4  B4D8               	btfsc	status,2,c
  4782   0016C6  EF67  F00B         	goto	u881
  4783   0016CA  EF69  F00B         	goto	u880
  4784   0016CE                     u881:
  4785   0016CE  EF72  F00B         	goto	l2197
  4786   0016D2                     u880:
  4787   0016D2                     
  4788                           ;drivers/scr/API_debounce.c: 66:      antirrebote_boton_n->estadoActual = BUTTON_UP;
  4789   0016D2  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4790   0016D4  6ED9               	movwf	fsr2l,c
  4791   0016D6  6ADA               	clrf	fsr2h,c
  4792   0016D8  0E01               	movlw	1
  4793   0016DA  26D9               	addwf	fsr2l,f,c
  4794   0016DC  6ADF               	clrf	indf2,c
  4795   0016DE                     
  4796                           ;drivers/scr/API_debounce.c: 67:      return SUELTO_BOTON;
  4797   0016DE  0E02               	movlw	2
  4798   0016E0  EFB6  F00B         	goto	l239
  4799   0016E4                     l2197:
  4800                           
  4801                           ;drivers/scr/API_debounce.c: 70:      antirrebote_boton_n->estadoActual = BUTTON_DOWN;
  4802   0016E4  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4803   0016E6  6ED9               	movwf	fsr2l,c
  4804   0016E8  6ADA               	clrf	fsr2h,c
  4805   0016EA  0E01               	movlw	1
  4806   0016EC  26D9               	addwf	fsr2l,f,c
  4807   0016EE  0E02               	movlw	2
  4808   0016F0  6EDF               	movwf	indf2,c
  4809   0016F2  EF51  F00B         	goto	l2181
  4810   0016F6                     l2203:
  4811                           
  4812                           ;drivers/scr/API_debounce.c: 78:    if(estado_pin)
  4813   0016F6  5036               	movf	DebounceFSMUpdate@estado_pin^0,w,c
  4814   0016F8  B4D8               	btfsc	status,2,c
  4815   0016FA  EF81  F00B         	goto	u891
  4816   0016FE  EF83  F00B         	goto	u890
  4817   001702                     u891:
  4818   001702  EFB5  F00B         	goto	l2217
  4819   001706                     u890:
  4820   001706                     
  4821                           ;drivers/scr/API_debounce.c: 79:     antirrebote_boton_n->estadoActual = BUTTON_RAISING;
  4822   001706  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4823   001708  6ED9               	movwf	fsr2l,c
  4824   00170A  6ADA               	clrf	fsr2h,c
  4825   00170C  0E01               	movlw	1
  4826   00170E  26D9               	addwf	fsr2l,f,c
  4827   001710  0E03               	movlw	3
  4828   001712  6EDF               	movwf	indf2,c
  4829   001714  EFB5  F00B         	goto	l2217
  4830   001718                     l2207:
  4831                           
  4832                           ;drivers/scr/API_debounce.c: 84:    DebounceFSMInit(antirrebote_boton_n);
  4833   001718  C035  F02C         	movff	DebounceFSMUpdate@antirrebote_boton_n,DebounceFSMInit@antirrebote_boton_n
  4834   00171C  EC17  F00E         	call	_DebounceFSMInit	;wreg free
  4835   001720                     
  4836                           ;drivers/scr/API_debounce.c: 85:    return ERROR_ANTI_REBOTE;
  4837   001720  0E00               	movlw	0
  4838   001722  EFB6  F00B         	goto	l239
  4839   001726                     l2215:
  4840   001726  5035               	movf	DebounceFSMUpdate@antirrebote_boton_n^0,w,c
  4841   001728  6ED9               	movwf	fsr2l,c
  4842   00172A  6ADA               	clrf	fsr2h,c
  4843   00172C  0E01               	movlw	1
  4844   00172E  26D9               	addwf	fsr2l,f,c
  4845   001730  50DF               	movf	indf2,w,c
  4846   001732  6E37               	movwf	??_DebounceFSMUpdate^0,c
  4847   001734  6A38               	clrf	(??_DebounceFSMUpdate+1)^0,c
  4848                           
  4849                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4850                           ; Switch size 1, requested type "simple"
  4851                           ; Number of cases is 1, Range of values is 0 to 0
  4852                           ; switch strategies available:
  4853                           ; Name         Instructions Cycles
  4854                           ; simple_byte            4     3 (average)
  4855                           ;	Chosen strategy is simple_byte
  4856   001736  5038               	movf	(??_DebounceFSMUpdate+1)^0,w,c
  4857   001738  0A00               	xorlw	0	; case 0
  4858   00173A  B4D8               	btfsc	status,2,c
  4859   00173C  EFA2  F00B         	goto	l2397
  4860   001740  EF8C  F00B         	goto	l2207
  4861   001744                     l2397:
  4862                           
  4863                           ; Switch size 1, requested type "simple"
  4864                           ; Number of cases is 4, Range of values is 0 to 3
  4865                           ; switch strategies available:
  4866                           ; Name         Instructions Cycles
  4867                           ; simple_byte           13     7 (average)
  4868                           ;	Chosen strategy is simple_byte
  4869   001744  5037               	movf	??_DebounceFSMUpdate^0,w,c
  4870   001746  0A00               	xorlw	0	; case 0
  4871   001748  B4D8               	btfsc	status,2,c
  4872   00174A  EF1B  F00B         	goto	l2163
  4873   00174E  0A01               	xorlw	1	; case 1
  4874   001750  B4D8               	btfsc	status,2,c
  4875   001752  EF2C  F00B         	goto	l2167
  4876   001756  0A03               	xorlw	3	; case 2
  4877   001758  B4D8               	btfsc	status,2,c
  4878   00175A  EF7B  F00B         	goto	l2203
  4879   00175E  0A01               	xorlw	1	; case 3
  4880   001760  B4D8               	btfsc	status,2,c
  4881   001762  EF54  F00B         	goto	l2185
  4882   001766  EF8C  F00B         	goto	l2207
  4883   00176A                     l2217:
  4884                           
  4885                           ;drivers/scr/API_debounce.c: 87:  return BOTON_SIN_CAMBIOS;
  4886   00176A  0E03               	movlw	3
  4887   00176C                     l239:
  4888   00176C  0012               	return		;funcret
  4889   00176E                     __end_of_DebounceFSMUpdate:
  4890                           	callstack 0
  4891                           
  4892 ;; *************** function _DelayRead *****************
  4893 ;; Defined at:
  4894 ;;		line 34 in file "drivers/scr/API_delay.c"
  4895 ;; Parameters:    Size  Location     Type
  4896 ;;  delay           1    1[COMRAM] PTR struct .
  4897 ;;		 -> main@delay_parpadeo(9), main@boton1(11), InicializoMRF24@delay_time_out(9), 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      _Bool 
  4902 ;; Registers used:
  4903 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4909 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;Total ram usage:       13 bytes
  4914 ;; Hardware stack levels used: 1
  4915 ;; Hardware stack levels required when called: 2
  4916 ;; This function calls:
  4917 ;;		_DelayIsRunning
  4918 ;; This function is called by:
  4919 ;;		_InicializoMRF24
  4920 ;;		_DebounceFSMUpdate
  4921 ;;		_main
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text32
  4926   00184A                     __ptext32:
  4927                           	callstack 0
  4928   00184A                     _DelayRead:
  4929                           	callstack 26
  4930   00184A                     
  4931                           ;drivers/scr/API_delay.c: 36:  if(DelayIsRunning(delay) == 0) {
  4932   00184A  C028  F027         	movff	DelayRead@delay,DelayIsRunning@delay
  4933   00184E  EC14  F00F         	call	_DelayIsRunning	;wreg free
  4934   001852  0900               	iorlw	0
  4935   001854  A4D8               	btfss	status,2,c
  4936   001856  EF2F  F00C         	goto	u621
  4937   00185A  EF31  F00C         	goto	u620
  4938   00185E                     u621:
  4939   00185E  EF45  F00C         	goto	l1863
  4940   001862                     u620:
  4941   001862                     
  4942                           ;drivers/scr/API_delay.c: 38:   delay->startTime = timeStamp;
  4943   001862  5028               	movf	DelayRead@delay^0,w,c
  4944   001864  6ED9               	movwf	fsr2l,c
  4945   001866  6ADA               	clrf	fsr2h,c
  4946   001868  C001  FFDE         	movff	_timeStamp,postinc2
  4947   00186C  C002  FFDE         	movff	_timeStamp+1,postinc2
  4948   001870  C003  FFDE         	movff	_timeStamp+2,postinc2
  4949   001874  C004  FFDE         	movff	_timeStamp+3,postinc2
  4950   001878                     
  4951                           ;drivers/scr/API_delay.c: 39:   delay->running = 1;
  4952   001878  5028               	movf	DelayRead@delay^0,w,c
  4953   00187A  6ED9               	movwf	fsr2l,c
  4954   00187C  6ADA               	clrf	fsr2h,c
  4955   00187E  0E08               	movlw	8
  4956   001880  26D9               	addwf	fsr2l,f,c
  4957   001882  0E01               	movlw	1
  4958   001884  6EDF               	movwf	indf2,c
  4959                           
  4960                           ;drivers/scr/API_delay.c: 40:  } else {
  4961   001886  EF79  F00C         	goto	l1871
  4962   00188A                     l1863:
  4963                           
  4964                           ;drivers/scr/API_delay.c: 42:   if((timeStamp - delay->startTime) >= delay->duration) {
  4965   00188A  5028               	movf	DelayRead@delay^0,w,c
  4966   00188C  6ED9               	movwf	fsr2l,c
  4967   00188E  6ADA               	clrf	fsr2h,c
  4968   001890  0E04               	movlw	4
  4969   001892  26D9               	addwf	fsr2l,f,c
  4970   001894  5028               	movf	DelayRead@delay^0,w,c
  4971   001896  6EE1               	movwf	fsr1l,c
  4972   001898  6AE2               	clrf	fsr1h,c
  4973   00189A  CFE6 F02D          	movff	postinc1,??_DelayRead+4
  4974   00189E  CFE6 F02E          	movff	postinc1,??_DelayRead+5
  4975   0018A2  CFE6 F02F          	movff	postinc1,??_DelayRead+6
  4976   0018A6  CFE6 F030          	movff	postinc1,??_DelayRead+7
  4977   0018AA  502D               	movf	(??_DelayRead+4)^0,w,c
  4978   0018AC  5C01               	subwf	_timeStamp^0,w,c
  4979   0018AE  6E31               	movwf	(??_DelayRead+8)^0,c
  4980   0018B0  502E               	movf	(??_DelayRead+5)^0,w,c
  4981   0018B2  5802               	subwfb	(_timeStamp+1)^0,w,c
  4982   0018B4  6E32               	movwf	(??_DelayRead+9)^0,c
  4983   0018B6  502F               	movf	(??_DelayRead+6)^0,w,c
  4984   0018B8  5803               	subwfb	(_timeStamp+2)^0,w,c
  4985   0018BA  6E33               	movwf	(??_DelayRead+10)^0,c
  4986   0018BC  5030               	movf	(??_DelayRead+7)^0,w,c
  4987   0018BE  5804               	subwfb	(_timeStamp+3)^0,w,c
  4988   0018C0  6E34               	movwf	(??_DelayRead+11)^0,c
  4989   0018C2  50DE               	movf	postinc2,w,c
  4990   0018C4  5C31               	subwf	(??_DelayRead+8)^0,w,c
  4991   0018C6  50DE               	movf	postinc2,w,c
  4992   0018C8  5832               	subwfb	(??_DelayRead+9)^0,w,c
  4993   0018CA  50DE               	movf	postinc2,w,c
  4994   0018CC  5833               	subwfb	(??_DelayRead+10)^0,w,c
  4995   0018CE  50DE               	movf	postinc2,w,c
  4996   0018D0  5834               	subwfb	(??_DelayRead+11)^0,w,c
  4997   0018D2  A0D8               	btfss	status,0,c
  4998   0018D4  EF6E  F00C         	goto	u631
  4999   0018D8  EF70  F00C         	goto	u630
  5000   0018DC                     u631:
  5001   0018DC  EF79  F00C         	goto	l1871
  5002   0018E0                     u630:
  5003   0018E0                     
  5004                           ;drivers/scr/API_delay.c: 44:    delay->running = 0;
  5005   0018E0  5028               	movf	DelayRead@delay^0,w,c
  5006   0018E2  6ED9               	movwf	fsr2l,c
  5007   0018E4  6ADA               	clrf	fsr2h,c
  5008   0018E6  0E08               	movlw	8
  5009   0018E8  26D9               	addwf	fsr2l,f,c
  5010   0018EA  6ADF               	clrf	indf2,c
  5011   0018EC                     
  5012                           ;drivers/scr/API_delay.c: 45:    return 1;
  5013   0018EC  0E01               	movlw	1
  5014   0018EE  EF7A  F00C         	goto	l213
  5015   0018F2                     l1871:
  5016                           
  5017                           ;drivers/scr/API_delay.c: 48:  return 0;
  5018   0018F2  0E00               	movlw	0
  5019   0018F4                     l213:
  5020   0018F4  0012               	return		;funcret
  5021   0018F6                     __end_of_DelayRead:
  5022                           	callstack 0
  5023                           
  5024 ;; *************** function _DelayIsRunning *****************
  5025 ;; Defined at:
  5026 ;;		line 83 in file "drivers/scr/API_delay.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  delay           1    0[COMRAM] PTR struct .
  5029 ;;		 -> main@delay_parpadeo(9), main@boton1(11), InicializoMRF24@delay_time_out(9), 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;		None
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  1    wreg      _Bool 
  5034 ;; Registers used:
  5035 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5041 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;Total ram usage:        1 bytes
  5046 ;; Hardware stack levels used: 1
  5047 ;; Hardware stack levels required when called: 1
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_DelayRead
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text33
  5056   001E28                     __ptext33:
  5057                           	callstack 0
  5058   001E28                     _DelayIsRunning:
  5059                           	callstack 26
  5060   001E28                     
  5061                           ;drivers/scr/API_delay.c: 85:  return delay->running;
  5062   001E28  5027               	movf	DelayIsRunning@delay^0,w,c
  5063   001E2A  6ED9               	movwf	fsr2l,c
  5064   001E2C  6ADA               	clrf	fsr2h,c
  5065   001E2E  0E08               	movlw	8
  5066   001E30  26D9               	addwf	fsr2l,f,c
  5067   001E32  50DF               	movf	indf2,w,c
  5068   001E34  0012               	return		;funcret
  5069   001E36                     __end_of_DelayIsRunning:
  5070                           	callstack 0
  5071                           
  5072 ;; *************** function _DebounceFSMInit *****************
  5073 ;; Defined at:
  5074 ;;		line 19 in file "drivers/scr/API_debounce.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  antirrebote_    1    5[COMRAM] PTR struct .
  5077 ;;		 -> main@boton1(11), 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;		None
  5080 ;; Return value:  Size  Location     Type
  5081 ;;                  1    wreg      void 
  5082 ;; Registers used:
  5083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5084 ;; Tracked objects:
  5085 ;;		On entry : 0/0
  5086 ;;		On exit  : 0/0
  5087 ;;		Unchanged: 0/0
  5088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5089 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;Total ram usage:        1 bytes
  5094 ;; Hardware stack levels used: 1
  5095 ;; Hardware stack levels required when called: 2
  5096 ;; This function calls:
  5097 ;;		_DelayInit
  5098 ;; This function is called by:
  5099 ;;		_DebounceFSMUpdate
  5100 ;;		_main
  5101 ;; This function uses a non-reentrant model
  5102 ;;
  5103                           
  5104                           	psect	text34
  5105   001C2E                     __ptext34:
  5106                           	callstack 0
  5107   001C2E                     _DebounceFSMInit:
  5108                           	callstack 27
  5109   001C2E                     
  5110                           ;drivers/scr/API_debounce.c: 21:  antirrebote_boton_n->estadoActual = BUTTON_UP;
  5111   001C2E  502C               	movf	DebounceFSMInit@antirrebote_boton_n^0,w,c
  5112   001C30  6ED9               	movwf	fsr2l,c
  5113   001C32  6ADA               	clrf	fsr2h,c
  5114   001C34  0E01               	movlw	1
  5115   001C36  26D9               	addwf	fsr2l,f,c
  5116   001C38  6ADF               	clrf	indf2,c
  5117   001C3A                     
  5118                           ;drivers/scr/API_debounce.c: 22:  DelayInit(&antirrebote_boton_n->delay_anti_rebote, 40)
      +                          ;
  5119   001C3A  502C               	movf	DebounceFSMInit@antirrebote_boton_n^0,w,c
  5120   001C3C  0F02               	addlw	2
  5121   001C3E  6E27               	movwf	DelayInit@delay^0,c
  5122   001C40  0E28               	movlw	40
  5123   001C42  6E28               	movwf	DelayInit@duration^0,c
  5124   001C44  0E00               	movlw	0
  5125   001C46  6E29               	movwf	(DelayInit@duration+1)^0,c
  5126   001C48  0E00               	movlw	0
  5127   001C4A  6E2A               	movwf	(DelayInit@duration+2)^0,c
  5128   001C4C  0E00               	movlw	0
  5129   001C4E  6E2B               	movwf	(DelayInit@duration+3)^0,c
  5130   001C50  EC70  F00E         	call	_DelayInit	;wreg free
  5131   001C54                     
  5132                           ;drivers/scr/API_debounce.c: 23:  antirrebote_boton_n->tecla_fue_presionada = 0;
  5133   001C54  502C               	movf	DebounceFSMInit@antirrebote_boton_n^0,w,c
  5134   001C56  6ED9               	movwf	fsr2l,c
  5135   001C58  6ADA               	clrf	fsr2h,c
  5136   001C5A  6ADF               	clrf	indf2,c
  5137   001C5C  0012               	return		;funcret
  5138   001C5E                     __end_of_DebounceFSMInit:
  5139                           	callstack 0
  5140                           
  5141 ;; *************** function _DelayInit *****************
  5142 ;; Defined at:
  5143 ;;		line 22 in file "drivers/scr/API_delay.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;  delay           1    0[COMRAM] PTR struct .
  5146 ;;		 -> main@delay_parpadeo(9), main@boton1(11), InicializoMRF24@delay_time_out(9), 
  5147 ;;  duration        4    1[COMRAM] unsigned long 
  5148 ;; Auto vars:     Size  Location     Type
  5149 ;;		None
  5150 ;; Return value:  Size  Location     Type
  5151 ;;                  1    wreg      void 
  5152 ;; Registers used:
  5153 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5154 ;; Tracked objects:
  5155 ;;		On entry : 0/0
  5156 ;;		On exit  : 0/0
  5157 ;;		Unchanged: 0/0
  5158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5159 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;Total ram usage:        5 bytes
  5164 ;; Hardware stack levels used: 1
  5165 ;; Hardware stack levels required when called: 1
  5166 ;; This function calls:
  5167 ;;		Nothing
  5168 ;; This function is called by:
  5169 ;;		_InicializoMRF24
  5170 ;;		_DebounceFSMInit
  5171 ;;		_main
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text35
  5176   001CE0                     __ptext35:
  5177                           	callstack 0
  5178   001CE0                     _DelayInit:
  5179                           	callstack 27
  5180   001CE0                     
  5181                           ;drivers/scr/API_delay.c: 24:  delay->duration = duration;
  5182   001CE0  5027               	movf	DelayInit@delay^0,w,c
  5183   001CE2  6ED9               	movwf	fsr2l,c
  5184   001CE4  6ADA               	clrf	fsr2h,c
  5185   001CE6  0E04               	movlw	4
  5186   001CE8  26D9               	addwf	fsr2l,f,c
  5187   001CEA  C028  FFDE         	movff	DelayInit@duration,postinc2
  5188   001CEE  C029  FFDE         	movff	DelayInit@duration+1,postinc2
  5189   001CF2  C02A  FFDE         	movff	DelayInit@duration+2,postinc2
  5190   001CF6  C02B  FFDE         	movff	DelayInit@duration+3,postinc2
  5191                           
  5192                           ;drivers/scr/API_delay.c: 25:  delay->running = 0;
  5193   001CFA  5027               	movf	DelayInit@delay^0,w,c
  5194   001CFC  6ED9               	movwf	fsr2l,c
  5195   001CFE  6ADA               	clrf	fsr2h,c
  5196   001D00  0E08               	movlw	8
  5197   001D02  26D9               	addwf	fsr2l,f,c
  5198   001D04  6ADF               	clrf	indf2,c
  5199   001D06  0012               	return		;funcret
  5200   001D08                     __end_of_DelayInit:
  5201                           	callstack 0
  5202                           
  5203 ;; *************** function _BoardInit *****************
  5204 ;; Defined at:
  5205 ;;		line 21 in file "hardware_config.c"
  5206 ;; Parameters:    Size  Location     Type
  5207 ;;		None
  5208 ;; Auto vars:     Size  Location     Type
  5209 ;;		None
  5210 ;; Return value:  Size  Location     Type
  5211 ;;                  1    wreg      void 
  5212 ;; Registers used:
  5213 ;;		wreg, status,2, cstack
  5214 ;; Tracked objects:
  5215 ;;		On entry : 0/0
  5216 ;;		On exit  : 0/0
  5217 ;;		Unchanged: 0/0
  5218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5222 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5223 ;;Total ram usage:        0 bytes
  5224 ;; Hardware stack levels used: 1
  5225 ;; Hardware stack levels required when called: 2
  5226 ;; This function calls:
  5227 ;;		_SPIInit
  5228 ;; This function is called by:
  5229 ;;		_main
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           	psect	text36
  5234   001A3C                     __ptext36:
  5235                           	callstack 0
  5236   001A3C                     _BoardInit:
  5237                           	callstack 28
  5238   001A3C                     
  5239                           ;hardware_config.c: 23:     PORTA = 0;
  5240   001A3C  6A80               	clrf	128,c	;volatile
  5241                           
  5242                           ;hardware_config.c: 24:     PORTB = 0;
  5243   001A3E  6A81               	clrf	129,c	;volatile
  5244                           
  5245                           ;hardware_config.c: 25:     PORTC = 0;
  5246   001A40  6A82               	clrf	130,c	;volatile
  5247                           
  5248                           ;hardware_config.c: 26:     PORTD = 0;
  5249   001A42  6A83               	clrf	131,c	;volatile
  5250                           
  5251                           ;hardware_config.c: 27:     PORTE = 0;
  5252   001A44  6A84               	clrf	132,c	;volatile
  5253                           
  5254                           ;hardware_config.c: 30:     TRISBbits.TRISB6 = 1;
  5255   001A46  8C93               	bsf	147,6,c	;volatile
  5256                           
  5257                           ;hardware_config.c: 31:     TRISBbits.TRISB7 = 1;
  5258   001A48  8E93               	bsf	147,7,c	;volatile
  5259                           
  5260                           ;hardware_config.c: 32:     TRISEbits.TRISE2 = 0;
  5261   001A4A  9496               	bcf	150,2,c	;volatile
  5262                           
  5263                           ;hardware_config.c: 33:     TRISEbits.TRISE0 = 0;
  5264   001A4C  9096               	bcf	150,0,c	;volatile
  5265                           
  5266                           ;hardware_config.c: 34:     TRISEbits.TRISE1 = 0;
  5267   001A4E  9296               	bcf	150,1,c	;volatile
  5268                           
  5269                           ;hardware_config.c: 35:     TRISCbits.TRISC2 = 1;
  5270   001A50  8494               	bsf	148,2,c	;volatile
  5271                           
  5272                           ;hardware_config.c: 36:     LATEbits.LATE2 = 1;
  5273   001A52  848D               	bsf	141,2,c	;volatile
  5274                           
  5275                           ;hardware_config.c: 37:     LATEbits.LATE0 = 1;
  5276   001A54  808D               	bsf	141,0,c	;volatile
  5277                           
  5278                           ;hardware_config.c: 38:     LATEbits.LATE1 = 1;
  5279   001A56  828D               	bsf	141,1,c	;volatile
  5280                           
  5281                           ;hardware_config.c: 39:     TRISBbits.TRISB0 = 1;
  5282   001A58  8093               	bsf	147,0,c	;volatile
  5283                           
  5284                           ;hardware_config.c: 40:     TRISCbits.TRISC6 = 0;
  5285   001A5A  9C94               	bcf	148,6,c	;volatile
  5286                           
  5287                           ;hardware_config.c: 41:     TRISCbits.TRISC7 = 0;
  5288   001A5C  9E94               	bcf	148,7,c	;volatile
  5289                           
  5290                           ;hardware_config.c: 42:     TRISDbits.TRISD4 = 0;
  5291   001A5E  9895               	bcf	149,4,c	;volatile
  5292                           
  5293                           ;hardware_config.c: 45:     IPEN = 0;
  5294   001A60  9ED0               	bcf	4048,7,c	;volatile
  5295                           
  5296                           ;hardware_config.c: 46:  GIE = 1;
  5297   001A62  8EF2               	bsf	4082,7,c	;volatile
  5298                           
  5299                           ;hardware_config.c: 47:  PEIE = 1;
  5300   001A64  8CF2               	bsf	4082,6,c	;volatile
  5301                           
  5302                           ;hardware_config.c: 48:     INT0E = 0;
  5303   001A66  98F2               	bcf	4082,4,c	;volatile
  5304                           
  5305                           ;hardware_config.c: 49:  RBIE = 0;
  5306   001A68  96F2               	bcf	4082,3,c	;volatile
  5307                           
  5308                           ;hardware_config.c: 50:  T0IE = 0;
  5309   001A6A  9AF2               	bcf	4082,5,c	;volatile
  5310                           
  5311                           ;hardware_config.c: 51:  TMR1IE = 1;
  5312   001A6C  809D               	bsf	3997,0,c	;volatile
  5313                           
  5314                           ;hardware_config.c: 52:  TMR2IE = 0;
  5315   001A6E  929D               	bcf	3997,1,c	;volatile
  5316                           
  5317                           ;hardware_config.c: 53:  CCP1IE = 0;
  5318   001A70  949D               	bcf	3997,2,c	;volatile
  5319                           
  5320                           ;hardware_config.c: 54:  CCP2IE = 0;
  5321   001A72  90A0               	bcf	4000,0,c	;volatile
  5322                           
  5323                           ;hardware_config.c: 55:  EEIE = 0;
  5324   001A74  98A0               	bcf	4000,4,c	;volatile
  5325                           
  5326                           ;hardware_config.c: 56:  SSPIE = 0;
  5327   001A76  969D               	bcf	3997,3,c	;volatile
  5328                           
  5329                           ;hardware_config.c: 57:  BCLIE = 0;
  5330   001A78  96A0               	bcf	4000,3,c	;volatile
  5331                           
  5332                           ;hardware_config.c: 58:  ADIE = 0;
  5333   001A7A  9C9D               	bcf	3997,6,c	;volatile
  5334                           
  5335                           ;hardware_config.c: 59:  RBIE = 0;
  5336   001A7C  96F2               	bcf	4082,3,c	;volatile
  5337                           
  5338                           ;hardware_config.c: 60:  RCIE = 0;
  5339   001A7E  9A9D               	bcf	3997,5,c	;volatile
  5340   001A80                     
  5341                           ;hardware_config.c: 61:     OSCCON = 0b01110010;
  5342   001A80  0E72               	movlw	114
  5343   001A82  6ED3               	movwf	211,c	;volatile
  5344                           
  5345                           ;hardware_config.c: 62:     OSCTUNE = 0b11011111;
  5346   001A84  0EDF               	movlw	223
  5347   001A86  6E9B               	movwf	155,c	;volatile
  5348   001A88                     
  5349                           ;hardware_config.c: 63:     RBPU = 1;
  5350   001A88  8EF1               	bsf	4081,7,c	;volatile
  5351   001A8A                     
  5352                           ;hardware_config.c: 66:     T1RD16 = 0;
  5353   001A8A  9ECD               	bcf	4045,7,c	;volatile
  5354   001A8C                     
  5355                           ;hardware_config.c: 67:  T1CKPS0 = 1;
  5356   001A8C  88CD               	bsf	4045,4,c	;volatile
  5357   001A8E                     
  5358                           ;hardware_config.c: 68:  T1CKPS1 = 1;
  5359   001A8E  8ACD               	bsf	4045,5,c	;volatile
  5360   001A90                     
  5361                           ;hardware_config.c: 69:  T1SYNC = 0;
  5362   001A90  94CD               	bcf	4045,2,c	;volatile
  5363   001A92                     
  5364                           ;hardware_config.c: 70:  T1OSCEN = 0;
  5365   001A92  96CD               	bcf	4045,3,c	;volatile
  5366   001A94                     
  5367                           ;hardware_config.c: 71:  TMR1CS = 0;
  5368   001A94  92CD               	bcf	4045,1,c	;volatile
  5369   001A96                     
  5370                           ;hardware_config.c: 72:  TMR1ON = 1;
  5371   001A96  80CD               	bsf	4045,0,c	;volatile
  5372   001A98                     
  5373                           ;hardware_config.c: 75:     SPIInit();
  5374   001A98  ECC6  F00E         	call	_SPIInit	;wreg free
  5375   001A9C  0012               	return		;funcret
  5376   001A9E                     __end_of_BoardInit:
  5377                           	callstack 0
  5378                           
  5379 ;; *************** function _SPIInit *****************
  5380 ;; Defined at:
  5381 ;;		line 30 in file "drivers/scr/API_MSPI_port.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;		None
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;		None
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      void 
  5388 ;; Registers used:
  5389 ;;		wreg, status,2
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:        0 bytes
  5400 ;; Hardware stack levels used: 1
  5401 ;; Hardware stack levels required when called: 1
  5402 ;; This function calls:
  5403 ;;		Nothing
  5404 ;; This function is called by:
  5405 ;;		_BoardInit
  5406 ;; This function uses a non-reentrant model
  5407 ;;
  5408                           
  5409                           	psect	text37
  5410   001D8C                     __ptext37:
  5411                           	callstack 0
  5412   001D8C                     _SPIInit:
  5413                           	callstack 28
  5414   001D8C                     
  5415                           ;drivers/scr/API_MSPI_port.c: 32:     TRISCbits.TRISC3 = 0;
  5416   001D8C  9694               	bcf	148,3,c	;volatile
  5417                           
  5418                           ;drivers/scr/API_MSPI_port.c: 33:     TRISCbits.TRISC5 = 0;
  5419   001D8E  9A94               	bcf	148,5,c	;volatile
  5420                           
  5421                           ;drivers/scr/API_MSPI_port.c: 34:     TRISCbits.TRISC4 = 1;
  5422   001D90  8894               	bsf	148,4,c	;volatile
  5423                           
  5424                           ;drivers/scr/API_MSPI_port.c: 35:     SSPSTATbits.SMP = 1;
  5425   001D92  8EC7               	bsf	199,7,c	;volatile
  5426                           
  5427                           ;drivers/scr/API_MSPI_port.c: 36:  SSPSTATbits.CKE = 1;
  5428   001D94  8CC7               	bsf	199,6,c	;volatile
  5429   001D96                     
  5430                           ;drivers/scr/API_MSPI_port.c: 37:     SSPCON1 = 0X00 | 0X01;
  5431   001D96  0E01               	movlw	1
  5432   001D98  6EC6               	movwf	198,c	;volatile
  5433   001D9A                     
  5434                           ;drivers/scr/API_MSPI_port.c: 38:  SSPCON1bits.WCOL = 1;
  5435   001D9A  8EC6               	bsf	198,7,c	;volatile
  5436   001D9C                     
  5437                           ;drivers/scr/API_MSPI_port.c: 39:  SSPCON1bits.SSPOV = 0;
  5438   001D9C  9CC6               	bcf	198,6,c	;volatile
  5439   001D9E                     
  5440                           ;drivers/scr/API_MSPI_port.c: 40:  SSPCON1bits.SSPEN = 1;
  5441   001D9E  8AC6               	bsf	198,5,c	;volatile
  5442   001DA0                     
  5443                           ;drivers/scr/API_MSPI_port.c: 41:  SSPCON1bits.CKP = 0;
  5444   001DA0  98C6               	bcf	198,4,c	;volatile
  5445   001DA2  0012               	return		;funcret
  5446   001DA4                     __end_of_SPIInit:
  5447                           	callstack 0
  5448                           
  5449 ;; *************** function _isr *****************
  5450 ;; Defined at:
  5451 ;;		line 5 in file "drivers/inc/interrupciones.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;		None
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;		None
  5456 ;; Return value:  Size  Location     Type
  5457 ;;                  1    wreg      void 
  5458 ;; Registers used:
  5459 ;;		wreg, status,2, status,0
  5460 ;; Tracked objects:
  5461 ;;		On entry : 0/0
  5462 ;;		On exit  : 0/0
  5463 ;;		Unchanged: 0/0
  5464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;Total ram usage:        0 bytes
  5470 ;; Hardware stack levels used: 1
  5471 ;; This function calls:
  5472 ;;		Nothing
  5473 ;; This function is called by:
  5474 ;;		Interrupt level 2
  5475 ;; This function uses a non-reentrant model
  5476 ;;
  5477                           
  5478                           	psect	intcode
  5479   000008                     __pintcode:
  5480                           	callstack 0
  5481   000008                     _isr:
  5482                           	callstack 23
  5483                           
  5484                           ;incstack = 0
  5485   000008  8244               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  5486   00000A                     
  5487                           ;drivers/inc/interrupciones.c: 7:  if(TMR1IE && TMR1IF) {
  5488   00000A  A09D               	btfss	3997,0,c	;volatile
  5489   00000C  EF0A  F000         	goto	i2u103_41
  5490   000010  EF0C  F000         	goto	i2u103_40
  5491   000014                     i2u103_41:
  5492   000014  EF1E  F000         	goto	i2l389
  5493   000018                     i2u103_40:
  5494   000018  A09E               	btfss	3998,0,c	;volatile
  5495   00001A  EF11  F000         	goto	i2u104_41
  5496   00001E  EF13  F000         	goto	i2u104_40
  5497   000022                     i2u104_41:
  5498   000022  EF1E  F000         	goto	i2l389
  5499   000026                     i2u104_40:
  5500   000026                     
  5501                           ;drivers/inc/interrupciones.c: 9:   TMR1IF = 0;
  5502   000026  909E               	bcf	3998,0,c	;volatile
  5503   000028                     
  5504                           ;drivers/inc/interrupciones.c: 10:         TMR1L = 0XF7;
  5505   000028  0EF7               	movlw	247
  5506   00002A  6ECE               	movwf	206,c	;volatile
  5507                           
  5508                           ;drivers/inc/interrupciones.c: 11:   TMR1H = 0XFD;
  5509   00002C  0EFD               	movlw	253
  5510   00002E  6ECF               	movwf	207,c	;volatile
  5511   000030                     
  5512                           ;drivers/inc/interrupciones.c: 12:   timeStamp++;
  5513   000030  0E01               	movlw	1
  5514   000032  2601               	addwf	_timeStamp^0,f,c
  5515   000034  0E00               	movlw	0
  5516   000036  2202               	addwfc	(_timeStamp+1)^0,f,c
  5517   000038  2203               	addwfc	(_timeStamp+2)^0,f,c
  5518   00003A  2204               	addwfc	(_timeStamp+3)^0,f,c
  5519   00003C                     i2l389:
  5520   00003C  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  5521   00003E  0011               	retfie		f
  5522   000040                     __end_of_isr:
  5523                           	callstack 0
  5524                           
  5525                           	psect	rparam
  5526   000001                     ___rparam_used  equ	1
  5527   000000                     ___param_bank   equ	0
  5528   000000                     __Lparam        equ	__Lrparam
  5529   000000                     __Hparam        equ	__Hrparam
  5530                           
  5531                           	psect	temp
  5532   000044                     btemp:
  5533                           	callstack 0
  5534   000044                     	ds	1
  5535   000044                     int$flags       set	btemp
  5536   000045                     wtemp8          set	btemp+1
  5537   000045                     ttemp5          set	btemp+1
  5538   000048                     ttemp6          set	btemp+4
  5539   00004C                     ttemp7          set	btemp+8
  5540                           
  5541                           	psect	idloc
  5542                           
  5543                           ;Config register IDLOC0 @ 0x200000
  5544                           ;	unspecified, using default values
  5545   200000                     	org	2097152
  5546   200000  FF                 	db	255
  5547                           
  5548                           ;Config register IDLOC1 @ 0x200001
  5549                           ;	unspecified, using default values
  5550   200001                     	org	2097153
  5551   200001  FF                 	db	255
  5552                           
  5553                           ;Config register IDLOC2 @ 0x200002
  5554                           ;	unspecified, using default values
  5555   200002                     	org	2097154
  5556   200002  FF                 	db	255
  5557                           
  5558                           ;Config register IDLOC3 @ 0x200003
  5559                           ;	unspecified, using default values
  5560   200003                     	org	2097155
  5561   200003  FF                 	db	255
  5562                           
  5563                           ;Config register IDLOC4 @ 0x200004
  5564                           ;	unspecified, using default values
  5565   200004                     	org	2097156
  5566   200004  FF                 	db	255
  5567                           
  5568                           ;Config register IDLOC5 @ 0x200005
  5569                           ;	unspecified, using default values
  5570   200005                     	org	2097157
  5571   200005  FF                 	db	255
  5572                           
  5573                           ;Config register IDLOC6 @ 0x200006
  5574                           ;	unspecified, using default values
  5575   200006                     	org	2097158
  5576   200006  FF                 	db	255
  5577                           
  5578                           ;Config register IDLOC7 @ 0x200007
  5579                           ;	unspecified, using default values
  5580   200007                     	org	2097159
  5581   200007  FF                 	db	255
  5582                           
  5583                           	psect	config
  5584                           
  5585                           ; Padding undefined space
  5586   300000                     	org	3145728
  5587   300000  FF                 	db	255
  5588                           
  5589                           ;Config register CONFIG1H @ 0x300001
  5590                           ;	Oscillator Selection bits
  5591                           ;	FOSC = INTIO67, Internal oscillator block, port function on RA6 and RA7
  5592                           ;	Fail-Safe Clock Monitor Enable bit
  5593                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  5594                           ;	Internal/External Oscillator Switchover bit
  5595                           ;	IESO = OFF, Oscillator Switchover mode disabled
  5596   300001                     	org	3145729
  5597   300001  08                 	db	8
  5598                           
  5599                           ;Config register CONFIG2L @ 0x300002
  5600                           ;	Power-up Timer Enable bit
  5601                           ;	PWRT = 0x1, unprogrammed default
  5602                           ;	Brown-out Reset Enable bits
  5603                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  5604                           ;	Brown Out Reset Voltage bits
  5605                           ;	BORV = 22, VBOR set to 2.2 V nominal
  5606   300002                     	org	3145730
  5607   300002  11                 	db	17
  5608                           
  5609                           ;Config register CONFIG2H @ 0x300003
  5610                           ;	Watchdog Timer Enable bit
  5611                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
  5612                           ;	Watchdog Timer Postscale Select bits
  5613                           ;	WDTPS = 8192, 1:8192
  5614   300003                     	org	3145731
  5615   300003  1A                 	db	26
  5616                           
  5617                           ; Padding undefined space
  5618   300004                     	org	3145732
  5619   300004  FF                 	db	255
  5620                           
  5621                           ;Config register CONFIG3H @ 0x300005
  5622                           ;	CCP2 MUX bit
  5623                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  5624                           ;	PORTB A/D Enable bit
  5625                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  5626                           ;	Low-Power Timer1 Oscillator Enable bit
  5627                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  5628                           ;	HFINTOSC Fast Start-up
  5629                           ;	HFOFST = OFF, The system clock is held off until the HFINTOSC is stable.
  5630                           ;	MCLR Pin Enable bit
  5631                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
  5632   300005                     	org	3145733
  5633   300005  01                 	db	1
  5634                           
  5635                           ;Config register CONFIG4L @ 0x300006
  5636                           ;	Stack Full/Underflow Reset Enable bit
  5637                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  5638                           ;	Single-Supply ICSP Enable bit
  5639                           ;	LVP = OFF, Single-Supply ICSP disabled
  5640                           ;	Extended Instruction Set Enable bit
  5641                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  5642                           ;	Background Debugger Enable bit
  5643                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  5644   300006                     	org	3145734
  5645   300006  80                 	db	128
  5646                           
  5647                           ; Padding undefined space
  5648   300007                     	org	3145735
  5649   300007  FF                 	db	255
  5650                           
  5651                           ;Config register CONFIG5L @ 0x300008
  5652                           ;	Code Protection Block 0
  5653                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  5654                           ;	Code Protection Block 1
  5655                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  5656                           ;	Code Protection Block 2
  5657                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  5658                           ;	Code Protection Block 3
  5659                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  5660   300008                     	org	3145736
  5661   300008  0F                 	db	15
  5662                           
  5663                           ;Config register CONFIG5H @ 0x300009
  5664                           ;	Boot Block Code Protection bit
  5665                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  5666                           ;	Data EEPROM Code Protection bit
  5667                           ;	CPD = OFF, Data EEPROM not code-protected
  5668   300009                     	org	3145737
  5669   300009  C0                 	db	192
  5670                           
  5671                           ;Config register CONFIG6L @ 0x30000A
  5672                           ;	Write Protection Block 0
  5673                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  5674                           ;	Write Protection Block 1
  5675                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  5676                           ;	Write Protection Block 2
  5677                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  5678                           ;	Write Protection Block 3
  5679                           ;	WRT3 = OFF, Block 3 (00C000h-00FFFFh) not write-protected
  5680   30000A                     	org	3145738
  5681   30000A  0F                 	db	15
  5682                           
  5683                           ;Config register CONFIG6H @ 0x30000B
  5684                           ;	Configuration Register Write Protection bit
  5685                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  5686                           ;	Boot Block Write Protection bit
  5687                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  5688                           ;	Data EEPROM Write Protection bit
  5689                           ;	WRTD = OFF, Data EEPROM not write-protected
  5690   30000B                     	org	3145739
  5691   30000B  E0                 	db	224
  5692                           
  5693                           ;Config register CONFIG7L @ 0x30000C
  5694                           ;	unspecified, using default values
  5695                           ;	Table Read Protection Block 0
  5696                           ;	EBTR0 = 0x1, unprogrammed default
  5697                           ;	Table Read Protection Block 1
  5698                           ;	EBTR1 = 0x1, unprogrammed default
  5699                           ;	Table Read Protection Block 2
  5700                           ;	EBTR2 = 0x1, unprogrammed default
  5701                           ;	Table Read Protection Block 3
  5702                           ;	EBTR3 = 0x1, unprogrammed default
  5703   30000C                     	org	3145740
  5704   30000C  0F                 	db	15
  5705                           
  5706                           ;Config register CONFIG7H @ 0x30000D
  5707                           ;	Boot Block Table Read Protection bit
  5708                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  5709   30000D                     	org	3145741
  5710   30000D  40                 	db	64
  5711                           tosu	equ	0xFFF
  5712                           tosh	equ	0xFFE
  5713                           tosl	equ	0xFFD
  5714                           stkptr	equ	0xFFC
  5715                           pclatu	equ	0xFFB
  5716                           pclath	equ	0xFFA
  5717                           pcl	equ	0xFF9
  5718                           tblptru	equ	0xFF8
  5719                           tblptrh	equ	0xFF7
  5720                           tblptrl	equ	0xFF6
  5721                           tablat	equ	0xFF5
  5722                           prodh	equ	0xFF4
  5723                           prodl	equ	0xFF3
  5724                           indf0	equ	0xFEF
  5725                           postinc0	equ	0xFEE
  5726                           postdec0	equ	0xFED
  5727                           preinc0	equ	0xFEC
  5728                           plusw0	equ	0xFEB
  5729                           fsr0h	equ	0xFEA
  5730                           fsr0l	equ	0xFE9
  5731                           wreg	equ	0xFE8
  5732                           indf1	equ	0xFE7
  5733                           postinc1	equ	0xFE6
  5734                           postdec1	equ	0xFE5
  5735                           preinc1	equ	0xFE4
  5736                           plusw1	equ	0xFE3
  5737                           fsr1h	equ	0xFE2
  5738                           fsr1l	equ	0xFE1
  5739                           bsr	equ	0xFE0
  5740                           indf2	equ	0xFDF
  5741                           postinc2	equ	0xFDE
  5742                           postdec2	equ	0xFDD
  5743                           preinc2	equ	0xFDC
  5744                           plusw2	equ	0xFDB
  5745                           fsr2h	equ	0xFDA
  5746                           fsr2l	equ	0xFD9
  5747                           status	equ	0xFD8

Data Sizes:
    Strings     85
    Constant    24
    Data        0
    BSS         150
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      67
    BANK0           160     77     133
    BANK1           256      0      56
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           96      0       0

Pointer List with Targets:

    DebounceFSMInit@antirrebote_boton_n	PTR struct . size(1) Largest target is 11
		 -> main@boton1(BANK0[11]), 

    DebounceFSMUpdate@antirrebote_boton_n	PTR struct . size(1) Largest target is 11
		 -> main@boton1(BANK0[11]), 

    DelayInit@delay	PTR struct . size(1) Largest target is 11
		 -> InicializoMRF24@delay_time_out(COMRAM[9]), main@boton1(BANK0[11]), main@delay_parpadeo(BANK0[9]), 

    DelayIsRunning@delay	PTR struct . size(1) Largest target is 11
		 -> InicializoMRF24@delay_time_out(COMRAM[9]), main@boton1(BANK0[11]), main@delay_parpadeo(BANK0[9]), 

    DelayRead@delay	PTR struct . size(1) Largest target is 11
		 -> InicializoMRF24@delay_time_out(COMRAM[9]), main@boton1(BANK0[11]), main@delay_parpadeo(BANK0[9]), 

    DelayReset@delay	PTR struct . size(1) Largest target is 9
		 -> InicializoMRF24@delay_time_out(COMRAM[9]), 

    main@mrf24_data_in	PTR struct . size(1) Largest target is 56
		 -> data_in_s(BANK0[56]), 

    MRF24TransmitirDato@p_info_out_s	PTR struct . size(1) Largest target is 56
		 -> main@data_out_s(BANK0[56]), 

    sp__MRF24GetConfig	PTR struct . size(1) Largest target is 32
		 -> data_config_s(COMRAM[32]), 

    sp__MRF24GetDataIn	PTR struct . size(1) Largest target is 56
		 -> data_in_s(BANK0[56]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 56
		 -> main@data_out_s(BANK0[56]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 32
		 -> data_config_s(COMRAM[32]), 

    strcmp@l	PTR const unsigned char  size(1) Largest target is 56
		 -> data_in_s(BANK0[56]), data_in_s$buffer(BANK0[50]), 

    strcmp@r	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_10(CODE[8]), STR_13(CODE[8]), STR_4(CODE[8]), STR_7(CODE[8]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 56
		 -> main@data_out_s(BANK0[56]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 56
		 -> main@data_out_s(BANK0[56]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[8]), STR_11(CODE[14]), STR_14(CODE[12]), STR_15(CODE[11]), 
		 -> STR_2(CODE[8]), STR_5(CODE[14]), STR_8(CODE[12]), 

    strlen@a	PTR const unsigned char  size(1) Largest target is 56
		 -> data_out_s$buffer(COMRAM[50]), main@data_out_s(BANK0[56]), 

    strlen@s	PTR const unsigned char  size(1) Largest target is 56
		 -> data_out_s$buffer(COMRAM[50]), main@data_out_s(BANK0[56]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 32
		 -> data_config_s(COMRAM[32]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 32
		 -> data_config_s(COMRAM[32]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 16
		 -> default_mac_address(CODE[8]), default_security_key(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_MRF24J40Init
    _MRF24TransmitirDato->_SetLongAddr
    _MRF24ReciboPaquete->_GetLongAddr
    _MRF24ReciboPaquete->_SetLongAddr
    _MRF24J40Init->_InicializoMRF24
    _InicializoVariables->_strncpy
    _InicializoPines->_SetCSPin
    _InicializoPines->_SetResetPin
    _InicializoPines->_SetWakePin
    _InicializoMRF24->_DelayRead
    _SetDeviceMACAddress->_SetShortAddr
    _SetDeviceAddress->_SetShortAddr
    _SetChannel->_SetLongAddr
    _SetShortAddr->_WriteByteSPIPort
    _SetLongAddr->_Write2ByteSPIPort
    _GetShortAddr->_WriteByteSPIPort
    _WriteByteSPIPort->_SPIWriteByte
    _GetLongAddr->_Write2ByteSPIPort
    _Write2ByteSPIPort->_SPIWrite2Byte
    _SPIWrite2Byte->_SPIWriteByte
    _DebounceFSMUpdate->_DelayRead
    _DelayRead->_DelayIsRunning
    _DebounceFSMInit->_DelayInit

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                79    79      0    6500
                                             27 COMRAM     2     2      0
                                              0 BANK0     77    77      0
                          _BoardInit
                    _DebounceFSMInit
                  _DebounceFSMUpdate
                          _DelayInit
                          _DelayRead
                     _MRF24GetDataIn
                      _MRF24IsNewMsg
                       _MRF24J40Init
                 _MRF24ReciboPaquete
                _MRF24TransmitirDato
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               4     2      2      87
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               3     1      2     120
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _MRF24TransmitirDato                                  7     6      1    1280
                                             10 COMRAM     7     6      1
                        _SetLongAddr
                       _SetShortAddr
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               3     1      2      91
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _MRF24ReciboPaquete                                   9     9      0     995
                                             10 COMRAM     9     9      0
                        _GetLongAddr
                       _GetShortAddr
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (1) _MRF24J40Init                                         1     1      0    2528
                                             26 COMRAM     1     1      0
                    _InicializoMRF24
                    _InicializoPines
                _InicializoVariables
                        _SetResetPin
 ---------------------------------------------------------------------------------
 (2) _InicializoVariables                                  0     0      0     147
                            _strncpy
 ---------------------------------------------------------------------------------
 (3) _strncpy                                              6     2      4     147
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _InicializoPines                                      0     0      0      87
                           _SetCSPin
                        _SetResetPin
                         _SetWakePin
 ---------------------------------------------------------------------------------
 (3) _SetWakePin                                           1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SetResetPin                                          1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InicializoMRF24                                     12    12      0    2265
                                             14 COMRAM    12    12      0
                          _DelayInit
                          _DelayRead
                         _DelayReset
                        _GetLongAddr
                       _GetShortAddr
                         _SetChannel
                   _SetDeviceAddress
                _SetDeviceMACAddress
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (3) _SetDeviceMACAddress                                  1     1      0     279
                                              4 COMRAM     1     1      0
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (3) _SetDeviceAddress                                     0     0      0     189
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (3) _SetChannel                                           1     1      0     487
                                             10 COMRAM     1     1      0
                        _SetLongAddr
                       _SetShortAddr
 ---------------------------------------------------------------------------------
 (2) _SetShortAddr                                         2     1      1     189
                                              2 COMRAM     2     1      1
                           _SetCSPin
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (2) _SetLongAddr                                          5     2      3     298
                                              5 COMRAM     5     2      3
                           _SetCSPin
                  _Write2ByteSPIPort
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (2) _GetShortAddr                                         2     2      0     171
                                              2 COMRAM     2     2      0
                    _ReadByteSPIPort
                           _SetCSPin
                   _WriteByteSPIPort
 ---------------------------------------------------------------------------------
 (3) _WriteByteSPIPort                                     1     1      0      58
                                              1 COMRAM     1     1      0
                       _SPIWriteByte
 ---------------------------------------------------------------------------------
 (2) _GetLongAddr                                          5     3      2     200
                                              5 COMRAM     5     3      2
                    _ReadByteSPIPort
                           _SetCSPin
                  _Write2ByteSPIPort
 ---------------------------------------------------------------------------------
 (3) _Write2ByteSPIPort                                    2     0      2      98
                                              3 COMRAM     2     0      2
                      _SPIWrite2Byte
 ---------------------------------------------------------------------------------
 (4) _SPIWrite2Byte                                        2     0      2      74
                                              1 COMRAM     2     0      2
                       _SPIWriteByte
 ---------------------------------------------------------------------------------
 (4) _SPIWriteByte                                         1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetCSPin                                             1     1      0      29
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ReadByteSPIPort                                      0     0      0       0
                            _SPIRead
 ---------------------------------------------------------------------------------
 (4) _SPIRead                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _DelayReset                                           1     0      1      46
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _MRF24IsNewMsg                                        0     0      0       0
                    _IsMRF24Interrup
 ---------------------------------------------------------------------------------
 (2) _IsMRF24Interrup                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MRF24GetDataIn                                       2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _DebounceFSMUpdate                                    4     2      2     610
                                             14 COMRAM     4     2      2
                    _DebounceFSMInit
                          _DelayRead
 ---------------------------------------------------------------------------------
 (3) _DelayRead                                           13    12      1     160
                                              1 COMRAM    13    12      1
                     _DelayIsRunning
 ---------------------------------------------------------------------------------
 (4) _DelayIsRunning                                       1     0      1      23
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _DebounceFSMInit                                      1     0      1     140
                                              5 COMRAM     1     0      1
                          _DelayInit
 ---------------------------------------------------------------------------------
 (3) _DelayInit                                            5     0      5      72
                                              0 COMRAM     5     0      5
 ---------------------------------------------------------------------------------
 (1) _BoardInit                                            0     0      0       0
                            _SPIInit
 ---------------------------------------------------------------------------------
 (2) _SPIInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _isr                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BoardInit
     _SPIInit
   _DebounceFSMInit
     _DelayInit
   _DebounceFSMUpdate
     _DebounceFSMInit
     _DelayRead
       _DelayIsRunning
   _DelayInit
   _DelayRead
   _MRF24GetDataIn
   _MRF24IsNewMsg
     _IsMRF24Interrup
   _MRF24J40Init
     _InicializoMRF24
       _DelayInit
       _DelayRead
       _DelayReset
       _GetLongAddr
         _ReadByteSPIPort
           _SPIRead
         _SetCSPin
         _Write2ByteSPIPort
           _SPIWrite2Byte
             _SPIWriteByte
       _GetShortAddr
         _ReadByteSPIPort
         _SetCSPin
         _WriteByteSPIPort
           _SPIWriteByte
       _SetChannel
         _SetLongAddr
           _SetCSPin
           _Write2ByteSPIPort
           _WriteByteSPIPort
         _SetShortAddr
           _SetCSPin
           _WriteByteSPIPort
       _SetDeviceAddress
         _SetShortAddr
       _SetDeviceMACAddress
         _SetShortAddr
       _SetLongAddr
       _SetShortAddr
     _InicializoPines
       _SetCSPin
       _SetResetPin
       _SetWakePin
     _InicializoVariables
       _strncpy
     _SetResetPin
   _MRF24ReciboPaquete
     _GetLongAddr
     _GetShortAddr
     _SetLongAddr
     _SetShortAddr
   _MRF24TransmitirDato
     _SetLongAddr
     _SetShortAddr
     _strlen
   _strcmp
   _strcpy

 _isr (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            3935      0       0      0.0%
BITBANK14          256      0       0      0.0%
BANK14             256      0       0      0.0%
BITBANK13          256      0       0      0.0%
BANK13             256      0       0      0.0%
BITBANK12          256      0       0      0.0%
BANK12             256      0       0      0.0%
BITBANK11          256      0       0      0.0%
BANK11             256      0       0      0.0%
BITBANK10          256      0       0      0.0%
BANK10             256      0       0      0.0%
BITBANK9           256      0       0      0.0%
BANK9              256      0       0      0.0%
BITBANK8           256      0       0      0.0%
BANK8              256      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0      56     21.9%
BITBANK0           160      0       0      0.0%
BANK0              160     77     133     83.1%
BITBIGSFRh          98      0       0      0.0%
BITBANK15           96      0       0      0.0%
BANK15              96      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     29      67     71.3%
BITBIGSFRll         32      0       0      0.0%
BITBIGSFRlh         27      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     262      0.0%


Microchip Technology PIC18 Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Jul 26 01:56:36 2025

                         _SSPSTATbits 0FC7                                    l21 1DCC  
                                  l30 1DFC                                    l24 1E26  
                                  l33 1DE0                                    l42 1E44  
                                  l27 1DEE                                    l36 1E3E  
                                  l39 1E0A                       _IsMRF24Interrup 1DCE  
                       ?_MRF24J40Init 0027                                   l102 1A3A  
                                 l200 1DB8                                   l120 1B22  
                                 l105 14B6                                   l114 1D72  
                                 l123 1AE0                                   l107 1630  
                                 l213 18F4                                   l117 1D2C  
                                 l222 1E34                                   l126 1B94  
                                 l134 1CB4                                   l207 1D06  
                                 l160 1848                                   l144 1294  
                                 l129 1CDE                                   l137 1B5C  
                                 l145 10A4                                   l155 1BC8  
                                 l219 1D52                                   l229 1C5C  
                                 l166 1E48                                   l239 176C  
                                 l191 1D8A                                   l280 12D8  
                                 l185 1DA2                                   l194 1E18  
                                 l188 1D7C                                   l373 1A9C  
                                 l197 1DA8                                   _GIE 7F97  
                                 u600 1946                                   u601 1942  
                                 u530 1D8A                                   u610 196E  
                                 u531 1D86                                   u611 196A  
                                 u620 1862                                   u700 14F2  
                                 u621 185E                                   u701 14EE  
                                 u630 18E0                                   u550 1DB6  
                                 u710 15F0                                   u631 18DC  
                                 u551 1DB2                                   u711 15EC  
                                 u800 1BA6                                   u640 1CB4  
                                 u720 1606                                   u801 1BA2  
                                 u545 1E24                                   u641 1CB0  
                                 u721 1602                                   u810 1BC0  
                                 u546 1E26                                   u730 1C7E  
                                 u811 1BBC                                   u731 1C7A  
                                 u660 1DDE                                   u820 177E  
                                 u740 1080                                   u900 1C2C  
                                 u661 1DD8                                   u565 1AEC  
                                 u821 177A                                   u741 107C  
                                 u901 1C28                                   u590 1930  
                                 u670 19E8                                   u830 1832  
                                 u750 10A0                                   u910 199E  
                                 u655 1AA8                                   u575 1DEC  
                                 u591 192C                                   u671 19E4  
                                 u831 182E                                   u751 109C  
                                 u911 199A                                   u840 1646  
                                 u576 1DEE                                   u680 19FA  
                                 u760 10CA                                   u920 19B4  
                                 u841 1642                                   u585 1DFA  
                                 u681 19F6                                   u761 10C6  
                                 u921 19B0                                   u850 1672  
                                 u666 1DE0                                   u690 14D6  
                                 u586 1DFC                                   u770 113C  
                                 u851 166E                                   u691 14D2  
                                 u771 1138                                   u860 1682  
                                 u780 11E2                                   u940 131A  
                                 u861 167E                                   u781 11DE  
                                 u941 1314                                   u870 16C2  
                                 u790 127A                                   u950 135E  
                                 u871 16BE                                   u791 1276  
                                 u951 135A                                   u880 16D2  
                                 u960 138C                                   u881 16CE  
                                 u961 1388                                   u890 1706  
                                 u970 13C0                                   u946 131C  
                                 u891 1702                                   u971 13BC  
                                 u980 13F4                                   u981 13F0  
                                 u990 1428                                   u991 1424  
                                 _isr 0008                                   wreg 0FE8  
                 __end_of_GetLongAddr 1AE2                                  l2001 1C66  
                                l2011 1D96                                  l2003 1C68  
                                l2013 1D9A                                  l2005 1C7E  
                                l2101 1234                                  l2015 1D9C  
                                l2023 1C2E                                  l2031 1B28  
                                l2111 125A                                  l2103 1236  
                                l1071 19D4                                  l2017 1D9E  
                                l2009 1D8C                                  l2025 1C3A  
                                l2121 1B96                                  l2033 1B2C  
                                l2113 127A                                  l2105 123C  
                                l2019 1DA0                                  l2027 1C54  
                                l2203 16F6                                  l2123 1BA6  
                                l2035 1B3E                                  l1083 1C8A  
                                l2115 1288                                  l2107 1256  
                                l2051 10A6                                  l2043 1070  
                                l2205 1706                                  l2133 1BC6  
                                l1093 196E                                  l2037 1B44  
                                l2029 1B24                                  l2141 1782  
                                l2117 128A                                  l2109 1258  
                                l2061 10E0                                  l2053 10B8  
                                l1077 1C2C                                  l2301 134A  
                                l2231 1A8A                                  l2207 1718  
                                l2215 1726                                  l2127 1BAC  
                                l2039 1B56                                  l2151 1802  
                                l2143 17D8                                  l2071 1124  
                                l2063 10F2                                  l2047 1084  
                                l2311 138E                                  l2303 135E  
                                l2241 1A94                                  l2233 1A8C  
                                l2225 1A3C                                  l2209 1720  
                                l2217 176A                                  l2161 1632  
                                l2129 1BC0                                  l2153 1832  
                                l2145 17E0                                  l2137 176E  
                                l2081 1182                                  l2073 113C  
                                l2065 1100                                  l2057 10CE  
                                l2321 13F4                                  l2313 139E  
                                l2305 1366                                  l2243 1A96  
                                l2235 1A8E                                  l2227 1A80  
                                l2171 1682                                  l2163 1636  
                                l2147 17E6                                  l2091 11C6  
                                l2083 1184                                  l2075 114A  
                                l2067 1110                                  l2059 10DE  
                                l2251 1C00                                  l2331 143A  
                                l2323 13F6                                  l2315 13C0  
                                l2307 136A                                  l2245 1A98  
                                l2237 1A90                                  l2229 1A88  
                                l2181 16A2                                  l2173 1690  
                                l2165 1646                                  l2157 1E46  
                                l2149 1800                                  l2093 11E2  
                                l2085 119C                                  l2077 115E  
                                l2069 1112                                  l2261 19B4  
                                l2253 1970                                  l2325 1406  
                                l2317 13C2                                  l2333 1446  
                                l2309 138C                                  l2239 1A92  
                                l2191 16DE                                  l2167 1658  
                                l2095 11F4                                  l2087 119E  
                                l2079 1160                                  l2255 1974  
                                l2327 1428                                  l2319 13D2  
                                l2335 144E                                  l2185 16A8  
                                l2169 1672                                  l2097 120C  
                                l2089 11C4                                  l2257 1978  
                                l2249 1BFC                                  l2337 1466  
                                l2329 142A                                  l2281 12A6  
                                l1803 1E28                                  l2187 16C2  
                                l2179 1696                                  l1811 1DF2  
                                l2099 120E                                  l2259 199E  
                                l2291 12EA                                  l2283 12BE  
                                l2275 1296                                  l2189 16D2  
                                l2197 16E4                                  l1901 1ADE  
                                l2293 12F6                                  l2285 12C8  
                                l2277 129E                                  l1831 1CE0  
                                l1751 1D78                                  l1807 1DE4  
                                l1911 1DBA                                  l1823 1934  
                                l1815 18F6                                  l2287 12D0  
                                l2279 12A2                                  l1753 1E0C  
                                l1761 1E38                                  l1841 1D0A  
                                l1905 1B5E                                  l1825 194A  
                                l1817 18FE                                  l1921 19E8  
                                l2289 12DE                                  l1915 1DCE  
                                l1835 1D2E                                  l1771 1DB6  
                                l1851 1D24                                  l1843 1D0A  
                                l1907 1B82                                  l1827 1952  
                                l1819 1904                                  l1931 1A32  
                                l1923 19FA                                  l2395 1334  
                                l2299 1306                                  l1861 1878  
                                l2397 1744                                  l1837 1D44  
                                l1757 1E1C                                  l1749 1D76  
                                l1765 1DFE                                  l1853 1D2A  
                                l1845 1D12                                  l1781 1D5A  
                                l1941 14BE                                  l1829 1954  
                                l1925 1A22                                  l1871 18F2  
                                l1863 188A                                  l1775 1E40  
                                l1847 1D18                                  l1791 1AE2  
                                l1783 1D60                                  l1951 150C  
                                l1943 14D6                                  l1935 148C  
                                l1927 1A26                                  l1919 19D6  
                                l1865 18E0                                  l1857 184A  
                                l1769 1DA4                                  l1849 1D1E  
                                l1793 1B04                                  l1785 1D66  
                                l1961 153E                                  l1953 1516  
                                l1937 14A4                                  l1929 1A2A  
                                l1867 18EC                                  l1859 1862  
                                l1891 1A9E                                  l1795 1B0A  
                                l1787 1D6C                                  l1779 1D56  
                                l1875 1CB6                                  l1971 158E  
                                l1963 154E                                  l1955 151A  
                                l1947 14DC                                  l1939 14AE  
                                l1893 1AC0                                  l1797 1B16  
                                l1885 1C8E                                  l1981 15C0  
                                l1973 1598                                  l1965 155E  
                                l1957 151E                                  l1949 14F2  
                                l1895 1AC6                                  l1799 1B1C  
                                l1887 1CA2                                  l1879 1C8C  
                                l1991 15F4                                  l1983 15C8  
                                l1975 15A2                                  l1967 156E  
                                l1959 152E                                  l1897 1AD2  
                                l1889 1CA4                                  l1993 1606  
                                l1985 15D8                                  l1977 15AC  
                                l1969 157E                                  l1899 1AD8  
                                l1995 162E                                  l1979 15B6  
                                l1999 1C5E                                  _ADIE 7CEE  
                                ?_isr 0027                                  _EEIE 7D04  
                                STR_1 1066                                  STR_2 105E  
                                STR_3 1046                                  STR_4 1046  
                                STR_5 1019                                  STR_6 103E  
                                STR_7 103E                                  STR_8 1027  
                                STR_9 1056                                  _T0IE 7F95  
                                u1000 1466                                  u1001 1462  
                                u1010 1478                                  u1011 1470  
                                u1028 147A                                  u1057 1B32  
                                u1067 1B4A                                  u1077 14FC  
                                u1087 1B88                                  _IPEN 7E87  
                                _PEIE 7F96                                  _RBIE 7F93  
                                _RCIE 7CED                                  _RBPU 7F8F  
                        _SPIWriteByte 1D74                                  _main 1296  
                     __end_of_SPIInit 1DA4                       __end_of_SPIRead 1DBA  
                                fsr1h 0FE2                                  fsr2h 0FDA  
                                indf2 0FDF                                  fsr1l 0FE1  
                                fsr2l 0FD9                                  btemp 0044  
                       _MRF24IsNewMsg 1B96                            _DelayReset 1D2E  
             GetShortAddr@reg_address 002A                                  start 0040  
                   DelayInit@duration 0028                          ___param_bank 0000  
                   ??_ReadByteSPIPort 0027                                 ??_isr 0027  
                      ??_MRF24J40Init 0041           __end_of_InicializoVariables 1A3C  
                       _SPIWrite2Byte 1E0C                                 ?_main 0027  
                               _BCLIE 7D03                                 STR_10 1056  
                               STR_11 1019                                 STR_12 104E  
                               STR_13 104E                                 STR_14 1027  
                               STR_15 1033                                 _INT0E 7F94  
                SetDeviceMACAddress@i 002B                                 i2l389 003C  
                      _MRF24GetDataIn 1E46                                 _TMR1H 0FCF  
                               _TMR1L 0FCE                                 _PORTA 0F80  
                               _PORTB 0F81                                 _PORTC 0F82  
                               _PORTD 0F83                                 _PORTE 0F84  
                               _SSPIE 7CEB                  __end_of_GetShortAddr 1D2E  
                     _InicializoMRF24 148C                       _InicializoPines 1DBA  
             SetShortAddr@reg_address 002A                                 tablat 0FF5  
                      ?_MRF24IsNewMsg 0027                                 ttemp5 0045  
                               ttemp6 0048                                 ttemp7 004C  
                               status 0FD8                                 wtemp8 0045  
                     __end_of_strncpy 1970               __end_of_IsMRF24Interrup 1DE2  
                 _SetDeviceMACAddress 1C8C                       __initialization 1BCA  
                        __end_of_main 148C  DebounceFSMUpdate@antirrebote_boton_n 0035  
                      ?_SPIWrite2Byte 0028                      __end_of_SetCSPin 1E28  
                         _GetLongAddr 1A9E                         ??_SetLongAddr 002F  
              __end_of_MRF24GetDataIn 1E4A                                ??_main 0042  
                       __activetblptr 0002                         ??_SetResetPin 0027  
                ?_SetDeviceMACAddress 0027                            _SetChannel 1B5E  
       InicializoMRF24@delay_time_out 0038                     ?_SetDeviceAddress 0027  
                              _CCP1IE 7CEA                                _CCP2IE 7D00  
                           ??_SPIInit 0027                             ??_SPIRead 0027  
                  ??_SetDeviceAddress 002B                                _T1RD16 7E6F  
                              _T1SYNC 7E6A                                i2l2351 0030  
                              i2l2343 000A                                i2l2345 0018  
                              i2l2347 0026                                i2l2349 0028  
                          _SetWakePin 1DE2                                _OSCCON 0FD3  
                              _TMR1IE 7CE8                                _TMR1IF 7CF0  
                              _TMR1CS 7E69                                _TMR2IE 7CE9  
                              _TMR1ON 7E68          __end_of_default_security_key 1011  
                              _SSPBUF 0FC9                           ?_DelayReset 0027  
                 DelayIsRunning@delay 0027               __end_of_InicializoMRF24 1632  
                              clear_0 1BD0                                clear_1 1BDC  
                              clear_2 1BE8                                isa$std 0001  
                     ?_MRF24GetDataIn 0027                        SetCSPin@estado 0027  
             __end_of_InicializoPines 1DCE                                _strcmp 1970  
                              _strcpy 1BFC                                _strlen 1C5E  
                 MRF24ReciboPaquete@i 0039                 ??_SetDeviceMACAddress 002B  
                        __mediumconst 0000                                tblptrh 0FF7  
                              tblptrl 0FF6                                tblptru 0FF8  
                 __end_of_SetLongAddr 1B24                    _MRF24ReciboPaquete 176E  
                    ??_DelayIsRunning 0028                             ??_strncpy 002B  
                     ??_MRF24IsNewMsg 0027                   __end_of_SetResetPin 1DFE  
               GetShortAddr@leido_spi 0029                     __end_of_DelayInit 1D08  
                   __end_of_DelayRead 18F6                  __end_of_MRF24J40Init 1B5E  
                          __accesstop 0060               __end_of__initialization 1BEE  
                 ?_MRF24ReciboPaquete 0027           __end_of_MRF24TransmitirDato 1296  
                   __end_of_BoardInit 1A9E                        DelayInit@delay 0027  
                       ___rparam_used 0001                        DelayRead@delay 0028  
                    SetWakePin@estado 0027                      ?_IsMRF24Interrup 0027  
                       ?_SetShortAddr 0029                        __pcstackCOMRAM 0027  
                     ??_SPIWrite2Byte 002A                    _long_mac_address_e 0006  
                ??_MRF24ReciboPaquete 0031                        main@data_out_s 0075  
                         ?_SetChannel 0027                            __pbssBANK0 00AD  
                          __pbssBANK1 0100                           ?_SetWakePin 0027  
                           ?_SetCSPin 0027                       _ReadByteSPIPort 1E40  
              InicializoMRF24@lectura 0037                            _data_out_s 0100  
                        _GetShortAddr 1D08                        ??_SetShortAddr 002A  
    MRF24TransmitirDato@largo_mensaje 0035                      ?_InicializoMRF24 0027  
                         _SetLongAddr 1AE2                               _T1CKPS0 7E6C  
                             _T1CKPS1 7E6D                               ?_strcmp 0027  
                             ?_strcpy 0027                               ?_strlen 0027  
                    ?_InicializoPines 0027                  _default_security_key 1001  
                             _T1OSCEN 7E6B                           _SetResetPin 1DF0  
                             _OSCTUNE 0F9B                               _SSPCON1 0FC6  
                             _SPIInit 1D8C                               _SPIRead 1DA4  
                          ??_SetCSPin 0027                     SetShortAddr@valor 0029  
                             __Hparam 0000                               __Lparam 0000  
                   ??_DebounceFSMInit 002D                          __psmallconst 1000  
                             __pcinit 1BCA                          ?_GetLongAddr 002C  
                             __ramtop 1000                               __ptext0 1296  
                             __ptext1 1BFC                               __ptext2 1970  
                             __ptext3 1070                               __ptext4 1C5E  
                             __ptext5 176E                               __ptext6 1B24  
                             __ptext7 19D6                               __ptext8 18F6  
                             __ptext9 1DBA                      _WriteByteSPIPort 1E36  
             __end_of_ReadByteSPIPort 1E46                               _strncpy 18F6  
                end_of_initialization 1BEE                         __Lmediumconst 0000  
                        ??_DelayReset 0028                      ??_MRF24GetDataIn 0029  
                 _default_mac_address 1011                               postdec2 0FDD  
                             postinc0 0FEE                               postinc1 0FE6  
                             postinc2 0FDE                               strcmp@l 0027  
                             strcmp@r 0028                               strcpy@d 002A  
                             strlen@a 0029                               strlen@s 0027  
                        _MRF24J40Init 1B24                             _PORTBbits 0F81  
                           _PORTCbits 0F82                    __end_of_DelayReset 1D54  
                WriteByteSPIPort@dato 0028                             _TRISBbits 0F93  
                           _TRISCbits 0F94                             _TRISDbits 0F95  
                           _TRISEbits 0F96                  __end_of_SetShortAddr 1D74  
               Write2ByteSPIPort@dato 002A                  GetLongAddr@respuesta 0030  
                          main@boton1 006A                             _DelayInit 1CE0  
                           _DelayRead 184A                             _BoardInit 1A3C  
                   _Write2ByteSPIPort 1DFE           __end_of_SetDeviceMACAddress 1CB6  
                       _data_config_s 0007                    ?_Write2ByteSPIPort 002A  
                      __end_of_strcmp 19D6                        __end_of_strcpy 1C2E  
                      __end_of_strlen 1C8C                          ??_SetChannel 0031  
                 start_initialization 1BCA                   ??_Write2ByteSPIPort 002C  
                         __end_of_isr 0040                      ?_ReadByteSPIPort 0027  
                       ?_SPIWriteByte 0027                          ??_SetWakePin 0027  
               __end_of_MRF24IsNewMsg 1BCA                            ?_DelayInit 0027  
                          ?_DelayRead 0028                            ?_BoardInit 0027  
           __end_of_Write2ByteSPIPort 1E0C                    __end_of_SetChannel 1B96  
                        _estadoActual 0005                 __end_of_SPIWrite2Byte 1E1A  
                        ?_SetLongAddr 002C                              ??_strcmp 0029  
                   main@mrf24_data_in 0060                              ??_strcpy 0029  
                            ??_strlen 0029                    __end_of_SetWakePin 1DF0  
                   _DebounceFSMUpdate 1632                          ?_SetResetPin 0027  
                         __pbssCOMRAM 0001                    ?_DebounceFSMUpdate 0035  
                       __pcstackBANK0 0060                       DelayReset@delay 0027  
                            ?_SPIInit 0027                              ?_SPIRead 0027  
                      ??_SPIWriteByte 0027                   ??_DebounceFSMUpdate 0037  
                    SPIWriteByte@dato 0027                       _DebounceFSMInit 1C2E  
                           _data_in_s 00AD                      _SetDeviceAddress 1CB6  
                 _InicializoVariables 19D6              __end_of_WriteByteSPIPort 1E40  
                           __pintcode 0008             __end_of_DebounceFSMUpdate 176E  
                   SetResetPin@estado 0027                           __smallconst 1000  
                ?_InicializoVariables 0027                              ?_strncpy 0027  
                    SetLongAddr@valor 002E                              _LATCbits 0F8B  
                            _LATDbits 0F8C                              _LATEbits 0F8D  
                         ??_DelayInit 002C                           ??_DelayRead 0029  
                            i2u103_40 0018                              i2u103_41 0014  
                            i2u104_40 0026                              i2u104_41 0022  
                         ??_BoardInit 0027                              _PIR1bits 0F9E  
                        _SetShortAddr 1D54                             _timeStamp 0001  
                  main@delay_parpadeo 0061                 ??_InicializoVariables 002D  
                   ??_IsMRF24Interrup 0027               __end_of_DebounceFSMInit 1C5E  
                            _SetCSPin 1E1A                              __Hrparam 0000  
                            __Lrparam 0000       MRF24ReciboPaquete@largo_mensaje 0036  
                __end_of_SPIWriteByte 1D8C                              __ptext10 1DE2  
                            __ptext11 1DF0                              __ptext20 1A9E  
                            __ptext12 148C                              __ptext21 1DFE  
                            __ptext13 1C8C                              __ptext30 1E46  
                            __ptext22 1E0C                              __ptext14 1CB6  
                            __ptext31 1632                              __ptext23 1D74  
                            __ptext15 1B5E                              __ptext32 184A  
                            __ptext24 1E1A                              __ptext16 1D54  
                            __ptext33 1E28                              __ptext25 1E40  
                            __ptext17 1AE2                              __ptext34 1C2E  
                            __ptext26 1DA4                              __ptext18 1D08  
                 _MRF24TransmitirDato 1070                              __ptext35 1CE0  
                            __ptext27 1D2E                              __ptext19 1E36  
                            __ptext36 1A3C                              __ptext28 1B96  
                            __ptext37 1D8C                              __ptext29 1DCE  
                          strcpy@dest 0027                     ??_InicializoMRF24 0035  
                      _DelayIsRunning 1E28                     ??_InicializoPines 0028  
                       ?_GetShortAddr 0027                  ?_MRF24TransmitirDato 0031  
                            isa$xinst 0000                              int$flags 0044  
  DebounceFSMInit@antirrebote_boton_n 002C           __end_of_default_mac_address 1019  
            __end_of_SetDeviceAddress 1CE0                 MRF24ReciboPaquete@add 0037  
                    ?_DebounceFSMInit 002C                              intlevel2 0000  
              __end_of_DelayIsRunning 1E36                  MRF24TransmitirDato@i 0034  
     MRF24TransmitirDato@p_info_out_s 0031                        ??_GetShortAddr 0029  
                           strcpy@src 0028                             strncpy@cp 002C  
               ??_MRF24TransmitirDato 0032                     ?_WriteByteSPIPort 0027  
          __end_of_MRF24ReciboPaquete 184A                         ??_GetLongAddr 002E  
                  ??_WriteByteSPIPort 0028                GetLongAddr@reg_address 002C  
                            strncpy@d 0027                              strncpy@n 0029  
                            strncpy@s 0028                           _SSPCON1bits 0FC6  
         DebounceFSMUpdate@estado_pin 0036                     SPIWrite2Byte@dato 0028  
              SetLongAddr@reg_address 002C                       ?_DelayIsRunning 0027  
          MRF24TransmitirDato@pos_mem 0037  
